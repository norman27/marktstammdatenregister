//! THIS IS A GENERATED FILE!
//! Take care when hand editing. Changes will be lost during subsequent runs of the code generator.
//!
//! version: 0.1.6
//!

            #![allow(dead_code)]           
            #![allow(unused_imports)]
            use yaserde_derive::{YaSerialize, YaDeserialize};
            use std::io::{Read, Write};
            use log::{warn, debug};
            
            pub const SOAP_ENCODING: &str = "http://www.w3.org/2003/05/soap-encoding";
            #[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
pub struct Header {
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "Fault",
	namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
	prefix = "soapenv",
)]
pub struct SoapFault {
	#[yaserde(rename = "faultcode", default)]
	pub fault_code: Option<String>, 
	#[yaserde(rename = "faultstring", default)]
	pub fault_string: Option<String>, 
}
impl std::error::Error for SoapFault {}

impl std::fmt::Display for SoapFault {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match (&self.fault_code, &self.fault_string) {
            (None, None) => Ok(()),
            (None, Some(fault_string)) => f.write_str(fault_string),
            (Some(fault_code), None) => f.write_str(fault_code),
            (Some(fault_code), Some(fault_string)) => {
                f.write_str(fault_code)?;
                f.write_str(": ")?;
                f.write_str(fault_string)
            }
        }
    }
}
pub type SoapResponse = Result<(reqwest::StatusCode, String), reqwest::Error>;

pub mod messages {
use yaserde::{YaSerialize, YaDeserialize};
            use yaserde::de::from_str;
            use async_trait::async_trait;
            use yaserde::ser::to_string;
            use super::*;
            #[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokaleUhrzeitRequest",
)]
pub struct GetLokaleUhrzeitRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetLokaleUhrzeitRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokaleUhrzeitResponse",
)]
pub struct GetLokaleUhrzeitResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetLokaleUhrzeitResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokaleUhrzeitMitAuthentifizierungRequest",
)]
pub struct GetLokaleUhrzeitMitAuthentifizierungRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetLokaleUhrzeitMitAuthentifizierungRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokaleUhrzeitMitAuthentifizierungResponse",
)]
pub struct GetLokaleUhrzeitMitAuthentifizierungResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetLokaleUhrzeitMitAuthentifizierungResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeKatalogkategorienRequest",
)]
pub struct GetListeKatalogkategorienRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetListeKatalogkategorienRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeKatalogkategorienResponse",
)]
pub struct GetListeKatalogkategorienResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetListeKatalogkategorienResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKatalogwerteRequest",
)]
pub struct GetKatalogwerteRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetKatalogwerteRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKatalogwerteResponse",
)]
pub struct GetKatalogwerteResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetKatalogwerteResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetBilanzierungsgebieteRequest",
)]
pub struct GetBilanzierungsgebieteRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetBilanzierungsgebieteRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetBilanzierungsgebieteResponse",
)]
pub struct GetBilanzierungsgebieteResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetBilanzierungsgebieteResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAktuellerStandTageskontingentRequest",
)]
pub struct GetAktuellerStandTageskontingentRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetAktuellerStandTageskontingentRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAktuellerStandTageskontingentResponse",
)]
pub struct GetAktuellerStandTageskontingentResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetAktuellerStandTageskontingentResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeAlleMarktakteureRequest",
)]
pub struct GetListeAlleMarktakteureRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetListeAlleMarktakteureRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeAlleMarktakteureResponse",
)]
pub struct GetListeAlleMarktakteureResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetListeAlleMarktakteureResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeFreigegebeneMarktakteureRequest",
)]
pub struct GetListeFreigegebeneMarktakteureRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetListeFreigegebeneMarktakteureRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeFreigegebeneMarktakteureResponse",
)]
pub struct GetListeFreigegebeneMarktakteureResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetListeFreigegebeneMarktakteureResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetMarktakteurRequest",
)]
pub struct GetMarktakteurRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetMarktakteurRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetMarktakteurResponse",
)]
pub struct GetMarktakteurResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetMarktakteurResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetMeineMarktakteureRequest",
)]
pub struct GetMeineMarktakteureRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetMeineMarktakteureRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetMeineMarktakteureResponse",
)]
pub struct GetMeineMarktakteureResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetMeineMarktakteureResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeGeloeschteUndDeaktivierteMarktakteureRequest",
)]
pub struct GetListeGeloeschteUndDeaktivierteMarktakteureRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetListeGeloeschteUndDeaktivierteMarktakteureRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeGeloeschteUndDeaktivierteMarktakteureResponse",
)]
pub struct GetListeGeloeschteUndDeaktivierteMarktakteureResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetListeGeloeschteUndDeaktivierteMarktakteureResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeLetzteAktualisierungRequest",
)]
pub struct GetListeLetzteAktualisierungRequest {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetListeLetzteAktualisierungRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeLetzteAktualisierungResponse",
)]
pub struct GetListeLetzteAktualisierungResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetListeLetzteAktualisierungResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeAlleEinheitenRequest",
)]
pub struct GetListeAlleEinheitenRequest {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetListeAlleEinheitenRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeAlleEinheitenResponse",
)]
pub struct GetListeAlleEinheitenResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetListeAlleEinheitenResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeFreigegebeneEinheitenRequest",
)]
pub struct GetListeFreigegebeneEinheitenRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetListeFreigegebeneEinheitenRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeFreigegebeneEinheitenResponse",
)]
pub struct GetListeFreigegebeneEinheitenResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetListeFreigegebeneEinheitenResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetMeineEinheitenRequest",
)]
pub struct GetMeineEinheitenRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetMeineEinheitenRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetMeineEinheitenResponse",
)]
pub struct GetMeineEinheitenResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetMeineEinheitenResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeEinheitenInMeinemNetzRequest",
)]
pub struct GetListeEinheitenInMeinemNetzRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetListeEinheitenInMeinemNetzRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeEinheitenInMeinemNetzResponse",
)]
pub struct GetListeEinheitenInMeinemNetzResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetListeEinheitenInMeinemNetzResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeGeloeschteUndDeaktivierteEinheitenRequest",
)]
pub struct GetListeGeloeschteUndDeaktivierteEinheitenRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetListeGeloeschteUndDeaktivierteEinheitenRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeGeloeschteUndDeaktivierteEinheitenResponse",
)]
pub struct GetListeGeloeschteUndDeaktivierteEinheitenResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetListeGeloeschteUndDeaktivierteEinheitenResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeEinheitenAenderungNetzbetreiberzuordnungRequest",
)]
pub struct GetListeEinheitenAenderungNetzbetreiberzuordnungRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetListeEinheitenAenderungNetzbetreiberzuordnungRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeEinheitenAenderungNetzbetreiberzuordnungResponse",
)]
pub struct GetListeEinheitenAenderungNetzbetreiberzuordnungResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetListeEinheitenAenderungNetzbetreiberzuordnungResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitWindRequest",
)]
pub struct GetEinheitWindRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetEinheitWindRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitWindResponse",
)]
pub struct GetEinheitWindResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetEinheitWindResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitSolarRequest",
)]
pub struct GetEinheitSolarRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetEinheitSolarRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitSolarResponse",
)]
pub struct GetEinheitSolarResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetEinheitSolarResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitBiomasseRequest",
)]
pub struct GetEinheitBiomasseRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetEinheitBiomasseRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitBiomasseResponse",
)]
pub struct GetEinheitBiomasseResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetEinheitBiomasseResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitWasserRequest",
)]
pub struct GetEinheitWasserRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetEinheitWasserRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitWasserResponse",
)]
pub struct GetEinheitWasserResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetEinheitWasserResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitGeothermieGrubengasDruckentspannungRequest",
)]
pub struct GetEinheitGeothermieGrubengasDruckentspannungRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetEinheitGeothermieGrubengasDruckentspannungRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitGeothermieGrubengasDruckentspannungResponse",
)]
pub struct GetEinheitGeothermieGrubengasDruckentspannungResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetEinheitGeothermieGrubengasDruckentspannungResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitVerbrennungRequest",
)]
pub struct GetEinheitVerbrennungRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetEinheitVerbrennungRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitVerbrennungResponse",
)]
pub struct GetEinheitVerbrennungResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetEinheitVerbrennungResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitKernkraftRequest",
)]
pub struct GetEinheitKernkraftRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetEinheitKernkraftRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitKernkraftResponse",
)]
pub struct GetEinheitKernkraftResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetEinheitKernkraftResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitStromSpeicherRequest",
)]
pub struct GetEinheitStromSpeicherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetEinheitStromSpeicherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitStromSpeicherResponse",
)]
pub struct GetEinheitStromSpeicherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetEinheitStromSpeicherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitStromVerbraucherRequest",
)]
pub struct GetEinheitStromVerbraucherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetEinheitStromVerbraucherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitStromVerbraucherResponse",
)]
pub struct GetEinheitStromVerbraucherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetEinheitStromVerbraucherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitGasErzeugerRequest",
)]
pub struct GetEinheitGasErzeugerRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetEinheitGasErzeugerRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitGasErzeugerResponse",
)]
pub struct GetEinheitGasErzeugerResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetEinheitGasErzeugerResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitGasSpeicherRequest",
)]
pub struct GetEinheitGasSpeicherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetEinheitGasSpeicherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitGasSpeicherResponse",
)]
pub struct GetEinheitGasSpeicherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetEinheitGasSpeicherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitGasVerbraucherRequest",
)]
pub struct GetEinheitGasVerbraucherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetEinheitGasVerbraucherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitGasVerbraucherResponse",
)]
pub struct GetEinheitGasVerbraucherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetEinheitGasVerbraucherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitGenehmigungRequest",
)]
pub struct GetEinheitGenehmigungRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetEinheitGenehmigungRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitGenehmigungResponse",
)]
pub struct GetEinheitGenehmigungResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetEinheitGenehmigungResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetStromSpeicherRequest",
)]
pub struct GetStromSpeicherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetStromSpeicherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetStromSpeicherResponse",
)]
pub struct GetStromSpeicherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetStromSpeicherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGasSpeicherRequest",
)]
pub struct GetGasSpeicherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetGasSpeicherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGasSpeicherResponse",
)]
pub struct GetGasSpeicherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetGasSpeicherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegWindRequest",
)]
pub struct GetAnlageEegWindRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetAnlageEegWindRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegWindResponse",
)]
pub struct GetAnlageEegWindResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetAnlageEegWindResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegSolarRequest",
)]
pub struct GetAnlageEegSolarRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetAnlageEegSolarRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegSolarResponse",
)]
pub struct GetAnlageEegSolarResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetAnlageEegSolarResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegBiomasseRequest",
)]
pub struct GetAnlageEegBiomasseRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetAnlageEegBiomasseRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegBiomasseResponse",
)]
pub struct GetAnlageEegBiomasseResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetAnlageEegBiomasseResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegWasserRequest",
)]
pub struct GetAnlageEegWasserRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetAnlageEegWasserRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegWasserResponse",
)]
pub struct GetAnlageEegWasserResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetAnlageEegWasserResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegSpeicherRequest",
)]
pub struct GetAnlageEegSpeicherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetAnlageEegSpeicherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegSpeicherResponse",
)]
pub struct GetAnlageEegSpeicherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetAnlageEegSpeicherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegGeothermieGrubengasDruckentspannungRequest",
)]
pub struct GetAnlageEegGeothermieGrubengasDruckentspannungRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetAnlageEegGeothermieGrubengasDruckentspannungRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegGeothermieGrubengasDruckentspannungResponse",
)]
pub struct GetAnlageEegGeothermieGrubengasDruckentspannungResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetAnlageEegGeothermieGrubengasDruckentspannungResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageKwkRequest",
)]
pub struct GetAnlageKwkRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetAnlageKwkRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageKwkResponse",
)]
pub struct GetAnlageKwkResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetAnlageKwkResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeAlleLokationenRequest",
)]
pub struct GetListeAlleLokationenRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetListeAlleLokationenRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeAlleLokationenResponse",
)]
pub struct GetListeAlleLokationenResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetListeAlleLokationenResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeFreigegebeneLokationenRequest",
)]
pub struct GetListeFreigegebeneLokationenRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetListeFreigegebeneLokationenRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeFreigegebeneLokationenResponse",
)]
pub struct GetListeFreigegebeneLokationenResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetListeFreigegebeneLokationenResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokationStromErzeugerRequest",
)]
pub struct GetLokationStromErzeugerRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetLokationStromErzeugerRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokationStromErzeugerResponse",
)]
pub struct GetLokationStromErzeugerResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetLokationStromErzeugerResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokationStromVerbraucherRequest",
)]
pub struct GetLokationStromVerbraucherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetLokationStromVerbraucherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokationStromVerbraucherResponse",
)]
pub struct GetLokationStromVerbraucherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetLokationStromVerbraucherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokationGasErzeugerRequest",
)]
pub struct GetLokationGasErzeugerRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetLokationGasErzeugerRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokationGasErzeugerResponse",
)]
pub struct GetLokationGasErzeugerResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetLokationGasErzeugerResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokationGasVerbraucherRequest",
)]
pub struct GetLokationGasVerbraucherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetLokationGasVerbraucherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokationGasVerbraucherResponse",
)]
pub struct GetLokationGasVerbraucherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetLokationGasVerbraucherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeMeineNetzbetreiberpruefungenRequest",
)]
pub struct GetListeMeineNetzbetreiberpruefungenRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetListeMeineNetzbetreiberpruefungenRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeMeineNetzbetreiberpruefungenResponse",
)]
pub struct GetListeMeineNetzbetreiberpruefungenResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetListeMeineNetzbetreiberpruefungenResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "ErneuteNetzbetreiberpruefungStartenRequest",
)]
pub struct ErneuteNetzbetreiberpruefungStartenRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::ErneuteNetzbetreiberpruefungStartenRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "ErneuteNetzbetreiberpruefungStartenResponse",
)]
pub struct ErneuteNetzbetreiberpruefungStartenResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::ErneuteNetzbetreiberpruefungStartenResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzanschlusspunktStromErzeugerRequest",
)]
pub struct SetNetzanschlusspunktStromErzeugerRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetNetzanschlusspunktStromErzeugerRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzanschlusspunktStromErzeugerResponse",
)]
pub struct SetNetzanschlusspunktStromErzeugerResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetNetzanschlusspunktStromErzeugerResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzanschlusspunktStromVerbraucherRequest",
)]
pub struct SetNetzanschlusspunktStromVerbraucherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetNetzanschlusspunktStromVerbraucherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzanschlusspunktStromVerbraucherResponse",
)]
pub struct SetNetzanschlusspunktStromVerbraucherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetNetzanschlusspunktStromVerbraucherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzanschlusspunktGasErzeugerRequest",
)]
pub struct SetNetzanschlusspunktGasErzeugerRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetNetzanschlusspunktGasErzeugerRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzanschlusspunktGasErzeugerResponse",
)]
pub struct SetNetzanschlusspunktGasErzeugerResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetNetzanschlusspunktGasErzeugerResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzanschlusspunktGasVerbraucherRequest",
)]
pub struct SetNetzanschlusspunktGasVerbraucherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetNetzanschlusspunktGasVerbraucherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzanschlusspunktGasVerbraucherResponse",
)]
pub struct SetNetzanschlusspunktGasVerbraucherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetNetzanschlusspunktGasVerbraucherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "DeleteNetzanschlusspunktRequest",
)]
pub struct DeleteNetzanschlusspunktRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::DeleteNetzanschlusspunktRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "DeleteNetzanschlusspunktResponse",
)]
pub struct DeleteNetzanschlusspunktResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::DeleteNetzanschlusspunktResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeMeineNetzanschlusspunkteRequest",
)]
pub struct GetListeMeineNetzanschlusspunkteRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetListeMeineNetzanschlusspunkteRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeMeineNetzanschlusspunkteResponse",
)]
pub struct GetListeMeineNetzanschlusspunkteResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetListeMeineNetzanschlusspunkteResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeAlleNetzanschlusspunkteRequest",
)]
pub struct GetListeAlleNetzanschlusspunkteRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetListeAlleNetzanschlusspunkteRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeAlleNetzanschlusspunkteResponse",
)]
pub struct GetListeAlleNetzanschlusspunkteResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetListeAlleNetzanschlusspunkteResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "VerschiebeEinheitZuAndererLokationRequest",
)]
pub struct VerschiebeEinheitZuAndererLokationRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::VerschiebeEinheitZuAndererLokationRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "VerschiebeEinheitZuAndererLokationResponse",
)]
pub struct VerschiebeEinheitZuAndererLokationResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::VerschiebeEinheitZuAndererLokationResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "VerschiebeEinheitZuNeuerLokationRequest",
)]
pub struct VerschiebeEinheitZuNeuerLokationRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::VerschiebeEinheitZuNeuerLokationRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "VerschiebeEinheitZuNeuerLokationResponse",
)]
pub struct VerschiebeEinheitZuNeuerLokationResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::VerschiebeEinheitZuNeuerLokationResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzbetreiberpruefungAbgeschlossenRequest",
)]
pub struct SetNetzbetreiberpruefungAbgeschlossenRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetNetzbetreiberpruefungAbgeschlossenRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzbetreiberpruefungAbgeschlossenResponse",
)]
pub struct SetNetzbetreiberpruefungAbgeschlossenResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetNetzbetreiberpruefungAbgeschlossenResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetDatenkorrekturErforderlichRequest",
)]
pub struct SetDatenkorrekturErforderlichRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetDatenkorrekturErforderlichRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetDatenkorrekturErforderlichResponse",
)]
pub struct SetDatenkorrekturErforderlichResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetDatenkorrekturErforderlichResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzbetreiberNichtZustaendigRequest",
)]
pub struct SetNetzbetreiberNichtZustaendigRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetNetzbetreiberNichtZustaendigRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzbetreiberNichtZustaendigResponse",
)]
pub struct SetNetzbetreiberNichtZustaendigResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetNetzbetreiberNichtZustaendigResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKlaerungErforderlichRequest",
)]
pub struct SetKlaerungErforderlichRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetKlaerungErforderlichRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKlaerungErforderlichResponse",
)]
pub struct SetKlaerungErforderlichResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetKlaerungErforderlichResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturBetriebsstatusRequest",
)]
pub struct SetKorrekturBetriebsstatusRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetKorrekturBetriebsstatusRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturBetriebsstatusResponse",
)]
pub struct SetKorrekturBetriebsstatusResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetKorrekturBetriebsstatusResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagBetriebsstatusRequest",
)]
pub struct GetKorrekturVorschlagBetriebsstatusRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetKorrekturVorschlagBetriebsstatusRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagBetriebsstatusResponse",
)]
pub struct GetKorrekturVorschlagBetriebsstatusResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetKorrekturVorschlagBetriebsstatusResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetWiedervorlageVorschlagBetriebsstatusRequest",
)]
pub struct GetWiedervorlageVorschlagBetriebsstatusRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetWiedervorlageVorschlagBetriebsstatusRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetWiedervorlageVorschlagBetriebsstatusResponse",
)]
pub struct GetWiedervorlageVorschlagBetriebsstatusResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetWiedervorlageVorschlagBetriebsstatusResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturBetriebsstatusAbgeschlossenRequest",
)]
pub struct SetKorrekturBetriebsstatusAbgeschlossenRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetKorrekturBetriebsstatusAbgeschlossenRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturBetriebsstatusAbgeschlossenResponse",
)]
pub struct SetKorrekturBetriebsstatusAbgeschlossenResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetKorrekturBetriebsstatusAbgeschlossenResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetEegAnlagenschluesselRequest",
)]
pub struct SetEegAnlagenschluesselRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetEegAnlagenschluesselRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetEegAnlagenschluesselResponse",
)]
pub struct SetEegAnlagenschluesselResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetEegAnlagenschluesselResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetStilllegungAbgelehntRequest",
)]
pub struct SetStilllegungAbgelehntRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetStilllegungAbgelehntRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetStilllegungAbgelehntResponse",
)]
pub struct SetStilllegungAbgelehntResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetStilllegungAbgelehntResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetAntragAufFristverlaengerungRequest",
)]
pub struct SetAntragAufFristverlaengerungRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetAntragAufFristverlaengerungRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetAntragAufFristverlaengerungResponse",
)]
pub struct SetAntragAufFristverlaengerungResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetAntragAufFristverlaengerungResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "RuecknahmeFristverlaengerungRequest",
)]
pub struct RuecknahmeFristverlaengerungRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::RuecknahmeFristverlaengerungRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "RuecknahmeFristverlaengerungResponse",
)]
pub struct RuecknahmeFristverlaengerungResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::RuecknahmeFristverlaengerungResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitWindRequest",
)]
pub struct SetKorrekturVorschlagEinheitWindRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetKorrekturVorschlagEinheitWindRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitWindResponse",
)]
pub struct SetKorrekturVorschlagEinheitWindResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetKorrekturVorschlagEinheitWindResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitAnlagenbetreiberRequest",
)]
pub struct SetKorrekturVorschlagEinheitAnlagenbetreiberRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetKorrekturVorschlagEinheitAnlagenbetreiberRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitAnlagenbetreiberResponse",
)]
pub struct SetKorrekturVorschlagEinheitAnlagenbetreiberResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetKorrekturVorschlagEinheitAnlagenbetreiberResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitSolarRequest",
)]
pub struct SetKorrekturVorschlagEinheitSolarRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetKorrekturVorschlagEinheitSolarRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitSolarResponse",
)]
pub struct SetKorrekturVorschlagEinheitSolarResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetKorrekturVorschlagEinheitSolarResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitBiomasseRequest",
)]
pub struct SetKorrekturVorschlagEinheitBiomasseRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetKorrekturVorschlagEinheitBiomasseRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitBiomasseResponse",
)]
pub struct SetKorrekturVorschlagEinheitBiomasseResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetKorrekturVorschlagEinheitBiomasseResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitWasserRequest",
)]
pub struct SetKorrekturVorschlagEinheitWasserRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetKorrekturVorschlagEinheitWasserRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitWasserResponse",
)]
pub struct SetKorrekturVorschlagEinheitWasserResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetKorrekturVorschlagEinheitWasserResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest",
)]
pub struct SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse",
)]
pub struct SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitVerbrennungRequest",
)]
pub struct SetKorrekturVorschlagEinheitVerbrennungRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetKorrekturVorschlagEinheitVerbrennungRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitVerbrennungResponse",
)]
pub struct SetKorrekturVorschlagEinheitVerbrennungResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetKorrekturVorschlagEinheitVerbrennungResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitGasSpeicherRequest",
)]
pub struct SetKorrekturVorschlagEinheitGasSpeicherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetKorrekturVorschlagEinheitGasSpeicherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitGasSpeicherResponse",
)]
pub struct SetKorrekturVorschlagEinheitGasSpeicherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetKorrekturVorschlagEinheitGasSpeicherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitStromVerbraucherRequest",
)]
pub struct SetKorrekturVorschlagEinheitStromVerbraucherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetKorrekturVorschlagEinheitStromVerbraucherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitStromVerbraucherResponse",
)]
pub struct SetKorrekturVorschlagEinheitStromVerbraucherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetKorrekturVorschlagEinheitStromVerbraucherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitGasErzeugerRequest",
)]
pub struct SetKorrekturVorschlagEinheitGasErzeugerRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetKorrekturVorschlagEinheitGasErzeugerRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitGasErzeugerResponse",
)]
pub struct SetKorrekturVorschlagEinheitGasErzeugerResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetKorrekturVorschlagEinheitGasErzeugerResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitGasVerbraucherRequest",
)]
pub struct SetKorrekturVorschlagEinheitGasVerbraucherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetKorrekturVorschlagEinheitGasVerbraucherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitGasVerbraucherResponse",
)]
pub struct SetKorrekturVorschlagEinheitGasVerbraucherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetKorrekturVorschlagEinheitGasVerbraucherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitStromSpeicherRequest",
)]
pub struct SetKorrekturVorschlagEinheitStromSpeicherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetKorrekturVorschlagEinheitStromSpeicherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitStromSpeicherResponse",
)]
pub struct SetKorrekturVorschlagEinheitStromSpeicherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetKorrekturVorschlagEinheitStromSpeicherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitWindRequest",
)]
pub struct GetKorrekturVorschlagEinheitWindRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetKorrekturVorschlagEinheitWindRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitWindResponse",
)]
pub struct GetKorrekturVorschlagEinheitWindResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetKorrekturVorschlagEinheitWindResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitAnlagenbetreiberRequest",
)]
pub struct GetKorrekturVorschlagEinheitAnlagenbetreiberRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetKorrekturVorschlagEinheitAnlagenbetreiberRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitAnlagenbetreiberResponse",
)]
pub struct GetKorrekturVorschlagEinheitAnlagenbetreiberResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetKorrekturVorschlagEinheitAnlagenbetreiberResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitSolarRequest",
)]
pub struct GetKorrekturVorschlagEinheitSolarRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetKorrekturVorschlagEinheitSolarRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitSolarResponse",
)]
pub struct GetKorrekturVorschlagEinheitSolarResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetKorrekturVorschlagEinheitSolarResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitBiomasseRequest",
)]
pub struct GetKorrekturVorschlagEinheitBiomasseRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetKorrekturVorschlagEinheitBiomasseRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitBiomasseResponse",
)]
pub struct GetKorrekturVorschlagEinheitBiomasseResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetKorrekturVorschlagEinheitBiomasseResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitWasserRequest",
)]
pub struct GetKorrekturVorschlagEinheitWasserRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetKorrekturVorschlagEinheitWasserRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitWasserResponse",
)]
pub struct GetKorrekturVorschlagEinheitWasserResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetKorrekturVorschlagEinheitWasserResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest",
)]
pub struct GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse",
)]
pub struct GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitVerbrennungRequest",
)]
pub struct GetKorrekturVorschlagEinheitVerbrennungRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetKorrekturVorschlagEinheitVerbrennungRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitVerbrennungResponse",
)]
pub struct GetKorrekturVorschlagEinheitVerbrennungResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetKorrekturVorschlagEinheitVerbrennungResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitGasSpeicherRequest",
)]
pub struct GetKorrekturVorschlagEinheitGasSpeicherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetKorrekturVorschlagEinheitGasSpeicherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitGasSpeicherResponse",
)]
pub struct GetKorrekturVorschlagEinheitGasSpeicherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetKorrekturVorschlagEinheitGasSpeicherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitStromVerbraucherRequest",
)]
pub struct GetKorrekturVorschlagEinheitStromVerbraucherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetKorrekturVorschlagEinheitStromVerbraucherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitStromVerbraucherResponse",
)]
pub struct GetKorrekturVorschlagEinheitStromVerbraucherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetKorrekturVorschlagEinheitStromVerbraucherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitGasErzeugerRequest",
)]
pub struct GetKorrekturVorschlagEinheitGasErzeugerRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetKorrekturVorschlagEinheitGasErzeugerRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitGasErzeugerResponse",
)]
pub struct GetKorrekturVorschlagEinheitGasErzeugerResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetKorrekturVorschlagEinheitGasErzeugerResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitGasVerbraucherRequest",
)]
pub struct GetKorrekturVorschlagEinheitGasVerbraucherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetKorrekturVorschlagEinheitGasVerbraucherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitGasVerbraucherResponse",
)]
pub struct GetKorrekturVorschlagEinheitGasVerbraucherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetKorrekturVorschlagEinheitGasVerbraucherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitStromSpeicherRequest",
)]
pub struct GetKorrekturVorschlagEinheitStromSpeicherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetKorrekturVorschlagEinheitStromSpeicherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitStromSpeicherResponse",
)]
pub struct GetKorrekturVorschlagEinheitStromSpeicherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetKorrekturVorschlagEinheitStromSpeicherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "DeleteKorrekturvorschlagRequest",
)]
pub struct DeleteKorrekturvorschlagRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::DeleteKorrekturvorschlagRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "DeleteKorrekturvorschlagResponse",
)]
pub struct DeleteKorrekturvorschlagResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::DeleteKorrekturvorschlagResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeMarktakteureRequest",
)]
pub struct GetGefilterteListeMarktakteureRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetGefilterteListeMarktakteureRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeMarktakteureResponse",
)]
pub struct GetGefilterteListeMarktakteureResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetGefilterteListeMarktakteureResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeStromErzeugerRequest",
)]
pub struct GetGefilterteListeStromErzeugerRequest {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetGefilterteListeStromErzeugerRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeStromErzeugerResponse",
)]
pub struct GetGefilterteListeStromErzeugerResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetGefilterteListeStromErzeugerResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeStromVerbraucherRequest",
)]
pub struct GetGefilterteListeStromVerbraucherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetGefilterteListeStromVerbraucherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeStromVerbraucherResponse",
)]
pub struct GetGefilterteListeStromVerbraucherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetGefilterteListeStromVerbraucherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeGasErzeugerRequest",
)]
pub struct GetGefilterteListeGasErzeugerRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetGefilterteListeGasErzeugerRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeGasErzeugerResponse",
)]
pub struct GetGefilterteListeGasErzeugerResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetGefilterteListeGasErzeugerResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeGasVerbraucherRequest",
)]
pub struct GetGefilterteListeGasVerbraucherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetGefilterteListeGasVerbraucherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeGasVerbraucherResponse",
)]
pub struct GetGefilterteListeGasVerbraucherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetGefilterteListeGasVerbraucherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeLokationenStromErzeugerRequest",
)]
pub struct GetGefilterteListeLokationenStromErzeugerRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetGefilterteListeLokationenStromErzeugerRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeLokationenStromErzeugerResponse",
)]
pub struct GetGefilterteListeLokationenStromErzeugerResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetGefilterteListeLokationenStromErzeugerResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeLokationenStromVerbraucherRequest",
)]
pub struct GetGefilterteListeLokationenStromVerbraucherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetGefilterteListeLokationenStromVerbraucherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeLokationenStromVerbraucherResponse",
)]
pub struct GetGefilterteListeLokationenStromVerbraucherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetGefilterteListeLokationenStromVerbraucherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeLokationenGasErzeugerRequest",
)]
pub struct GetGefilterteListeLokationenGasErzeugerRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetGefilterteListeLokationenGasErzeugerRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeLokationenGasErzeugerResponse",
)]
pub struct GetGefilterteListeLokationenGasErzeugerResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetGefilterteListeLokationenGasErzeugerResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeLokationenGasVerbraucherRequest",
)]
pub struct GetGefilterteListeLokationenGasVerbraucherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetGefilterteListeLokationenGasVerbraucherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeLokationenGasVerbraucherResponse",
)]
pub struct GetGefilterteListeLokationenGasVerbraucherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetGefilterteListeLokationenGasVerbraucherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberRequest",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberResponse",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitWindRequest",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitWindRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetMastrqsKorrekturVorschlagEinheitWindRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitWindResponse",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitWindResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetMastrqsKorrekturVorschlagEinheitWindResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitSolarRequest",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitSolarRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetMastrqsKorrekturVorschlagEinheitSolarRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitSolarResponse",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitSolarResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetMastrqsKorrekturVorschlagEinheitSolarResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitBiomasseRequest",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitBiomasseRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetMastrqsKorrekturVorschlagEinheitBiomasseRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitBiomasseResponse",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitBiomasseResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetMastrqsKorrekturVorschlagEinheitBiomasseResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitWasserRequest",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitWasserRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetMastrqsKorrekturVorschlagEinheitWasserRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitWasserResponse",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitWasserResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetMastrqsKorrekturVorschlagEinheitWasserResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitVerbrennungRequest",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitVerbrennungRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetMastrqsKorrekturVorschlagEinheitVerbrennungRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitVerbrennungResponse",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitVerbrennungResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetMastrqsKorrekturVorschlagEinheitVerbrennungResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitGasSpeicherRequest",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitGasSpeicherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetMastrqsKorrekturVorschlagEinheitGasSpeicherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitGasSpeicherResponse",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitGasSpeicherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetMastrqsKorrekturVorschlagEinheitGasSpeicherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitStromVerbraucherRequest",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitStromVerbraucherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetMastrqsKorrekturVorschlagEinheitStromVerbraucherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitStromVerbraucherResponse",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitStromVerbraucherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetMastrqsKorrekturVorschlagEinheitStromVerbraucherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitGasErzeugerRequest",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitGasErzeugerRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetMastrqsKorrekturVorschlagEinheitGasErzeugerRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitGasErzeugerResponse",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitGasErzeugerResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetMastrqsKorrekturVorschlagEinheitGasErzeugerResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitGasVerbraucherRequest",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitGasVerbraucherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetMastrqsKorrekturVorschlagEinheitGasVerbraucherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitGasVerbraucherResponse",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitGasVerbraucherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetMastrqsKorrekturVorschlagEinheitGasVerbraucherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitStromSpeicherRequest",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitStromSpeicherRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::SetMastrqsKorrekturVorschlagEinheitStromSpeicherRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitStromSpeicherResponse",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitStromSpeicherResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::SetMastrqsKorrekturVorschlagEinheitStromSpeicherResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "MastrqsTicketBearbeiterZuweisenRequest",
)]
pub struct MastrqsTicketBearbeiterZuweisenRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::MastrqsTicketBearbeiterZuweisenRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "MastrqsTicketBearbeiterZuweisenResponse",
)]
pub struct MastrqsTicketBearbeiterZuweisenResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::MastrqsTicketBearbeiterZuweisenResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "MastrqsStichwoerterAendernRequest",
)]
pub struct MastrqsStichwoerterAendernRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::MastrqsStichwoerterAendernRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "MastrqsStichwoerterAendernResponse",
)]
pub struct MastrqsStichwoerterAendernResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::MastrqsStichwoerterAendernResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "MastrqsKorrekturvorschlagStornierenRequest",
)]
pub struct MastrqsKorrekturvorschlagStornierenRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::MastrqsKorrekturvorschlagStornierenRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "MastrqsKorrekturvorschlagStornierenResponse",
)]
pub struct MastrqsKorrekturvorschlagStornierenResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::MastrqsKorrekturvorschlagStornierenResponse, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagRequest",
)]
pub struct GetKorrekturVorschlagRequest {
	#[yaserde(flatten, default)]
	pub parameters_i: types::GetKorrekturVorschlagRequest, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagResponse",
)]
pub struct GetKorrekturVorschlagResponse {
	#[yaserde(flatten, default)]
	pub parameters_o: types::GetKorrekturVorschlagResponse, 
}
}

pub mod types {
use yaserde::{YaSerialize, YaDeserialize};
            use yaserde::de::from_str;
            use async_trait::async_trait;
            use yaserde::ser::to_string;
            use super::*;
            #[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "EinsatzverantwortlicherMaStRNummerId",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct EinsatzverantwortlicherMaStRNummerId {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "StromSpeicherMastrNummerId",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct StromSpeicherMastrNummerId {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GasSpeicherMastrNummerId",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GasSpeicherMastrNummerId {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "MarktrolleMastrNummerId",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct MarktrolleMastrNummerId {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "EegMastrNummerId",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct EegMastrNummerId {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "KwkMastrNummerId",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct KwkMastrNummerId {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GenMastrNummerId",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GenMastrNummerId {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "MaStRNummerId",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct MaStRNummerId {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "Nuts2Id",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct Nuts2Id {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "ErgebniscodeTyp",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct ErgebniscodeTyp {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "KatalogkategorieId",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct KatalogkategorieId {
	#[yaserde(default)]
	pub body: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "KatalogwertId",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct KatalogwertId {
	#[yaserde(default)]
	pub body: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "MarktakteurMastrNummerId",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct MarktakteurMastrNummerId {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "EinheitMastrNummerId",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct EinheitMastrNummerId {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "BilanzierungsgebietId",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct BilanzierungsgebietId {
	#[yaserde(default)]
	pub body: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "NetzbetreiberpruefungId",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct NetzbetreiberpruefungId {
	#[yaserde(default)]
	pub body: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "NetzbetreiberpruefungTicketId",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct NetzbetreiberpruefungTicketId {
	#[yaserde(default)]
	pub body: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "KorrekturVorschlagId",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct KorrekturVorschlagId {
	#[yaserde(default)]
	pub body: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "MaStRQSProzessId",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct MaStRQSProzessId {
	#[yaserde(default)]
	pub body: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "MaStRQSTicketId",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct MaStRQSTicketId {
	#[yaserde(default)]
	pub body: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "MaStRQSRequestId",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct MaStRQSRequestId {
	#[yaserde(default)]
	pub body: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "DatenuebernahmeEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct DatenuebernahmeEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "MaStRQSProzessId", prefix = "nsi2", default)]
	pub ma_st_rqs_prozess_id: i32, 
	#[yaserde(rename = "MaStRQSTicketId", prefix = "nsi2", default)]
	pub ma_st_rqs_ticket_id: i32, 
	#[yaserde(rename = "MaStRQSRequestId", prefix = "nsi2", default)]
	pub ma_st_rqs_request_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitWindAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitWindAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "MaStRQSProzessId", prefix = "nsi2", default)]
	pub ma_st_rqs_prozess_id: i32, 
	#[yaserde(rename = "MaStRQSTicketId", prefix = "nsi2", default)]
	pub ma_st_rqs_ticket_id: i32, 
	#[yaserde(rename = "MaStRQSRequestId", prefix = "nsi2", default)]
	pub ma_st_rqs_request_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitSolarAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitSolarAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "MaStRQSProzessId", prefix = "nsi2", default)]
	pub ma_st_rqs_prozess_id: i32, 
	#[yaserde(rename = "MaStRQSTicketId", prefix = "nsi2", default)]
	pub ma_st_rqs_ticket_id: i32, 
	#[yaserde(rename = "MaStRQSRequestId", prefix = "nsi2", default)]
	pub ma_st_rqs_request_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitBiomasseAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitBiomasseAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "MaStRQSProzessId", prefix = "nsi2", default)]
	pub ma_st_rqs_prozess_id: i32, 
	#[yaserde(rename = "MaStRQSTicketId", prefix = "nsi2", default)]
	pub ma_st_rqs_ticket_id: i32, 
	#[yaserde(rename = "MaStRQSRequestId", prefix = "nsi2", default)]
	pub ma_st_rqs_request_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitWasserAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitWasserAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "MaStRQSProzessId", prefix = "nsi2", default)]
	pub ma_st_rqs_prozess_id: i32, 
	#[yaserde(rename = "MaStRQSTicketId", prefix = "nsi2", default)]
	pub ma_st_rqs_ticket_id: i32, 
	#[yaserde(rename = "MaStRQSRequestId", prefix = "nsi2", default)]
	pub ma_st_rqs_request_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "MaStRQSProzessId", prefix = "nsi2", default)]
	pub ma_st_rqs_prozess_id: i32, 
	#[yaserde(rename = "MaStRQSTicketId", prefix = "nsi2", default)]
	pub ma_st_rqs_ticket_id: i32, 
	#[yaserde(rename = "MaStRQSRequestId", prefix = "nsi2", default)]
	pub ma_st_rqs_request_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitVerbrennungAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitVerbrennungAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "MaStRQSProzessId", prefix = "nsi2", default)]
	pub ma_st_rqs_prozess_id: i32, 
	#[yaserde(rename = "MaStRQSTicketId", prefix = "nsi2", default)]
	pub ma_st_rqs_ticket_id: i32, 
	#[yaserde(rename = "MaStRQSRequestId", prefix = "nsi2", default)]
	pub ma_st_rqs_request_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitGasSpeicherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitGasSpeicherAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "MaStRQSProzessId", prefix = "nsi2", default)]
	pub ma_st_rqs_prozess_id: i32, 
	#[yaserde(rename = "MaStRQSTicketId", prefix = "nsi2", default)]
	pub ma_st_rqs_ticket_id: i32, 
	#[yaserde(rename = "MaStRQSRequestId", prefix = "nsi2", default)]
	pub ma_st_rqs_request_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitStromVerbraucherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitStromVerbraucherAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "MaStRQSProzessId", prefix = "nsi2", default)]
	pub ma_st_rqs_prozess_id: i32, 
	#[yaserde(rename = "MaStRQSTicketId", prefix = "nsi2", default)]
	pub ma_st_rqs_ticket_id: i32, 
	#[yaserde(rename = "MaStRQSRequestId", prefix = "nsi2", default)]
	pub ma_st_rqs_request_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitGasErzeugerAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitGasErzeugerAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "MaStRQSProzessId", prefix = "nsi2", default)]
	pub ma_st_rqs_prozess_id: i32, 
	#[yaserde(rename = "MaStRQSTicketId", prefix = "nsi2", default)]
	pub ma_st_rqs_ticket_id: i32, 
	#[yaserde(rename = "MaStRQSRequestId", prefix = "nsi2", default)]
	pub ma_st_rqs_request_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitGasVerbraucherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitGasVerbraucherAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "MaStRQSProzessId", prefix = "nsi2", default)]
	pub ma_st_rqs_prozess_id: i32, 
	#[yaserde(rename = "MaStRQSTicketId", prefix = "nsi2", default)]
	pub ma_st_rqs_ticket_id: i32, 
	#[yaserde(rename = "MaStRQSRequestId", prefix = "nsi2", default)]
	pub ma_st_rqs_request_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitStromSpeicherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitStromSpeicherAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "MaStRQSProzessId", prefix = "nsi2", default)]
	pub ma_st_rqs_prozess_id: i32, 
	#[yaserde(rename = "MaStRQSTicketId", prefix = "nsi2", default)]
	pub ma_st_rqs_ticket_id: i32, 
	#[yaserde(rename = "MaStRQSRequestId", prefix = "nsi2", default)]
	pub ma_st_rqs_request_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "MastrqsKorrekturvorschlagStornierenAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct MastrqsKorrekturvorschlagStornierenAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "MastrqsTicketBearbeiterZuweisenParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct MastrqsTicketBearbeiterZuweisenParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "TicketId", prefix = "nsi2", default)]
	pub ticket_id: i32, 
	#[yaserde(rename = "UserId", prefix = "nsi2", default)]
	pub user_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "MastrqsTicketBearbeiterZuweisenAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct MastrqsTicketBearbeiterZuweisenAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "MastrqsStichwoerterAendernParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct MastrqsStichwoerterAendernParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "ProzessId", prefix = "nsi2", default)]
	pub prozess_id: i32, 
	#[yaserde(rename = "StichwortIds", prefix = "nsi2", default)]
	pub stichwort_ids: Vec<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "MastrqsStichwoerterAendernAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct MastrqsStichwoerterAendernAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "anlagenbetreiberMastrNummer", prefix = "nsi2", default)]
	pub anlagenbetreiber_mastr_nummer: MarktakteurMastrNummerId, 
	#[yaserde(rename = "datenuebernahme", prefix = "nsi2", default)]
	pub datenuebernahme: DatenuebernahmeEnum, 
	#[yaserde(rename = "beschreibung", prefix = "nsi2", default)]
	pub beschreibung: Option<String>, 
	#[yaserde(rename = "letzteAenderung", prefix = "nsi2", default)]
	pub letzte_aenderung: Option<String>, 
	#[yaserde(rename = "Personenart", prefix = "nsi2", default)]
	pub personenart: Option<PersonenartEnum>, 
	#[yaserde(rename = "PersonenartZuPruefen", prefix = "nsi2", default)]
	pub personenart_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Firmenname", prefix = "nsi2", default)]
	pub firmenname: Option<String>, 
	#[yaserde(rename = "FirmennameZuPruefen", prefix = "nsi2", default)]
	pub firmenname_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "RechtsformId", prefix = "nsi2", default)]
	pub rechtsform_id: Option<KatalogwertId>, 
	#[yaserde(rename = "RechtsformIdZuPruefen", prefix = "nsi2", default)]
	pub rechtsform_id_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "SonstigeRechtsform", prefix = "nsi2", default)]
	pub sonstige_rechtsform: Option<String>, 
	#[yaserde(rename = "SonstigeRechtsformZuPruefen", prefix = "nsi2", default)]
	pub sonstige_rechtsform_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Anrede", prefix = "nsi2", default)]
	pub anrede: Option<SalutationEnum>, 
	#[yaserde(rename = "AnredeZuPruefen", prefix = "nsi2", default)]
	pub anrede_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Titel", prefix = "nsi2", default)]
	pub titel: Option<TitelEnum>, 
	#[yaserde(rename = "TitelZuPruefen", prefix = "nsi2", default)]
	pub titel_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Vorname", prefix = "nsi2", default)]
	pub vorname: Option<String>, 
	#[yaserde(rename = "VornameZuPruefen", prefix = "nsi2", default)]
	pub vorname_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Nachname", prefix = "nsi2", default)]
	pub nachname: Option<String>, 
	#[yaserde(rename = "NachnameZuPruefen", prefix = "nsi2", default)]
	pub nachname_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Geburtsdatum", prefix = "nsi2", default)]
	pub geburtsdatum: Option<String>, 
	#[yaserde(rename = "GeburtsdatumZuPruefen", prefix = "nsi2", default)]
	pub geburtsdatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Postleitzahl", prefix = "nsi2", default)]
	pub postleitzahl: Option<String>, 
	#[yaserde(rename = "PostleitzahlZuPruefen", prefix = "nsi2", default)]
	pub postleitzahl_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Strasse", prefix = "nsi2", default)]
	pub strasse: Option<String>, 
	#[yaserde(rename = "StrasseZuPruefen", prefix = "nsi2", default)]
	pub strasse_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "StrasseNichtGefunden", prefix = "nsi2", default)]
	pub strasse_nicht_gefunden: Option<bool>, 
	#[yaserde(rename = "Hausnummer", prefix = "nsi2", default)]
	pub hausnummer: Option<ErweiterterString>, 
	#[yaserde(rename = "HausnummerZuPruefen", prefix = "nsi2", default)]
	pub hausnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "HausnummerNichtGefunden", prefix = "nsi2", default)]
	pub hausnummer_nicht_gefunden: Option<bool>, 
	#[yaserde(rename = "Adresszusatz", prefix = "nsi2", default)]
	pub adresszusatz: Option<String>, 
	#[yaserde(rename = "AdresszusatzZuPruefen", prefix = "nsi2", default)]
	pub adresszusatz_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Ort", prefix = "nsi2", default)]
	pub ort: Option<String>, 
	#[yaserde(rename = "OrtZuPruefen", prefix = "nsi2", default)]
	pub ort_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Bundesland", prefix = "nsi2", default)]
	pub bundesland: Option<BundeslaenderEnum>, 
	#[yaserde(rename = "BundeslandZuPruefen", prefix = "nsi2", default)]
	pub bundesland_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Land", prefix = "nsi2", default)]
	pub land: Option<LandEnum>, 
	#[yaserde(rename = "LandZuPruefen", prefix = "nsi2", default)]
	pub land_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ZustelladresseVorhanden", prefix = "nsi2", default)]
	pub zustelladresse_vorhanden: Option<bool>, 
	#[yaserde(rename = "ZustelladresseVorhandenZuPruefen", prefix = "nsi2", default)]
	pub zustelladresse_vorhanden_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ZustellPostleitzahl", prefix = "nsi2", default)]
	pub zustell_postleitzahl: Option<String>, 
	#[yaserde(rename = "ZustellPostleitzahlZuPruefen", prefix = "nsi2", default)]
	pub zustell_postleitzahl_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ZustellStrasse", prefix = "nsi2", default)]
	pub zustell_strasse: Option<String>, 
	#[yaserde(rename = "ZustellStrasseZuPruefen", prefix = "nsi2", default)]
	pub zustell_strasse_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ZustellStrasseNichtGefunden", prefix = "nsi2", default)]
	pub zustell_strasse_nicht_gefunden: Option<bool>, 
	#[yaserde(rename = "ZustellHausnummer", prefix = "nsi2", default)]
	pub zustell_hausnummer: Option<ErweiterterString>, 
	#[yaserde(rename = "ZustellHausnummerZuPruefen", prefix = "nsi2", default)]
	pub zustell_hausnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ZustellHausnummerNichtGefunden", prefix = "nsi2", default)]
	pub zustell_hausnummer_nicht_gefunden: Option<bool>, 
	#[yaserde(rename = "ZustellAdresszusatz", prefix = "nsi2", default)]
	pub zustell_adresszusatz: Option<String>, 
	#[yaserde(rename = "ZustellAdresszusatzZuPruefen", prefix = "nsi2", default)]
	pub zustell_adresszusatz_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ZustellOrt", prefix = "nsi2", default)]
	pub zustell_ort: Option<String>, 
	#[yaserde(rename = "ZustellOrtZuPruefen", prefix = "nsi2", default)]
	pub zustell_ort_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ZustellLand", prefix = "nsi2", default)]
	pub zustell_land: Option<LandEnum>, 
	#[yaserde(rename = "ZustellLandZuPruefen", prefix = "nsi2", default)]
	pub zustell_land_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AbweichenderNameFirmenname", prefix = "nsi2", default)]
	pub abweichender_name_firmenname: Option<String>, 
	#[yaserde(rename = "AbweichenderNameFirmennameZuPruefen", prefix = "nsi2", default)]
	pub abweichender_name_firmenname_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Email", prefix = "nsi2", default)]
	pub email: Option<String>, 
	#[yaserde(rename = "EmailZuPruefen", prefix = "nsi2", default)]
	pub email_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Telefon", prefix = "nsi2", default)]
	pub telefon: Option<String>, 
	#[yaserde(rename = "TelefonZuPruefen", prefix = "nsi2", default)]
	pub telefon_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Fax", prefix = "nsi2", default)]
	pub fax: Option<ErweiterterString>, 
	#[yaserde(rename = "FaxZuPruefen", prefix = "nsi2", default)]
	pub fax_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Webseite", prefix = "nsi2", default)]
	pub webseite: Option<ErweiterterString>, 
	#[yaserde(rename = "WebseiteZuPruefen", prefix = "nsi2", default)]
	pub webseite_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "EmailMarktakteurvertreter", prefix = "nsi2", default)]
	pub email_marktakteurvertreter: Option<String>, 
	#[yaserde(rename = "EmailMarktakteurvertreterZuPruefen", prefix = "nsi2", default)]
	pub email_marktakteurvertreter_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "TelefonMarktakteurvertreter", prefix = "nsi2", default)]
	pub telefon_marktakteurvertreter: Option<String>, 
	#[yaserde(rename = "TelefonMarktakteurvertreterZuPruefen", prefix = "nsi2", default)]
	pub telefon_marktakteurvertreter_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ImHandelsregisterEingetragen", prefix = "nsi2", default)]
	pub im_handelsregister_eingetragen: Option<bool>, 
	#[yaserde(rename = "ImHandelsregisterEingetragenZuPruefen", prefix = "nsi2", default)]
	pub im_handelsregister_eingetragen_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "RegistergerichtId", prefix = "nsi2", default)]
	pub registergericht_id: Option<KatalogwertId>, 
	#[yaserde(rename = "RegistergerichtIdZuPruefen", prefix = "nsi2", default)]
	pub registergericht_id_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "RegisternummerPraefix", prefix = "nsi2", default)]
	pub registernummer_praefix: Option<RegisterNrPraefixEnum>, 
	#[yaserde(rename = "RegisternummerPraefixZuPruefen", prefix = "nsi2", default)]
	pub registernummer_praefix_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Registernummer", prefix = "nsi2", default)]
	pub registernummer: Option<String>, 
	#[yaserde(rename = "RegisternummerZuPruefen", prefix = "nsi2", default)]
	pub registernummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "RegistergerichtAusland", prefix = "nsi2", default)]
	pub registergericht_ausland: Option<String>, 
	#[yaserde(rename = "RegistergerichtAuslandZuPruefen", prefix = "nsi2", default)]
	pub registergericht_ausland_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "RegisternummerAusland", prefix = "nsi2", default)]
	pub registernummer_ausland: Option<String>, 
	#[yaserde(rename = "RegisternummerAuslandZuPruefen", prefix = "nsi2", default)]
	pub registernummer_ausland_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Taetigkeitsbeginn", prefix = "nsi2", default)]
	pub taetigkeitsbeginn: Option<String>, 
	#[yaserde(rename = "TaetigkeitsbeginnZuPruefen", prefix = "nsi2", default)]
	pub taetigkeitsbeginn_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Taetigkeitsende", prefix = "nsi2", default)]
	pub taetigkeitsende: Option<String>, 
	#[yaserde(rename = "TaetigkeitsendeZuPruefen", prefix = "nsi2", default)]
	pub taetigkeitsende_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AcerCode", prefix = "nsi2", default)]
	pub acer_code: Option<ErweiterterString>, 
	#[yaserde(rename = "AcerCodeZuPruefen", prefix = "nsi2", default)]
	pub acer_code_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Umsatzsteueridentifikationsnummer", prefix = "nsi2", default)]
	pub umsatzsteueridentifikationsnummer: Option<ErweiterterString>, 
	#[yaserde(rename = "UmsatzsteueridentifikationsnummerZuPruefen", prefix = "nsi2", default)]
	pub umsatzsteueridentifikationsnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "HauptwirtdschaftszweigGruppe", prefix = "nsi2", default)]
	pub hauptwirtdschaftszweig_gruppe: Option<NaceGruppeEnum>, 
	#[yaserde(rename = "HauptwirtdschaftszweigGruppeZuPruefen", prefix = "nsi2", default)]
	pub hauptwirtdschaftszweig_gruppe_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Kmu", prefix = "nsi2", default)]
	pub kmu: Option<bool>, 
	#[yaserde(rename = "KmuZuPruefen", prefix = "nsi2", default)]
	pub kmu_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "EinkommenAusSelbstaendigerArbeit", prefix = "nsi2", default)]
	pub einkommen_aus_selbstaendiger_arbeit: Option<bool>, 
	#[yaserde(rename = "EinkommenAusSelbstaendigerArbeitZuPruefen", prefix = "nsi2", default)]
	pub einkommen_aus_selbstaendiger_arbeit_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitWindParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitWindParameter {
	#[yaserde(flatten, default)]
	pub set_mastrqs_korrektur_vorschlag_stromerzeugungseinheit_parameter_basis: SetMastrqsKorrekturVorschlagStromerzeugungseinheitParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "nameWindpark", prefix = "nsi2", default)]
	pub name_windpark: Option<String>, 
	#[yaserde(rename = "nameWindparkZuPruefen", prefix = "nsi2", default)]
	pub name_windpark_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "lage", prefix = "nsi2", default)]
	pub lage: Option<WindLageEnum>, 
	#[yaserde(rename = "lageZuPruefen", prefix = "nsi2", default)]
	pub lage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "seelage", prefix = "nsi2", default)]
	pub seelage: Option<SeelageEnum>, 
	#[yaserde(rename = "seelageZuPruefen", prefix = "nsi2", default)]
	pub seelage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "clusterOstsee", prefix = "nsi2", default)]
	pub cluster_ostsee: Option<ClusterOstseeEnum>, 
	#[yaserde(rename = "clusterOstseeZuPruefen", prefix = "nsi2", default)]
	pub cluster_ostsee_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "clusterNordsee", prefix = "nsi2", default)]
	pub cluster_nordsee: Option<ClusterNordseeEnum>, 
	#[yaserde(rename = "clusterNordseeZuPruefen", prefix = "nsi2", default)]
	pub cluster_nordsee_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "technologie", prefix = "nsi2", default)]
	pub technologie: Option<WindanlageTechnologieEnum>, 
	#[yaserde(rename = "technologieZuPruefen", prefix = "nsi2", default)]
	pub technologie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "herstellerId", prefix = "nsi2", default)]
	pub hersteller_id: Option<KatalogwertId>, 
	#[yaserde(rename = "herstellerIdZuPruefen", prefix = "nsi2", default)]
	pub hersteller_id_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "typenbezeichnung", prefix = "nsi2", default)]
	pub typenbezeichnung: Option<String>, 
	#[yaserde(rename = "typenbezeichnungZuPruefen", prefix = "nsi2", default)]
	pub typenbezeichnung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nabenhoehe", prefix = "nsi2", default)]
	pub nabenhoehe: Option<f64>, 
	#[yaserde(rename = "nabenhoeheZuPruefen", prefix = "nsi2", default)]
	pub nabenhoehe_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "rotordurchmesser", prefix = "nsi2", default)]
	pub rotordurchmesser: Option<f64>, 
	#[yaserde(rename = "rotordurchmesserZuPruefen", prefix = "nsi2", default)]
	pub rotordurchmesser_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Rotorblattenteisungssystem", prefix = "nsi2", default)]
	pub rotorblattenteisungssystem: Option<bool>, 
	#[yaserde(rename = "RotorblattenteisungssystemZuPruefen", prefix = "nsi2", default)]
	pub rotorblattenteisungssystem_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "hoehe", prefix = "nsi2", default)]
	pub hoehe: Option<f64>, 
	#[yaserde(rename = "hoeheZuPruefen", prefix = "nsi2", default)]
	pub hoehe_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "auflageAbschaltungLeistungsbegrenzung", prefix = "nsi2", default)]
	pub auflage_abschaltung_leistungsbegrenzung: Option<bool>, 
	#[yaserde(rename = "auflageAbschaltungLeistungsbegrenzungZuPruefen", prefix = "nsi2", default)]
	pub auflage_abschaltung_leistungsbegrenzung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSchallimmissionsschutzNachts", prefix = "nsi2", default)]
	pub auflagen_abschaltung_schallimmissionsschutz_nachts: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSchallimmissionsschutzNachtsZuPruefen", prefix = "nsi2", default)]
	pub auflagen_abschaltung_schallimmissionsschutz_nachts_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSchallimmissionsschutzTagsueber", prefix = "nsi2", default)]
	pub auflagen_abschaltung_schallimmissionsschutz_tagsueber: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSchallimmissionsschutzTagsueberZuPruefen", prefix = "nsi2", default)]
	pub auflagen_abschaltung_schallimmissionsschutz_tagsueber_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSchattenwurf", prefix = "nsi2", default)]
	pub auflagen_abschaltung_schattenwurf: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSchattenwurfZuPruefen", prefix = "nsi2", default)]
	pub auflagen_abschaltung_schattenwurf_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungTierschutz", prefix = "nsi2", default)]
	pub auflagen_abschaltung_tierschutz: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungTierschutzZuPruefen", prefix = "nsi2", default)]
	pub auflagen_abschaltung_tierschutz_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungEiswurf", prefix = "nsi2", default)]
	pub auflagen_abschaltung_eiswurf: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungEiswurfZuPruefen", prefix = "nsi2", default)]
	pub auflagen_abschaltung_eiswurf_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSonstige", prefix = "nsi2", default)]
	pub auflagen_abschaltung_sonstige: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSonstigeZuPruefen", prefix = "nsi2", default)]
	pub auflagen_abschaltung_sonstige_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "wassertiefe", prefix = "nsi2", default)]
	pub wassertiefe: Option<f64>, 
	#[yaserde(rename = "wassertiefeZuPruefen", prefix = "nsi2", default)]
	pub wassertiefe_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kuestenentfernung", prefix = "nsi2", default)]
	pub kuestenentfernung: Option<f64>, 
	#[yaserde(rename = "kuestenentfernungZuPruefen", prefix = "nsi2", default)]
	pub kuestenentfernung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegPrototypAnlage", prefix = "nsi2", default)]
	pub eeg_prototyp_anlage: Option<bool>, 
	#[yaserde(rename = "eegPrototypAnlageZuPruefen", prefix = "nsi2", default)]
	pub eeg_prototyp_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegPilotAnlage", prefix = "nsi2", default)]
	pub eeg_pilot_anlage: Option<bool>, 
	#[yaserde(rename = "eegPilotAnlageZuPruefen", prefix = "nsi2", default)]
	pub eeg_pilot_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInstallierteLeistung", prefix = "nsi2", default)]
	pub eeg_installierte_leistung: Option<f64>, 
	#[yaserde(rename = "eegInstallierteLeistungZuPruefen", prefix = "nsi2", default)]
	pub eeg_installierte_leistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInbetriebnahmedatum", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "eegInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegVerhaeltnisErtragsschaetzungReferenzertrag", prefix = "nsi2", default)]
	pub eeg_verhaeltnis_ertragsschaetzung_referenzertrag: Option<ErweitertesDecimal>, 
	#[yaserde(rename = "eegVerhaeltnisReferenzertragErtragZuPruefen", prefix = "nsi2", default)]
	pub eeg_verhaeltnis_referenzertrag_ertrag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegVerhaeltnisReferenzertragErtrag5Jahre", prefix = "nsi2", default)]
	pub eeg_verhaeltnis_referenzertrag_ertrag_5_jahre: Option<ErweitertesDecimal>, 
	#[yaserde(rename = "eegVerhaeltnisReferenzertragErtrag5JahreZuPruefen", prefix = "nsi2", default)]
	pub eeg_verhaeltnis_referenzertrag_ertrag_5_jahre_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegVerhaeltnisReferenzertragErtrag10Jahre", prefix = "nsi2", default)]
	pub eeg_verhaeltnis_referenzertrag_ertrag_10_jahre: Option<ErweitertesDecimal>, 
	#[yaserde(rename = "eegVerhaeltnisReferenzertragErtrag10JahreZuPruefen", prefix = "nsi2", default)]
	pub eeg_verhaeltnis_referenzertrag_ertrag_10_jahre_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegVerhaeltnisReferenzertragErtrag15Jahre", prefix = "nsi2", default)]
	pub eeg_verhaeltnis_referenzertrag_ertrag_15_jahre: Option<ErweitertesDecimal>, 
	#[yaserde(rename = "eegVerhaeltnisReferenzertragErtrag15JahreZuPruefen", prefix = "nsi2", default)]
	pub eeg_verhaeltnis_referenzertrag_ertrag_15_jahre_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAusschreibungZuschlag", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag: Option<bool>, 
	#[yaserde(rename = "eegAusschreibungZuschlagZuPruefen", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegZuschlagsnummer", prefix = "nsi2", default)]
	pub eeg_zuschlagsnummer: Option<String>, 
	#[yaserde(rename = "eegZuschlagsnummerZuPruefen", prefix = "nsi2", default)]
	pub eeg_zuschlagsnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Buergerenergie", prefix = "nsi2", default)]
	pub buergerenergie: Option<bool>, 
	#[yaserde(rename = "BuergerenergieZuPruefen", prefix = "nsi2", default)]
	pub buergerenergie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Nachtkennzeichnung", prefix = "nsi2", default)]
	pub nachtkennzeichnung: Option<bool>, 
	#[yaserde(rename = "NachtkennzeichnungZuPruefen", prefix = "nsi2", default)]
	pub nachtkennzeichnung_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitSolarParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitSolarParameter {
	#[yaserde(flatten, default)]
	pub set_mastrqs_korrektur_vorschlag_einheit_parameter_basis: SetMastrqsKorrekturVorschlagEinheitParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "nameStromerzeugungseinheit", prefix = "nsi2", default)]
	pub name_stromerzeugungseinheit: Option<String>, 
	#[yaserde(rename = "nameStromerzeugungseinheitZuPruefen", prefix = "nsi2", default)]
	pub name_stromerzeugungseinheit_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einsatzverantwortlicher", prefix = "nsi2", default)]
	pub einsatzverantwortlicher: Option<String>, 
	#[yaserde(rename = "einsatzverantwortlicherZuPruefen", prefix = "nsi2", default)]
	pub einsatzverantwortlicher_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "weic", prefix = "nsi2", default)]
	pub weic: Option<ErweiterterString>, 
	#[yaserde(rename = "weicZuPruefen", prefix = "nsi2", default)]
	pub weic_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "weicDisplayName", prefix = "nsi2", default)]
	pub weic_display_name: Option<String>, 
	#[yaserde(rename = "weicDisplayNameZuPruefen", prefix = "nsi2", default)]
	pub weic_display_name_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kraftwerksnummer", prefix = "nsi2", default)]
	pub kraftwerksnummer: Option<ErweiterterString>, 
	#[yaserde(rename = "kraftwerksnummerZuPruefen", prefix = "nsi2", default)]
	pub kraftwerksnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "bruttoleistung", prefix = "nsi2", default)]
	pub bruttoleistung: Option<f64>, 
	#[yaserde(rename = "bruttoleistungZuPruefen", prefix = "nsi2", default)]
	pub bruttoleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "anschlussAnHoechstOderHochSpannung", prefix = "nsi2", default)]
	pub anschluss_an_hoechst_oder_hoch_spannung: Option<bool>, 
	#[yaserde(rename = "anschlussAnHoechstOderHochSpannungZuPruefen", prefix = "nsi2", default)]
	pub anschluss_an_hoechst_oder_hoch_spannung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "praequalifiziertFuerRegelenergie", prefix = "nsi2", default)]
	pub praequalifiziert_fuer_regelenergie: Option<bool>, 
	#[yaserde(rename = "praequalifiziertFuerRegelenergieZuPruefen", prefix = "nsi2", default)]
	pub praequalifiziert_fuer_regelenergie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "schwarzstartfaehigkeit", prefix = "nsi2", default)]
	pub schwarzstartfaehigkeit: Option<bool>, 
	#[yaserde(rename = "schwarzstartfaehigkeitZuPruefen", prefix = "nsi2", default)]
	pub schwarzstartfaehigkeit_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "inselbetriebsfaehigkeit", prefix = "nsi2", default)]
	pub inselbetriebsfaehigkeit: Option<bool>, 
	#[yaserde(rename = "inselbetriebsfaehigkeitZuPruefen", prefix = "nsi2", default)]
	pub inselbetriebsfaehigkeit_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitNb", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_nb: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitNbZuPruefen", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_nb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitDv", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_dv: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitDvZuPruefen", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_dv_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einspeisungsart", prefix = "nsi2", default)]
	pub einspeisungsart: Option<EinspeisungsartEnum>, 
	#[yaserde(rename = "einspeisungsartZuPruefen", prefix = "nsi2", default)]
	pub einspeisungsart_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "zugeordneteWirkleistungWechselrichter", prefix = "nsi2", default)]
	pub zugeordnete_wirkleistung_wechselrichter: Option<f64>, 
	#[yaserde(rename = "zugeordneteWirkleistungWechselrichterZuPruefen", prefix = "nsi2", default)]
	pub zugeordnete_wirkleistung_wechselrichter_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "anzahlModule", prefix = "nsi2", default)]
	pub anzahl_module: Option<i32>, 
	#[yaserde(rename = "anzahlModuleZuPruefen", prefix = "nsi2", default)]
	pub anzahl_module_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "lage", prefix = "nsi2", default)]
	pub lage: Option<SolarLageEnum>, 
	#[yaserde(rename = "lageZuPruefen", prefix = "nsi2", default)]
	pub lage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "leistungsbegrenzung", prefix = "nsi2", default)]
	pub leistungsbegrenzung: Option<SolarLeistungsbegrenzungEnum>, 
	#[yaserde(rename = "leistungsbegrenzungZuPruefen", prefix = "nsi2", default)]
	pub leistungsbegrenzung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einheitlicheAusrichtungUndNeigungswinkel", prefix = "nsi2", default)]
	pub einheitliche_ausrichtung_und_neigungswinkel: Option<bool>, 
	#[yaserde(rename = "einheitlicheAusrichtungUndNeigungswinkelZuPruefen", prefix = "nsi2", default)]
	pub einheitliche_ausrichtung_und_neigungswinkel_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "hauptausrichtung", prefix = "nsi2", default)]
	pub hauptausrichtung: Option<AnlagenartSolarAusrichtungEnum>, 
	#[yaserde(rename = "hauptausrichtungZuPruefen", prefix = "nsi2", default)]
	pub hauptausrichtung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "hauptausrichtungNeigungswinkel", prefix = "nsi2", default)]
	pub hauptausrichtung_neigungswinkel: Option<AnlagenartSolarNeigungswinkelEnum>, 
	#[yaserde(rename = "hauptausrichtungNeigungswinkelZuPruefen", prefix = "nsi2", default)]
	pub hauptausrichtung_neigungswinkel_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nebenausrichtung", prefix = "nsi2", default)]
	pub nebenausrichtung: Option<AnlagenartSolarAusrichtungEnum>, 
	#[yaserde(rename = "nebenausrichtungZuPruefen", prefix = "nsi2", default)]
	pub nebenausrichtung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nebenausrichtungNeigungswinkel", prefix = "nsi2", default)]
	pub nebenausrichtung_neigungswinkel: Option<AnlagenartSolarNeigungswinkelEnum>, 
	#[yaserde(rename = "nebenausrichtungNeigungswinkelZuPruefen", prefix = "nsi2", default)]
	pub nebenausrichtung_neigungswinkel_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "inAnspruchGenommeneFlaeche", prefix = "nsi2", default)]
	pub in_anspruch_genommene_flaeche: Option<f64>, 
	#[yaserde(rename = "inAnspruchGenommeneFlaecheZuPruefen", prefix = "nsi2", default)]
	pub in_anspruch_genommene_flaeche_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "artDerFlaeche", prefix = "nsi2", default)]
	pub art_der_flaeche: Vec<SolarFlaechenartEnum>, 
	#[yaserde(rename = "artDerFlaecheZuPruefen", prefix = "nsi2", default)]
	pub art_der_flaeche_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "inAnspruchGenommeneLandwirtschaftlichGenutzteFlaeche", prefix = "nsi2", default)]
	pub in_anspruch_genommene_landwirtschaftlich_genutzte_flaeche: Option<f64>, 
	#[yaserde(rename = "inAnspruchGenommeneLandwirtschaftlichGenutzteFlaecheZuPruefen", prefix = "nsi2", default)]
	pub in_anspruch_genommene_landwirtschaftlich_genutzte_flaeche_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nutzungsbereich", prefix = "nsi2", default)]
	pub nutzungsbereich: Option<NutzungsbereichEnum>, 
	#[yaserde(rename = "nutzungsbereichZuPruefen", prefix = "nsi2", default)]
	pub nutzungsbereich_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInanspruchnahmeZahlungNachEeg", prefix = "nsi2", default)]
	pub eeg_inanspruchnahme_zahlung_nach_eeg: Option<bool>, 
	#[yaserde(rename = "eegInanspruchnahmeZahlungNachEegZuPruefen", prefix = "nsi2", default)]
	pub eeg_inanspruchnahme_zahlung_nach_eeg_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAnlagenkennzifferAnlagenregister", prefix = "nsi2", default)]
	pub eeg_anlagenkennziffer_anlagenregister: Option<ErweiterterString>, 
	#[yaserde(rename = "eegAnlagenkennzifferAnlagenregisterZuPruefen", prefix = "nsi2", default)]
	pub eeg_anlagenkennziffer_anlagenregister_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInbetriebnahmedatum", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "eegInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegRegistrierungsnummerPvMeldeportal", prefix = "nsi2", default)]
	pub eeg_registrierungsnummer_pv_meldeportal: Option<ErweiterterString>, 
	#[yaserde(rename = "eegRegistrierungsnummerPvMeldeportalZuPruefen", prefix = "nsi2", default)]
	pub eeg_registrierungsnummer_pv_meldeportal_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegMieterstromZugeordnet", prefix = "nsi2", default)]
	pub eeg_mieterstrom_zugeordnet: Option<bool>, 
	#[yaserde(rename = "eegMieterstromZugeordnetZuPruefen", prefix = "nsi2", default)]
	pub eeg_mieterstrom_zugeordnet_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegMieterstromRegistrierungsdatum", prefix = "nsi2", default)]
	pub eeg_mieterstrom_registrierungsdatum: Option<String>, 
	#[yaserde(rename = "eegMieterstromRegistrierungsdatumZuPruefen", prefix = "nsi2", default)]
	pub eeg_mieterstrom_registrierungsdatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegMieterstromErsteZuordnungZuschlag", prefix = "nsi2", default)]
	pub eeg_mieterstrom_erste_zuordnung_zuschlag: Option<String>, 
	#[yaserde(rename = "eegMieterstromErsteZuordnungZuschlagZuPruefen", prefix = "nsi2", default)]
	pub eeg_mieterstrom_erste_zuordnung_zuschlag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAusschreibungZuschlag", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag: Option<bool>, 
	#[yaserde(rename = "eegAusschreibungZuschlagZuPruefen", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegZuschlagsnummer", prefix = "nsi2", default)]
	pub eeg_zuschlagsnummer: Option<String>, 
	#[yaserde(rename = "eegZuschlagsnummerZuPruefen", prefix = "nsi2", default)]
	pub eeg_zuschlagsnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegZugeordneteGebotsmenge", prefix = "nsi2", default)]
	pub eeg_zugeordnete_gebotsmenge: Option<f64>, 
	#[yaserde(rename = "eegZugeordneteGebotsmengeZuPruefen", prefix = "nsi2", default)]
	pub eeg_zugeordnete_gebotsmenge_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Buergerenergie", prefix = "nsi2", default)]
	pub buergerenergie: Option<bool>, 
	#[yaserde(rename = "BuergerenergieZuPruefen", prefix = "nsi2", default)]
	pub buergerenergie_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitBiomasseParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitBiomasseParameter {
	#[yaserde(flatten, default)]
	pub set_mastrqs_korrektur_vorschlag_stromerzeugungseinheit_parameter_basis: SetMastrqsKorrekturVorschlagStromerzeugungseinheitParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "DatumBeginnVoruebergehendeStilllegung", prefix = "nsi2", default)]
	pub datum_beginn_voruebergehende_stilllegung: Option<String>, 
	#[yaserde(rename = "DatumBeginnVoruebergehendeStilllegungZuPruefen", prefix = "nsi2", default)]
	pub datum_beginn_voruebergehende_stilllegung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumWiederaufnahmeBetrieb", prefix = "nsi2", default)]
	pub datum_wiederaufnahme_betrieb: Option<String>, 
	#[yaserde(rename = "DatumWiederaufnahmeBetriebZuPruefen", prefix = "nsi2", default)]
	pub datum_wiederaufnahme_betrieb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "hauptbrennstoff", prefix = "nsi2", default)]
	pub hauptbrennstoff: Option<BiomasseBrennstoffEnum>, 
	#[yaserde(rename = "hauptbrennstoffZuPruefen", prefix = "nsi2", default)]
	pub hauptbrennstoff_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "technologie", prefix = "nsi2", default)]
	pub technologie: Option<TechnologieVerbrennungsanlageEnum>, 
	#[yaserde(rename = "technologieZuPruefen", prefix = "nsi2", default)]
	pub technologie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "BestandteilEEGAnlage", prefix = "nsi2", default)]
	pub bestandteil_eeg_anlage: Option<bool>, 
	#[yaserde(rename = "BestandteilEEGAnlageZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_eeg_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: Option<EegMastrNummerId>, 
	#[yaserde(rename = "eegMastrNummerZuPruefen", prefix = "nsi2", default)]
	pub eeg_mastr_nummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAnlagenkennzifferAnlagenregister", prefix = "nsi2", default)]
	pub eeg_anlagenkennziffer_anlagenregister: Option<ErweiterterString>, 
	#[yaserde(rename = "eegAnlagenkennzifferAnlagenregisterZuPruefen", prefix = "nsi2", default)]
	pub eeg_anlagenkennziffer_anlagenregister_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInstallierteLeistung", prefix = "nsi2", default)]
	pub eeg_installierte_leistung: Option<f64>, 
	#[yaserde(rename = "eegInstallierteLeistungZuPruefen", prefix = "nsi2", default)]
	pub eeg_installierte_leistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInbetriebnahmedatum", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "eegInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAusschliesslicheVerwendungBiomasse", prefix = "nsi2", default)]
	pub eeg_ausschliessliche_verwendung_biomasse: Option<bool>, 
	#[yaserde(rename = "eegAusschliesslicheVerwendungBiomasseZuPruefen", prefix = "nsi2", default)]
	pub eeg_ausschliessliche_verwendung_biomasse_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAusschreibungZuschlag", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag: Option<bool>, 
	#[yaserde(rename = "eegAusschreibungZuschlagZuPruefen", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegBiogasZuschlagsnummer", prefix = "nsi2", default)]
	pub eeg_biogas_zuschlagsnummer: Option<String>, 
	#[yaserde(rename = "eegBiogasZuschlagsnummerZuPruefen", prefix = "nsi2", default)]
	pub eeg_biogas_zuschlagsnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegBiogasInanspruchnahmeFlexiPraemie", prefix = "nsi2", default)]
	pub eeg_biogas_inanspruchnahme_flexi_praemie: Option<bool>, 
	#[yaserde(rename = "eegBiogasInanspruchnahmeFlexiPraemieZuPruefen", prefix = "nsi2", default)]
	pub eeg_biogas_inanspruchnahme_flexi_praemie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegBiogasDatumInanspruchnahmeFlexiPraemie", prefix = "nsi2", default)]
	pub eeg_biogas_datum_inanspruchnahme_flexi_praemie: Option<String>, 
	#[yaserde(rename = "eegBiogasDatumInanspruchnahmeFlexiPraemieZuPruefen", prefix = "nsi2", default)]
	pub eeg_biogas_datum_inanspruchnahme_flexi_praemie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegBiogasLeistungserhoehung", prefix = "nsi2", default)]
	pub eeg_biogas_leistungserhoehung: Option<bool>, 
	#[yaserde(rename = "eegBiogasLeistungserhoehungZuPruefen", prefix = "nsi2", default)]
	pub eeg_biogas_leistungserhoehung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegBiogasDatumLeistungserhoehung", prefix = "nsi2", default)]
	pub eeg_biogas_datum_leistungserhoehung: Option<String>, 
	#[yaserde(rename = "eegBiogasDatumLeistungserhoehungZuPruefen", prefix = "nsi2", default)]
	pub eeg_biogas_datum_leistungserhoehung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegBiogasUmfangLeistungserhoehung", prefix = "nsi2", default)]
	pub eeg_biogas_umfang_leistungserhoehung: Option<f64>, 
	#[yaserde(rename = "eegBiogasUmfangLeistungserhoehungZuPruefen", prefix = "nsi2", default)]
	pub eeg_biogas_umfang_leistungserhoehung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegBiogasGaserzeugungskapazitaet", prefix = "nsi2", default)]
	pub eeg_biogas_gaserzeugungskapazitaet: Option<ErweitertesDecimal>, 
	#[yaserde(rename = "eegBiogasGaserzeugungskapazitaetZuPruefen", prefix = "nsi2", default)]
	pub eeg_biogas_gaserzeugungskapazitaet_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegHoechstbemessungsleistung", prefix = "nsi2", default)]
	pub eeg_hoechstbemessungsleistung: Option<f64>, 
	#[yaserde(rename = "eegHoechstbemessungsleistungZuPruefen", prefix = "nsi2", default)]
	pub eeg_hoechstbemessungsleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegBiomethanErstmaligerEinsatz", prefix = "nsi2", default)]
	pub eeg_biomethan_erstmaliger_einsatz: Option<ErweitertesDate>, 
	#[yaserde(rename = "eegBiomethanErstmaligerEinsatzZuPruefen", prefix = "nsi2", default)]
	pub eeg_biomethan_erstmaliger_einsatz_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "BestandteilKWKAnlage", prefix = "nsi2", default)]
	pub bestandteil_kwk_anlage: Option<bool>, 
	#[yaserde(rename = "BestandteilKWKAnlageZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_kwk_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkMastrNummer", prefix = "nsi2", default)]
	pub kwk_mastr_nummer: Option<KwkMastrNummerId>, 
	#[yaserde(rename = "kwkMastrNummerZuPruefen", prefix = "nsi2", default)]
	pub kwk_mastr_nummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkAusschreibungZuschlag", prefix = "nsi2", default)]
	pub kwk_ausschreibung_zuschlag: Option<bool>, 
	#[yaserde(rename = "kwkAusschreibungZuschlagZuPruefen", prefix = "nsi2", default)]
	pub kwk_ausschreibung_zuschlag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkZuschlagnummer", prefix = "nsi2", default)]
	pub kwk_zuschlagnummer: Option<String>, 
	#[yaserde(rename = "kwkZuschlagnummerZuPruefen", prefix = "nsi2", default)]
	pub kwk_zuschlagnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkInbetriebnahmedatum", prefix = "nsi2", default)]
	pub kwk_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "kwkInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub kwk_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkThermischeNutzleistung", prefix = "nsi2", default)]
	pub kwk_thermische_nutzleistung: Option<f64>, 
	#[yaserde(rename = "kwkThermischeNutzleistungZuPruefen", prefix = "nsi2", default)]
	pub kwk_thermische_nutzleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkElektrischeKwkLeistung", prefix = "nsi2", default)]
	pub kwk_elektrische_kwk_leistung: Option<f64>, 
	#[yaserde(rename = "kwkElektrischeKwkLeistungZuPruefen", prefix = "nsi2", default)]
	pub kwk_elektrische_kwk_leistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ReserveartNachDemEnWG", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg: Option<ReserveartEnum>, 
	#[yaserde(rename = "ReserveartNachDemEnWGZuPruefen", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserve", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve: Option<String>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserveZuPruefen", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitWasserParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitWasserParameter {
	#[yaserde(flatten, default)]
	pub set_mastrqs_korrektur_vorschlag_stromerzeugungseinheit_parameter_basis: SetMastrqsKorrekturVorschlagStromerzeugungseinheitParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "nameKraftwerk", prefix = "nsi2", default)]
	pub name_kraftwerk: Option<String>, 
	#[yaserde(rename = "nameKraftwerkZuPruefen", prefix = "nsi2", default)]
	pub name_kraftwerk_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumWiederaufnahmeBetrieb", prefix = "nsi2", default)]
	pub datum_wiederaufnahme_betrieb: Option<String>, 
	#[yaserde(rename = "DatumWiederaufnahmeBetriebZuPruefen", prefix = "nsi2", default)]
	pub datum_wiederaufnahme_betrieb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "artDerWasserkraftanlage", prefix = "nsi2", default)]
	pub art_der_wasserkraftanlage: Option<ArtDerWasserkraftanlageEnum>, 
	#[yaserde(rename = "artDerWasserkraftanlageZuPruefen", prefix = "nsi2", default)]
	pub art_der_wasserkraftanlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "minderungStromerzeugung", prefix = "nsi2", default)]
	pub minderung_stromerzeugung: Option<bool>, 
	#[yaserde(rename = "minderungStromerzeugungZuPruefen", prefix = "nsi2", default)]
	pub minderung_stromerzeugung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "bestandteilGrenzkraftwerk", prefix = "nsi2", default)]
	pub bestandteil_grenzkraftwerk: Option<bool>, 
	#[yaserde(rename = "bestandteilGrenzkraftwerkZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_grenzkraftwerk_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nettonennleistungDeutschland", prefix = "nsi2", default)]
	pub nettonennleistung_deutschland: Option<f64>, 
	#[yaserde(rename = "nettonennleistungDeutschlandZuPruefen", prefix = "nsi2", default)]
	pub nettonennleistung_deutschland_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "artDesZuflusses", prefix = "nsi2", default)]
	pub art_des_zuflusses: Option<ZuflussartEnum>, 
	#[yaserde(rename = "artDesZuflussesZuPruefen", prefix = "nsi2", default)]
	pub art_des_zuflusses_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "BestandteilEEGAnlage", prefix = "nsi2", default)]
	pub bestandteil_eeg_anlage: Option<bool>, 
	#[yaserde(rename = "BestandteilEEGAnlageZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_eeg_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: Option<EegMastrNummerId>, 
	#[yaserde(rename = "eegMastrNummerZuPruefen", prefix = "nsi2", default)]
	pub eeg_mastr_nummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAnlagenkennzifferAnlagenregister", prefix = "nsi2", default)]
	pub eeg_anlagenkennziffer_anlagenregister: Option<ErweiterterString>, 
	#[yaserde(rename = "eegAnlagenkennzifferAnlagenregisterZuPruefen", prefix = "nsi2", default)]
	pub eeg_anlagenkennziffer_anlagenregister_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInstallierteLeistung", prefix = "nsi2", default)]
	pub eeg_installierte_leistung: Option<f64>, 
	#[yaserde(rename = "eegInstallierteLeistungZuPruefen", prefix = "nsi2", default)]
	pub eeg_installierte_leistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInbetriebnahmedatum", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "eegInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ReserveartNachDemEnWG", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg: Option<ReserveartEnum>, 
	#[yaserde(rename = "ReserveartNachDemEnWGZuPruefen", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserve", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve: Option<String>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserveZuPruefen", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungParameter {
	#[yaserde(flatten, default)]
	pub set_mastrqs_korrektur_vorschlag_stromerzeugungseinheit_parameter_basis: SetMastrqsKorrekturVorschlagStromerzeugungseinheitParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "technologie", prefix = "nsi2", default)]
	pub technologie: Option<TechnologieVerbrennungsanlageEnum>, 
	#[yaserde(rename = "technologieZuPruefen", prefix = "nsi2", default)]
	pub technologie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "energietraeger", prefix = "nsi2", default)]
	pub energietraeger: Option<EnergietraegerEnum>, 
	#[yaserde(rename = "energietraegerZuPruefen", prefix = "nsi2", default)]
	pub energietraeger_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "BestandteilEEGAnlage", prefix = "nsi2", default)]
	pub bestandteil_eeg_anlage: Option<bool>, 
	#[yaserde(rename = "BestandteilEEGAnlageZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_eeg_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: Option<EegMastrNummerId>, 
	#[yaserde(rename = "eegMastrNummerZuPruefen", prefix = "nsi2", default)]
	pub eeg_mastr_nummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAnlagenkennzifferAnlagenregister", prefix = "nsi2", default)]
	pub eeg_anlagenkennziffer_anlagenregister: Option<ErweiterterString>, 
	#[yaserde(rename = "eegAnlagenkennzifferAnlagenregisterZuPruefen", prefix = "nsi2", default)]
	pub eeg_anlagenkennziffer_anlagenregister_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInstallierteLeistung", prefix = "nsi2", default)]
	pub eeg_installierte_leistung: Option<f64>, 
	#[yaserde(rename = "eegInstallierteLeistungZuPruefen", prefix = "nsi2", default)]
	pub eeg_installierte_leistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInbetriebnahmedatum", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "eegInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "BestandteilKWKAnlage", prefix = "nsi2", default)]
	pub bestandteil_kwk_anlage: Option<bool>, 
	#[yaserde(rename = "BestandteilKWKAnlageZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_kwk_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkMastrNummer", prefix = "nsi2", default)]
	pub kwk_mastr_nummer: Option<KwkMastrNummerId>, 
	#[yaserde(rename = "kwkMastrNummerZuPruefen", prefix = "nsi2", default)]
	pub kwk_mastr_nummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkAusschreibungZuschlag", prefix = "nsi2", default)]
	pub kwk_ausschreibung_zuschlag: Option<bool>, 
	#[yaserde(rename = "kwkAusschreibungZuschlagZuPruefen", prefix = "nsi2", default)]
	pub kwk_ausschreibung_zuschlag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkZuschlagnummer", prefix = "nsi2", default)]
	pub kwk_zuschlagnummer: Option<String>, 
	#[yaserde(rename = "kwkZuschlagnummerZuPruefen", prefix = "nsi2", default)]
	pub kwk_zuschlagnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkInbetriebnahmedatum", prefix = "nsi2", default)]
	pub kwk_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "kwkInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub kwk_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkThermischeNutzleistung", prefix = "nsi2", default)]
	pub kwk_thermische_nutzleistung: Option<f64>, 
	#[yaserde(rename = "kwkThermischeNutzleistungZuPruefen", prefix = "nsi2", default)]
	pub kwk_thermische_nutzleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkElektrischeKwkLeistung", prefix = "nsi2", default)]
	pub kwk_elektrische_kwk_leistung: Option<f64>, 
	#[yaserde(rename = "kwkElektrischeKwkLeistungZuPruefen", prefix = "nsi2", default)]
	pub kwk_elektrische_kwk_leistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ReserveartNachDemEnWG", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg: Option<ReserveartEnum>, 
	#[yaserde(rename = "ReserveartNachDemEnWGZuPruefen", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserve", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve: Option<String>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserveZuPruefen", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitVerbrennungParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitVerbrennungParameter {
	#[yaserde(flatten, default)]
	pub set_mastrqs_korrektur_vorschlag_stromerzeugungseinheit_parameter_basis: SetMastrqsKorrekturVorschlagStromerzeugungseinheitParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "nameKraftwerk", prefix = "nsi2", default)]
	pub name_kraftwerk: Option<String>, 
	#[yaserde(rename = "nameKraftwerkZuPruefen", prefix = "nsi2", default)]
	pub name_kraftwerk_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nameKraftwerksblock", prefix = "nsi2", default)]
	pub name_kraftwerksblock: Option<String>, 
	#[yaserde(rename = "nameKraftwerksblockZuPruefen", prefix = "nsi2", default)]
	pub name_kraftwerksblock_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "datumBaubeginn", prefix = "nsi2", default)]
	pub datum_baubeginn: Option<String>, 
	#[yaserde(rename = "datumBaubeginnZuPruefen", prefix = "nsi2", default)]
	pub datum_baubeginn_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "steigerungNettonennleistungKombibetrieb", prefix = "nsi2", default)]
	pub steigerung_nettonennleistung_kombibetrieb: Option<f64>, 
	#[yaserde(rename = "steigerungNettonennleistungKombibetriebZuPruefen", prefix = "nsi2", default)]
	pub steigerung_nettonennleistung_kombibetrieb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "anlageIstImKombibetrieb", prefix = "nsi2", default)]
	pub anlage_ist_im_kombibetrieb: Option<bool>, 
	#[yaserde(rename = "anlageIstImKombibetriebZuPruefen", prefix = "nsi2", default)]
	pub anlage_ist_im_kombibetrieb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "mastrNummernKombibetrieb", prefix = "nsi2", default)]
	pub mastr_nummern_kombibetrieb: Option<String>, 
	#[yaserde(rename = "mastrNummernKombibetriebZuPruefen", prefix = "nsi2", default)]
	pub mastr_nummern_kombibetrieb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "netzreserveAbDatum", prefix = "nsi2", default)]
	pub netzreserve_ab_datum: Option<String>, 
	#[yaserde(rename = "netzreserveAbDatumZuPruefen", prefix = "nsi2", default)]
	pub netzreserve_ab_datum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "sicherheitsbereitschaftAbDatum", prefix = "nsi2", default)]
	pub sicherheitsbereitschaft_ab_datum: Option<String>, 
	#[yaserde(rename = "sicherheitsbereitschaftAbDatumZuPruefen", prefix = "nsi2", default)]
	pub sicherheitsbereitschaft_ab_datum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "energietraeger", prefix = "nsi2", default)]
	pub energietraeger: Option<EnergietraegerEnum>, 
	#[yaserde(rename = "energietraegerZuPruefen", prefix = "nsi2", default)]
	pub energietraeger_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "hauptbrennstoff", prefix = "nsi2", default)]
	pub hauptbrennstoff: Option<VerbrennungBrennstoffEnum>, 
	#[yaserde(rename = "hauptbrennstoffZuPruefen", prefix = "nsi2", default)]
	pub hauptbrennstoff_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "weitererHauptbrennstoff", prefix = "nsi2", default)]
	pub weiterer_hauptbrennstoff: Option<ErweiterterWeitereBrennstoffe>, 
	#[yaserde(rename = "weitererHauptbrennstoffZuPruefen", prefix = "nsi2", default)]
	pub weiterer_hauptbrennstoff_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "weitereBrennstoffe", prefix = "nsi2", default)]
	pub weitere_brennstoffe: Option<ErweiterteWeitereBrennstoffe>, 
	#[yaserde(rename = "weitereBrennstoffeZuPruefen", prefix = "nsi2", default)]
	pub weitere_brennstoffe_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "verknuepfteErzeugungseinheiten", prefix = "nsi2", default)]
	pub verknuepfte_erzeugungseinheiten: Vec<VerknuepfteEinheit>, 
	#[yaserde(rename = "verknuepfteErzeugungseinheitenZuPruefen", prefix = "nsi2", default)]
	pub verknuepfte_erzeugungseinheiten_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "bestandteilGrenzkraftwerk", prefix = "nsi2", default)]
	pub bestandteil_grenzkraftwerk: Option<bool>, 
	#[yaserde(rename = "bestandteilGrenzkraftwerkZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_grenzkraftwerk_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nettonennleistungDeutschland", prefix = "nsi2", default)]
	pub nettonennleistung_deutschland: Option<f64>, 
	#[yaserde(rename = "nettonennleistungDeutschlandZuPruefen", prefix = "nsi2", default)]
	pub nettonennleistung_deutschland_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "notstromaggregat", prefix = "nsi2", default)]
	pub notstromaggregat: Option<bool>, 
	#[yaserde(rename = "notstromaggregatZuPruefen", prefix = "nsi2", default)]
	pub notstromaggregat_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "technologie", prefix = "nsi2", default)]
	pub technologie: Option<TechnologieVerbrennungsanlageEnum>, 
	#[yaserde(rename = "technologieZuPruefen", prefix = "nsi2", default)]
	pub technologie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einsatzort", prefix = "nsi2", default)]
	pub einsatzort: Option<EinsatzortEnum>, 
	#[yaserde(rename = "einsatzortZuPruefen", prefix = "nsi2", default)]
	pub einsatzort_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "BestandteilKWKAnlage", prefix = "nsi2", default)]
	pub bestandteil_kwk_anlage: Option<bool>, 
	#[yaserde(rename = "BestandteilKWKAnlageZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_kwk_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkMastrNummer", prefix = "nsi2", default)]
	pub kwk_mastr_nummer: Option<KwkMastrNummerId>, 
	#[yaserde(rename = "kwkMastrNummerZuPruefen", prefix = "nsi2", default)]
	pub kwk_mastr_nummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkAusschreibungZuschlag", prefix = "nsi2", default)]
	pub kwk_ausschreibung_zuschlag: Option<bool>, 
	#[yaserde(rename = "kwkAusschreibungZuschlagZuPruefen", prefix = "nsi2", default)]
	pub kwk_ausschreibung_zuschlag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkZuschlagnummer", prefix = "nsi2", default)]
	pub kwk_zuschlagnummer: Option<String>, 
	#[yaserde(rename = "kwkZuschlagnummerZuPruefen", prefix = "nsi2", default)]
	pub kwk_zuschlagnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkInbetriebnahmedatum", prefix = "nsi2", default)]
	pub kwk_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "kwkInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub kwk_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkThermischeNutzleistung", prefix = "nsi2", default)]
	pub kwk_thermische_nutzleistung: Option<f64>, 
	#[yaserde(rename = "kwkThermischeNutzleistungZuPruefen", prefix = "nsi2", default)]
	pub kwk_thermische_nutzleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkElektrischeKwkLeistung", prefix = "nsi2", default)]
	pub kwk_elektrische_kwk_leistung: Option<f64>, 
	#[yaserde(rename = "kwkElektrischeKwkLeistungZuPruefen", prefix = "nsi2", default)]
	pub kwk_elektrische_kwk_leistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AusschliesslicheVerwendungImKombibetrieb", prefix = "nsi2", default)]
	pub ausschliessliche_verwendung_im_kombibetrieb: Option<bool>, 
	#[yaserde(rename = "AusschliesslicheVerwendungImKombibetriebZuPruefen", prefix = "nsi2", default)]
	pub ausschliessliche_verwendung_im_kombibetrieb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ReserveartNachDemEnWG", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg: Option<ReserveartEnum>, 
	#[yaserde(rename = "ReserveartNachDemEnWGZuPruefen", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserve", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve: Option<String>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserveZuPruefen", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitGasSpeicherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitGasSpeicherParameter {
	#[yaserde(flatten, default)]
	pub set_mastrqs_korrektur_vorschlag_einheit_parameter_basis: SetMastrqsKorrekturVorschlagEinheitParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "speichername", prefix = "nsi2", default)]
	pub speichername: Option<String>, 
	#[yaserde(rename = "speichernameZuPruefen", prefix = "nsi2", default)]
	pub speichername_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "speicherart", prefix = "nsi2", default)]
	pub speicherart: Option<GasSpeicherartEnum>, 
	#[yaserde(rename = "speicherartZuPruefen", prefix = "nsi2", default)]
	pub speicherart_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "maximalNutzbaresArbeitsgasvolumen", prefix = "nsi2", default)]
	pub maximal_nutzbares_arbeitsgasvolumen: Option<f64>, 
	#[yaserde(rename = "maximalNutzbaresArbeitsgasvolumenZuPruefen", prefix = "nsi2", default)]
	pub maximal_nutzbares_arbeitsgasvolumen_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "maximaleEinspeicherleistung", prefix = "nsi2", default)]
	pub maximale_einspeicherleistung: Option<f64>, 
	#[yaserde(rename = "maximaleEinspeicherleistungZuPruefen", prefix = "nsi2", default)]
	pub maximale_einspeicherleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "maximaleAusspeicherleistung", prefix = "nsi2", default)]
	pub maximale_ausspeicherleistung: Option<f64>, 
	#[yaserde(rename = "maximaleAusspeicherleistungZuPruefen", prefix = "nsi2", default)]
	pub maximale_ausspeicherleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "durchschnittlicherBrennwert", prefix = "nsi2", default)]
	pub durchschnittlicher_brennwert: Option<f64>, 
	#[yaserde(rename = "durchschnittlicherBrennwertZuPruefen", prefix = "nsi2", default)]
	pub durchschnittlicher_brennwert_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "speGasSpeicheranlage", prefix = "nsi2", default)]
	pub spe_gas_speicheranlage: Option<GasSpeicherMastrNummerId>, 
	#[yaserde(rename = "speGasSpeicheranlageZuPruefen", prefix = "nsi2", default)]
	pub spe_gas_speicheranlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "weic", prefix = "nsi2", default)]
	pub weic: Option<ErweiterterString>, 
	#[yaserde(rename = "weicZuPruefen", prefix = "nsi2", default)]
	pub weic_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitStromVerbraucherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitStromVerbraucherParameter {
	#[yaserde(flatten, default)]
	pub set_mastrqs_korrektur_vorschlag_einheit_parameter_basis: SetMastrqsKorrekturVorschlagEinheitParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "NameStromverbrauchseinheit", prefix = "nsi2", default)]
	pub name_stromverbrauchseinheit: Option<String>, 
	#[yaserde(rename = "NameStromverbrauchseinheitZuPruefen", prefix = "nsi2", default)]
	pub name_stromverbrauchseinheit_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einsatzverantwortlicher", prefix = "nsi2", default)]
	pub einsatzverantwortlicher: Option<String>, 
	#[yaserde(rename = "einsatzverantwortlicherZuPruefen", prefix = "nsi2", default)]
	pub einsatzverantwortlicher_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "anzahlStromverbrauchseinheitenGroesser50Mw", prefix = "nsi2", default)]
	pub anzahl_stromverbrauchseinheiten_groesser_50_mw: Option<i32>, 
	#[yaserde(rename = "anzahlStromverbrauchseinheitenGroesser50MwZuPruefen", prefix = "nsi2", default)]
	pub anzahl_stromverbrauchseinheiten_groesser_50_mw_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitGasErzeugerParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitGasErzeugerParameter {
	#[yaserde(flatten, default)]
	pub set_mastrqs_korrektur_vorschlag_einheit_parameter_basis: SetMastrqsKorrekturVorschlagEinheitParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "technologie", prefix = "nsi2", default)]
	pub technologie: Option<TechnologieGasErzeugungEnum>, 
	#[yaserde(rename = "technologieZuPruefen", prefix = "nsi2", default)]
	pub technologie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "erzeugungsleistung", prefix = "nsi2", default)]
	pub erzeugungsleistung: Option<f64>, 
	#[yaserde(rename = "erzeugungsleistungZuPruefen", prefix = "nsi2", default)]
	pub erzeugungsleistung_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitGasVerbraucherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitGasVerbraucherParameter {
	#[yaserde(flatten, default)]
	pub set_mastrqs_korrektur_vorschlag_einheit_parameter_basis: SetMastrqsKorrekturVorschlagEinheitParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "maximaleGasbezugsleistung", prefix = "nsi2", default)]
	pub maximale_gasbezugsleistung: Option<f64>, 
	#[yaserde(rename = "maximaleGasbezugsleistungZuPruefen", prefix = "nsi2", default)]
	pub maximale_gasbezugsleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einheitDientDerStromerzeugung", prefix = "nsi2", default)]
	pub einheit_dient_der_stromerzeugung: Option<bool>, 
	#[yaserde(rename = "einheitDientDerStromerzeugungZuPruefen", prefix = "nsi2", default)]
	pub einheit_dient_der_stromerzeugung_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitStromSpeicherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitStromSpeicherParameter {
	#[yaserde(flatten, default)]
	pub set_mastrqs_korrektur_vorschlag_einheit_parameter_basis: SetMastrqsKorrekturVorschlagEinheitParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "nameStromerzeugungseinheit", prefix = "nsi2", default)]
	pub name_stromerzeugungseinheit: Option<String>, 
	#[yaserde(rename = "nameStromerzeugungseinheitZuPruefen", prefix = "nsi2", default)]
	pub name_stromerzeugungseinheit_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "weic", prefix = "nsi2", default)]
	pub weic: Option<ErweiterterString>, 
	#[yaserde(rename = "weicZuPruefen", prefix = "nsi2", default)]
	pub weic_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "weicDisplayName", prefix = "nsi2", default)]
	pub weic_display_name: Option<String>, 
	#[yaserde(rename = "weicDisplayNameZuPruefen", prefix = "nsi2", default)]
	pub weic_display_name_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kraftwerksnummer", prefix = "nsi2", default)]
	pub kraftwerksnummer: Option<ErweiterterString>, 
	#[yaserde(rename = "kraftwerksnummerZuPruefen", prefix = "nsi2", default)]
	pub kraftwerksnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "bruttoleistung", prefix = "nsi2", default)]
	pub bruttoleistung: Option<f64>, 
	#[yaserde(rename = "bruttoleistungZuPruefen", prefix = "nsi2", default)]
	pub bruttoleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nettonennleistung", prefix = "nsi2", default)]
	pub nettonennleistung: Option<f64>, 
	#[yaserde(rename = "nettonennleistungZuPruefen", prefix = "nsi2", default)]
	pub nettonennleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "technologie", prefix = "nsi2", default)]
	pub technologie: Option<TechnologieSpeicherEnum>, 
	#[yaserde(rename = "technologieZuPruefen", prefix = "nsi2", default)]
	pub technologie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "schwarzstartfaehigkeit", prefix = "nsi2", default)]
	pub schwarzstartfaehigkeit: Option<bool>, 
	#[yaserde(rename = "schwarzstartfaehigkeitZuPruefen", prefix = "nsi2", default)]
	pub schwarzstartfaehigkeit_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "inselbetriebsfaehigkeit", prefix = "nsi2", default)]
	pub inselbetriebsfaehigkeit: Option<bool>, 
	#[yaserde(rename = "inselbetriebsfaehigkeitZuPruefen", prefix = "nsi2", default)]
	pub inselbetriebsfaehigkeit_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitNb", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_nb: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitNbZuPruefen", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_nb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitDv", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_dv: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitDvZuPruefen", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_dv_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "acDcKoppelung", prefix = "nsi2", default)]
	pub ac_dc_koppelung: Option<SystemkopplungEnum>, 
	#[yaserde(rename = "acDcKoppelungZuPruefen", prefix = "nsi2", default)]
	pub ac_dc_koppelung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "batterietechnologie", prefix = "nsi2", default)]
	pub batterietechnologie: Option<BatterieTechnologieEnum>, 
	#[yaserde(rename = "batterietechnologieZuPruefen", prefix = "nsi2", default)]
	pub batterietechnologie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "anschlussAnHoechstOderHochSpannung", prefix = "nsi2", default)]
	pub anschluss_an_hoechst_oder_hoch_spannung: Option<bool>, 
	#[yaserde(rename = "anschlussAnHoechstOderHochSpannungZuPruefen", prefix = "nsi2", default)]
	pub anschluss_an_hoechst_oder_hoch_spannung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "praequalifiziertFuerRegelenergie", prefix = "nsi2", default)]
	pub praequalifiziert_fuer_regelenergie: Option<bool>, 
	#[yaserde(rename = "praequalifiziertFuerRegelenergieZuPruefen", prefix = "nsi2", default)]
	pub praequalifiziert_fuer_regelenergie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "LeistungsaufnahmeBeimEinspeichern", prefix = "nsi2", default)]
	pub leistungsaufnahme_beim_einspeichern: Option<f64>, 
	#[yaserde(rename = "LeistungsaufnahmeBeimEinspeichernZuPruefen", prefix = "nsi2", default)]
	pub leistungsaufnahme_beim_einspeichern_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "pumpbetriebKontinuierlichRegelbar", prefix = "nsi2", default)]
	pub pumpbetrieb_kontinuierlich_regelbar: Option<bool>, 
	#[yaserde(rename = "pumpbetriebKontinuierlichRegelbarZuPruefen", prefix = "nsi2", default)]
	pub pumpbetrieb_kontinuierlich_regelbar_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Pumpspeichertechnologie", prefix = "nsi2", default)]
	pub pumpspeichertechnologie: Option<PumpspeichertechnologieEnum>, 
	#[yaserde(rename = "PumpspeichertechnologieZuPruefen", prefix = "nsi2", default)]
	pub pumpspeichertechnologie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einspeisungsart", prefix = "nsi2", default)]
	pub einspeisungsart: Option<EinspeisungsartEnum>, 
	#[yaserde(rename = "einspeisungsartZuPruefen", prefix = "nsi2", default)]
	pub einspeisungsart_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "bestandteilGrenzkraftwerk", prefix = "nsi2", default)]
	pub bestandteil_grenzkraftwerk: Option<bool>, 
	#[yaserde(rename = "bestandteilGrenzkraftwerkZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_grenzkraftwerk_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nettonennleistungDeutschland", prefix = "nsi2", default)]
	pub nettonennleistung_deutschland: Option<f64>, 
	#[yaserde(rename = "nettonennleistungDeutschlandZuPruefen", prefix = "nsi2", default)]
	pub nettonennleistung_deutschland_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "notstromaggregat", prefix = "nsi2", default)]
	pub notstromaggregat: Option<bool>, 
	#[yaserde(rename = "notstromaggregatZuPruefen", prefix = "nsi2", default)]
	pub notstromaggregat_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einsatzort", prefix = "nsi2", default)]
	pub einsatzort: Option<EinsatzortEnum>, 
	#[yaserde(rename = "einsatzortZuPruefen", prefix = "nsi2", default)]
	pub einsatzort_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "zugeordneteWirkleistungWechselrichter", prefix = "nsi2", default)]
	pub zugeordnete_wirkleistung_wechselrichter: Option<f64>, 
	#[yaserde(rename = "zugeordneteWirkleistungWechselrichterZuPruefen", prefix = "nsi2", default)]
	pub zugeordnete_wirkleistung_wechselrichter_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "speNutzbareSpeicherkapazitaet", prefix = "nsi2", default)]
	pub spe_nutzbare_speicherkapazitaet: Option<f64>, 
	#[yaserde(rename = "speNutzbareSpeicherkapazitaetZuPruefen", prefix = "nsi2", default)]
	pub spe_nutzbare_speicherkapazitaet_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "BestandteilEEGAnlage", prefix = "nsi2", default)]
	pub bestandteil_eeg_anlage: Option<bool>, 
	#[yaserde(rename = "BestandteilEEGAnlageZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_eeg_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInbetriebnahmedatum", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "eegInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegZuschlagsnummer", prefix = "nsi2", default)]
	pub eeg_zuschlagsnummer: Option<String>, 
	#[yaserde(rename = "eegZuschlagsnummerZuPruefen", prefix = "nsi2", default)]
	pub eeg_zuschlagsnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAusschreibungZuschlag", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag: Option<bool>, 
	#[yaserde(rename = "eegAusschreibungZuschlagZuPruefen", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ReserveartNachDemEnWG", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg: Option<ReserveartEnum>, 
	#[yaserde(rename = "ReserveartNachDemEnWGZuPruefen", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserve", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve: Option<String>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserveZuPruefen", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "MastrqsKorrekturvorschlagStornierenParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct MastrqsKorrekturvorschlagStornierenParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "maStRQSTicketId", prefix = "nsi2", default)]
	pub ma_st_rqs_ticket_id: i32, 
	#[yaserde(rename = "beschreibung", prefix = "nsi2", default)]
	pub beschreibung: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagParameterBasis",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagParameterBasis {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "einheitMastrNummer", prefix = "nsi2", default)]
	pub einheit_mastr_nummer: EinheitMastrNummerId, 
	#[yaserde(rename = "datenuebernahme", prefix = "nsi2", default)]
	pub datenuebernahme: DatenuebernahmeEnum, 
	#[yaserde(rename = "beschreibung", prefix = "nsi2", default)]
	pub beschreibung: Option<String>, 
	#[yaserde(rename = "letzteAenderung", prefix = "nsi2", default)]
	pub letzte_aenderung: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagEinheitParameterBasis",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagEinheitParameterBasis {
	#[yaserde(flatten, default)]
	pub set_mastrqs_korrektur_vorschlag_parameter_basis: SetMastrqsKorrekturVorschlagParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "postleitzahl", prefix = "nsi2", default)]
	pub postleitzahl: Option<String>, 
	#[yaserde(rename = "postleitzahlZuPruefen", prefix = "nsi2", default)]
	pub postleitzahl_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "gemarkung", prefix = "nsi2", default)]
	pub gemarkung: Option<String>, 
	#[yaserde(rename = "gemarkungZuPruefen", prefix = "nsi2", default)]
	pub gemarkung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "flurFlurstuecknummern", prefix = "nsi2", default)]
	pub flur_flurstuecknummern: Option<String>, 
	#[yaserde(rename = "flurFlurstuecknummernZuPruefen", prefix = "nsi2", default)]
	pub flur_flurstuecknummern_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "strasse", prefix = "nsi2", default)]
	pub strasse: Option<String>, 
	#[yaserde(rename = "strasseZuPruefen", prefix = "nsi2", default)]
	pub strasse_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "strasseNichtGefunden", prefix = "nsi2", default)]
	pub strasse_nicht_gefunden: Option<bool>, 
	#[yaserde(rename = "hausnummer", prefix = "nsi2", default)]
	pub hausnummer: Option<ErweiterterString>, 
	#[yaserde(rename = "hausnummerNichtGefunden", prefix = "nsi2", default)]
	pub hausnummer_nicht_gefunden: Option<bool>, 
	#[yaserde(rename = "hausnummerZuPruefen", prefix = "nsi2", default)]
	pub hausnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "adresszusatz", prefix = "nsi2", default)]
	pub adresszusatz: Option<String>, 
	#[yaserde(rename = "adresszusatzZuPruefen", prefix = "nsi2", default)]
	pub adresszusatz_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ort", prefix = "nsi2", default)]
	pub ort: Option<String>, 
	#[yaserde(rename = "ortZuPruefen", prefix = "nsi2", default)]
	pub ort_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "bundesland", prefix = "nsi2", default)]
	pub bundesland: Option<BundeslaenderEinheitenEnum>, 
	#[yaserde(rename = "bundeslandZuPruefen", prefix = "nsi2", default)]
	pub bundesland_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "land", prefix = "nsi2", default)]
	pub land: Option<LaenderEinheitenEnum>, 
	#[yaserde(rename = "landZuPruefen", prefix = "nsi2", default)]
	pub land_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "geographischeLage", prefix = "nsi2", default)]
	pub geographische_lage: Option<KorrekturdatenGeographischeLage>, 
	#[yaserde(rename = "technischesInbetriebnahmedatum", prefix = "nsi2", default)]
	pub technisches_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "technischesInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub technisches_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "datumEndgueltigeStilllegung", prefix = "nsi2", default)]
	pub datum_endgueltige_stilllegung: Option<String>, 
	#[yaserde(rename = "datumEndgueltigeStilllegungZuPruefen", prefix = "nsi2", default)]
	pub datum_endgueltige_stilllegung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "geplantesInbetriebnahmedatum", prefix = "nsi2", default)]
	pub geplantes_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "geplantesInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub geplantes_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumDesBetreiberwechsels", prefix = "nsi2", default)]
	pub datum_des_betreiberwechsels: Option<String>, 
	#[yaserde(rename = "DatumDesBetreiberwechselsZuPruefen", prefix = "nsi2", default)]
	pub datum_des_betreiberwechsels_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetMastrqsKorrekturVorschlagStromerzeugungseinheitParameterBasis",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetMastrqsKorrekturVorschlagStromerzeugungseinheitParameterBasis {
	#[yaserde(flatten, default)]
	pub set_mastrqs_korrektur_vorschlag_einheit_parameter_basis: SetMastrqsKorrekturVorschlagEinheitParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "nameStromerzeugungseinheit", prefix = "nsi2", default)]
	pub name_stromerzeugungseinheit: Option<String>, 
	#[yaserde(rename = "nameStromerzeugungseinheitZuPruefen", prefix = "nsi2", default)]
	pub name_stromerzeugungseinheit_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einsatzverantwortlicher", prefix = "nsi2", default)]
	pub einsatzverantwortlicher: Option<String>, 
	#[yaserde(rename = "einsatzverantwortlicherZuPruefen", prefix = "nsi2", default)]
	pub einsatzverantwortlicher_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "weic", prefix = "nsi2", default)]
	pub weic: Option<ErweiterterString>, 
	#[yaserde(rename = "weicZuPruefen", prefix = "nsi2", default)]
	pub weic_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "weicDisplayName", prefix = "nsi2", default)]
	pub weic_display_name: Option<String>, 
	#[yaserde(rename = "weicDisplayNameZuPruefen", prefix = "nsi2", default)]
	pub weic_display_name_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kraftwerksnummer", prefix = "nsi2", default)]
	pub kraftwerksnummer: Option<ErweiterterString>, 
	#[yaserde(rename = "kraftwerksnummerZuPruefen", prefix = "nsi2", default)]
	pub kraftwerksnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "bruttoleistung", prefix = "nsi2", default)]
	pub bruttoleistung: Option<f64>, 
	#[yaserde(rename = "bruttoleistungZuPruefen", prefix = "nsi2", default)]
	pub bruttoleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nettonennleistung", prefix = "nsi2", default)]
	pub nettonennleistung: Option<f64>, 
	#[yaserde(rename = "nettonennleistungZuPruefen", prefix = "nsi2", default)]
	pub nettonennleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "anschlussAnHoechstOderHochSpannung", prefix = "nsi2", default)]
	pub anschluss_an_hoechst_oder_hoch_spannung: Option<bool>, 
	#[yaserde(rename = "anschlussAnHoechstOderHochSpannungZuPruefen", prefix = "nsi2", default)]
	pub anschluss_an_hoechst_oder_hoch_spannung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "praequalifiziertFuerRegelenergie", prefix = "nsi2", default)]
	pub praequalifiziert_fuer_regelenergie: Option<bool>, 
	#[yaserde(rename = "praequalifiziertFuerRegelenergieZuPruefen", prefix = "nsi2", default)]
	pub praequalifiziert_fuer_regelenergie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "schwarzstartfaehigkeit", prefix = "nsi2", default)]
	pub schwarzstartfaehigkeit: Option<bool>, 
	#[yaserde(rename = "schwarzstartfaehigkeitZuPruefen", prefix = "nsi2", default)]
	pub schwarzstartfaehigkeit_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "inselbetriebsfaehigkeit", prefix = "nsi2", default)]
	pub inselbetriebsfaehigkeit: Option<bool>, 
	#[yaserde(rename = "inselbetriebsfaehigkeitZuPruefen", prefix = "nsi2", default)]
	pub inselbetriebsfaehigkeit_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitNb", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_nb: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitNbZuPruefen", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_nb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitDv", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_dv: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitDvZuPruefen", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_dv_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einspeisungsart", prefix = "nsi2", default)]
	pub einspeisungsart: Option<EinspeisungsartEnum>, 
	#[yaserde(rename = "einspeisungsartZuPruefen", prefix = "nsi2", default)]
	pub einspeisungsart_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "NetzanschlusspunktMastrNummerId",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct NetzanschlusspunktMastrNummerId {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "RegistrierungsnummerId",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct RegistrierungsnummerId {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "ErtuechtigungId",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct ErtuechtigungId {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "LokationMastrNummerId",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct LokationMastrNummerId {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "LetzteAktualisierungAnlagenbetreiber",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct LetzteAktualisierungAnlagenbetreiber {
	#[yaserde(rename = "Anlagenbetreiber", prefix = "nsi2", default)]
	pub anlagenbetreiber: Option<MarktakteurMastrNummerId>, 
	#[yaserde(rename = "DatumLetzteAktualisierung", prefix = "nsi2", default)]
	pub datum_letzte_aktualisierung: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "LetzteAktualisierungLokation",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct LetzteAktualisierungLokation {
	#[yaserde(rename = "LokationMastrNummer", prefix = "nsi2", default)]
	pub lokation_mastr_nummer: LokationMastrNummerId, 
	#[yaserde(rename = "DatumLetzteAktualisierung", prefix = "nsi2", default)]
	pub datum_letzte_aktualisierung: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "LetzteAktualisierungNetzbetreiberpruefungsprozess",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct LetzteAktualisierungNetzbetreiberpruefungsprozess {
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: NetzbetreiberpruefungId, 
	#[yaserde(rename = "DatumLetzteAktualisierung", prefix = "nsi2", default)]
	pub datum_letzte_aktualisierung: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "LetzteAktualisierungEEG",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct LetzteAktualisierungEEG {
	#[yaserde(rename = "EegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: EegMastrNummerId, 
	#[yaserde(rename = "DatumLetzteAktualisierung", prefix = "nsi2", default)]
	pub datum_letzte_aktualisierung: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "LetzteAktualisierungKWK",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct LetzteAktualisierungKWK {
	#[yaserde(rename = "KwkMastrNummer", prefix = "nsi2", default)]
	pub kwk_mastr_nummer: KwkMastrNummerId, 
	#[yaserde(rename = "DatumLetzteAktualisierung", prefix = "nsi2", default)]
	pub datum_letzte_aktualisierung: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "LetzteAktualisierungGenehmigung",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct LetzteAktualisierungGenehmigung {
	#[yaserde(rename = "GenMastrNummer", prefix = "nsi2", default)]
	pub gen_mastr_nummer: GenMastrNummerId, 
	#[yaserde(rename = "DatumLetzteAktualisierung", prefix = "nsi2", default)]
	pub datum_letzte_aktualisierung: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "LetzteAktualisierungSpeicher",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct LetzteAktualisierungSpeicher {
	#[yaserde(rename = "SpeMastrNummer", prefix = "nsi2", default)]
	pub spe_mastr_nummer: StromSpeicherMastrNummerId, 
	#[yaserde(rename = "DatumLetzteAktualisierung", prefix = "nsi2", default)]
	pub datum_letzte_aktualisierung: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "KorrekturdatenGeographischeKoordinaten",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct KorrekturdatenGeographischeKoordinaten {
	#[yaserde(rename = "laengengrad", prefix = "nsi2", default)]
	pub laengengrad: Option<f64>, 
	#[yaserde(rename = "laengengradZuPruefen", prefix = "nsi2", default)]
	pub laengengrad_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "breitengrad", prefix = "nsi2", default)]
	pub breitengrad: Option<f64>, 
	#[yaserde(rename = "breitengradZuPruefen", prefix = "nsi2", default)]
	pub breitengrad_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "KorrekturdatenUTM",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct KorrekturdatenUTM {
	#[yaserde(rename = "utmZonenwert", prefix = "nsi2", default)]
	pub utm_zonenwert: Option<i32>, 
	#[yaserde(rename = "utmZonenwertZuPruefen", prefix = "nsi2", default)]
	pub utm_zonenwert_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "utmEast", prefix = "nsi2", default)]
	pub utm_east: Option<f64>, 
	#[yaserde(rename = "utmEastZuPruefen", prefix = "nsi2", default)]
	pub utm_east_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "utmNorth", prefix = "nsi2", default)]
	pub utm_north: Option<f64>, 
	#[yaserde(rename = "utmNorthZuPruefen", prefix = "nsi2", default)]
	pub utm_north_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "KorrekturdatenGaussKrueger",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct KorrekturdatenGaussKrueger {
	#[yaserde(rename = "gaussKruegerHoch", prefix = "nsi2", default)]
	pub gauss_krueger_hoch: Option<f64>, 
	#[yaserde(rename = "gaussKruegerHochZuPruefen", prefix = "nsi2", default)]
	pub gauss_krueger_hoch_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "gaussKruegerRechts", prefix = "nsi2", default)]
	pub gauss_krueger_rechts: Option<f64>, 
	#[yaserde(rename = "gaussKruegerRechtsZuPruefen", prefix = "nsi2", default)]
	pub gauss_krueger_rechts_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "KorrekturdatenGeographischeLage",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct KorrekturdatenGeographischeLage {
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "NutsZweiRegion",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct NutsZweiRegion {
	#[yaserde(rename = "nuts2Id", prefix = "nsi2", default)]
	pub nuts_2_id: Nuts2Id, 
	#[yaserde(rename = "nuts2Beschreibung", prefix = "nsi2", default)]
	pub nuts_2_beschreibung: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "DatenkorrekturFeld",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct DatenkorrekturFeld {
	#[yaserde(rename = "bezeichnungFeld", prefix = "nsi2", default)]
	pub bezeichnung_feld: Option<String>, 
	#[yaserde(rename = "infotextFeld", prefix = "nsi2", default)]
	pub infotext_feld: Option<String>, 
	#[yaserde(rename = "wertAktuell", prefix = "nsi2", default)]
	pub wert_aktuell: Option<String>, 
	#[yaserde(rename = "wertVorgeschlagen", prefix = "nsi2", default)]
	pub wert_vorgeschlagen: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "ErweiterterString",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct ErweiterterString {
	#[yaserde(rename = "Wert", prefix = "nsi2", default)]
	pub wert: Option<String>, 
	#[yaserde(rename = "NichtVorhanden", prefix = "nsi2", default)]
	pub nicht_vorhanden: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "ErweiterterInt",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct ErweiterterInt {
	#[yaserde(rename = "Wert", prefix = "nsi2", default)]
	pub wert: Option<i32>, 
	#[yaserde(rename = "NichtVorhanden", prefix = "nsi2", default)]
	pub nicht_vorhanden: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "ErweitertesDate",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct ErweitertesDate {
	#[yaserde(rename = "Wert", prefix = "nsi2", default)]
	pub wert: Option<String>, 
	#[yaserde(rename = "NichtVorhanden", prefix = "nsi2", default)]
	pub nicht_vorhanden: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "ErweitertesDecimal",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct ErweitertesDecimal {
	#[yaserde(rename = "Wert", prefix = "nsi2", default)]
	pub wert: Option<f64>, 
	#[yaserde(rename = "NichtVorhanden", prefix = "nsi2", default)]
	pub nicht_vorhanden: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "ErweiterterKatalogwert",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct ErweiterterKatalogwert {
	#[yaserde(rename = "Wert", prefix = "nsi2", default)]
	pub wert: Option<Katalogwert>, 
	#[yaserde(rename = "NichtVorhanden", prefix = "nsi2", default)]
	pub nicht_vorhanden: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "ErweiterterKatalogwertId",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct ErweiterterKatalogwertId {
	#[yaserde(rename = "Wert", prefix = "nsi2", default)]
	pub wert: Option<KatalogwertId>, 
	#[yaserde(rename = "NichtVorhanden", prefix = "nsi2", default)]
	pub nicht_vorhanden: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "ErweiterterWeitereBrennstoffe",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct ErweiterterWeitereBrennstoffe {
	#[yaserde(rename = "Wert", prefix = "nsi2", default)]
	pub wert: Option<WeitereBrennstoffeEnum>, 
	#[yaserde(rename = "NichtVorhanden", prefix = "nsi2", default)]
	pub nicht_vorhanden: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "ErweiterteWeitereBrennstoffe",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct ErweiterteWeitereBrennstoffe {
	#[yaserde(rename = "Wert", prefix = "nsi2", default)]
	pub wert: Vec<WeitereBrennstoffeEnum>, 
	#[yaserde(rename = "NichtVorhanden", prefix = "nsi2", default)]
	pub nicht_vorhanden: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "Marktrolle",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct Marktrolle {
	#[yaserde(rename = "MarktrolleMastrNummerId", prefix = "nsi2", default)]
	pub marktrolle_mastr_nummer_id: MarktrolleMastrNummerId, 
	#[yaserde(rename = "Marktrolle", prefix = "nsi2", default)]
	pub marktrolle: MarktrollenEnum, 
	#[yaserde(rename = "BundesnetzagenturBetriebsnummer", prefix = "nsi2", default)]
	pub bundesnetzagentur_betriebsnummer: ErweiterterString, 
	#[yaserde(rename = "Marktpartneridentifikationsnummer", prefix = "nsi2", default)]
	pub marktpartneridentifikationsnummer: ErweiterterString, 
	#[yaserde(rename = "KontaktdatenMarktrolle", prefix = "nsi2", default)]
	pub kontaktdaten_marktrolle: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "Netz",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct Netz {
	#[yaserde(rename = "GeschlossenesVerteilernetz", prefix = "nsi2", default)]
	pub geschlossenes_verteilernetz: bool, 
	#[yaserde(rename = "Bundeslaender", prefix = "nsi2", default)]
	pub bundeslaender: Vec<BundeslaenderEinheitenEnum>, 
	#[yaserde(rename = "MehrAls100000Kunden", prefix = "nsi2", default)]
	pub mehr_als_100000_kunden: bool, 
	#[yaserde(rename = "Bilanzierungsgebiete", prefix = "nsi2", default)]
	pub bilanzierungsgebiete: Vec<Bilanzierungsgebiet>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "NetzanschlusspunktStromUndGas",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct NetzanschlusspunktStromUndGas {
	#[yaserde(rename = "NetzanschlusspunktMastrNummer", prefix = "nsi2", default)]
	pub netzanschlusspunkt_mastr_nummer: NetzanschlusspunktMastrNummerId, 
	#[yaserde(rename = "NetzanschlusspunktBezeichnung", prefix = "nsi2", default)]
	pub netzanschlusspunkt_bezeichnung: Option<String>, 
	#[yaserde(rename = "LetzteAenderung", prefix = "nsi2", default)]
	pub letzte_aenderung: String, 
	#[yaserde(rename = "LokationMastrNummer", prefix = "nsi2", default)]
	pub lokation_mastr_nummer: Option<LokationMastrNummerId>, 
	#[yaserde(rename = "NameDerTechnischenLokation", prefix = "nsi2", default)]
	pub name_der_technischen_lokation: Option<String>, 
	#[yaserde(rename = "Lokationtyp", prefix = "nsi2", default)]
	pub lokationtyp: Option<LokationTypEnum>, 
	#[yaserde(rename = "Messlokation", prefix = "nsi2", default)]
	pub messlokation: Option<String>, 
	#[yaserde(rename = "Spannungsebene", prefix = "nsi2", default)]
	pub spannungsebene: Option<SpannungsebeneEnum>, 
	#[yaserde(rename = "Nettoengpassleistung", prefix = "nsi2", default)]
	pub nettoengpassleistung: Option<f64>, 
	#[yaserde(rename = "BilanzierungsgebietNetzanschlusspunkt", prefix = "nsi2", default)]
	pub bilanzierungsgebiet_netzanschlusspunkt: Option<BilanzierungsgebietId>, 
	#[yaserde(rename = "Netzanschlusskapazitaet", prefix = "nsi2", default)]
	pub netzanschlusskapazitaet: Option<f64>, 
	#[yaserde(rename = "MaximaleEinspeiseleistung", prefix = "nsi2", default)]
	pub maximale_einspeiseleistung: Option<f64>, 
	#[yaserde(rename = "MaximaleAusspeiseleistung", prefix = "nsi2", default)]
	pub maximale_ausspeiseleistung: Option<f64>, 
	#[yaserde(rename = "Gasqualitaet", prefix = "nsi2", default)]
	pub gasqualitaet: Option<GasqualitaetEnum>, 
	#[yaserde(rename = "RegelzoneNetzanschlusspunkt", prefix = "nsi2", default)]
	pub regelzone_netzanschlusspunkt: Option<RegelzoneEnum>, 
	#[yaserde(rename = "GeplanterNetzanschlusspunkt", prefix = "nsi2", default)]
	pub geplanter_netzanschlusspunkt: bool, 
	#[yaserde(rename = "EinheitMitOrtUndPlz", prefix = "nsi2", default)]
	pub einheit_mit_ort_und_plz: Vec<EinheitMitOrtUndPlz>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "NetzanschlusspunktStrom",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct NetzanschlusspunktStrom {
	#[yaserde(rename = "NetzbetreiberMastrNummer", prefix = "nsi2", default)]
	pub netzbetreiber_mastr_nummer: MarktakteurMastrNummerId, 
	#[yaserde(rename = "NetzanschlusspunktMastrNummer", prefix = "nsi2", default)]
	pub netzanschlusspunkt_mastr_nummer: Option<NetzanschlusspunktMastrNummerId>, 
	#[yaserde(rename = "NetzanschlusspunktBezeichnung", prefix = "nsi2", default)]
	pub netzanschlusspunkt_bezeichnung: Option<String>, 
	#[yaserde(rename = "letzteAenderung", prefix = "nsi2", default)]
	pub letzte_aenderung: String, 
	#[yaserde(rename = "GeplanterNetzanschlusspunkt", prefix = "nsi2", default)]
	pub geplanter_netzanschlusspunkt: bool, 
	#[yaserde(rename = "Messlokation", prefix = "nsi2", default)]
	pub messlokation: Option<String>, 
	#[yaserde(rename = "Spannungsebene", prefix = "nsi2", default)]
	pub spannungsebene: SpannungsebeneEnum, 
	#[yaserde(rename = "Nettoengpassleistung", prefix = "nsi2", default)]
	pub nettoengpassleistung: Option<f64>, 
	#[yaserde(rename = "BilanzierungsgebietNetzanschlusspunkt", prefix = "nsi2", default)]
	pub bilanzierungsgebiet_netzanschlusspunkt: BilanzierungsgebietId, 
	#[yaserde(rename = "Netzanschlusskapazitaet", prefix = "nsi2", default)]
	pub netzanschlusskapazitaet: Option<f64>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "NetzanschlusspunktGas",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct NetzanschlusspunktGas {
	#[yaserde(rename = "NetzbetreiberMastrNummer", prefix = "nsi2", default)]
	pub netzbetreiber_mastr_nummer: MarktakteurMastrNummerId, 
	#[yaserde(rename = "NetzanschlusspunktMastrNummer", prefix = "nsi2", default)]
	pub netzanschlusspunkt_mastr_nummer: Option<NetzanschlusspunktMastrNummerId>, 
	#[yaserde(rename = "NetzanschlusspunktBezeichnung", prefix = "nsi2", default)]
	pub netzanschlusspunkt_bezeichnung: Option<String>, 
	#[yaserde(rename = "letzteAenderung", prefix = "nsi2", default)]
	pub letzte_aenderung: String, 
	#[yaserde(rename = "GeplanterNetzanschlusspunkt", prefix = "nsi2", default)]
	pub geplanter_netzanschlusspunkt: bool, 
	#[yaserde(rename = "Messlokation", prefix = "nsi2", default)]
	pub messlokation: Option<String>, 
	#[yaserde(rename = "MaximaleEinspeiseleistung", prefix = "nsi2", default)]
	pub maximale_einspeiseleistung: Option<f64>, 
	#[yaserde(rename = "MaximaleAusspeiseleistung", prefix = "nsi2", default)]
	pub maximale_ausspeiseleistung: Option<f64>, 
	#[yaserde(rename = "Gasqualitaet", prefix = "nsi2", default)]
	pub gasqualitaet: Option<GasqualitaetEnum>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "Lokation",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct Lokation {
	#[yaserde(rename = "LokationMastrNummer", prefix = "nsi2", default)]
	pub lokation_mastr_nummer: LokationMastrNummerId, 
	#[yaserde(rename = "NameDerTechnischenLokation", prefix = "nsi2", default)]
	pub name_der_technischen_lokation: Option<String>, 
	#[yaserde(rename = "Lokationtyp", prefix = "nsi2", default)]
	pub lokationtyp: LokationTypEnum, 
	#[yaserde(rename = "AnzahlNetzanschlusspunkte", prefix = "nsi2", default)]
	pub anzahl_netzanschlusspunkte: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "Ertuechtigung",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct Ertuechtigung {
	#[yaserde(rename = "Id", prefix = "nsi2", default)]
	pub id: ErtuechtigungId, 
	#[yaserde(rename = "ArtDerErtuechtigung", prefix = "nsi2", default)]
	pub art_der_ertuechtigung: ErtuechtigungsmassnahmeWasserkraftEnum, 
	#[yaserde(rename = "DatumWiederinbetriebnahme", prefix = "nsi2", default)]
	pub datum_wiederinbetriebnahme: Option<String>, 
	#[yaserde(rename = "ProzentualeErhoehungDesLv", prefix = "nsi2", default)]
	pub prozentuale_erhoehung_des_lv: f64, 
	#[yaserde(rename = "ZulassungspflichtigeMassnahme", prefix = "nsi2", default)]
	pub zulassungspflichtige_massnahme: bool, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "Netzbetreiberpruefung",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct Netzbetreiberpruefung {
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: NetzbetreiberpruefungId, 
	#[yaserde(rename = "netzbetreiberpruefungTicketId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_ticket_id: NetzbetreiberpruefungTicketId, 
	#[yaserde(rename = "pruefungsstartTermin", prefix = "nsi2", default)]
	pub pruefungsstart_termin: Option<String>, 
	#[yaserde(rename = "pruefungsendTermin", prefix = "nsi2", default)]
	pub pruefungsend_termin: Option<String>, 
	#[yaserde(rename = "Inbetriebnahmedatum", prefix = "nsi2", default)]
	pub inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "Registrierungsdatum", prefix = "nsi2", default)]
	pub registrierungsdatum: Option<String>, 
	#[yaserde(rename = "letzteAenderung", prefix = "nsi2", default)]
	pub letzte_aenderung: Option<String>, 
	#[yaserde(rename = "lokationMastrNummer", prefix = "nsi2", default)]
	pub lokation_mastr_nummer: Option<LokationMastrNummerId>, 
	#[yaserde(rename = "lokationsTyp", prefix = "nsi2", default)]
	pub lokations_typ: Option<LokationTypEnum>, 
	#[yaserde(rename = "verknuepfteEinheit", prefix = "nsi2", default)]
	pub verknuepfte_einheit: VerknuepfteEinheit, 
	#[yaserde(rename = "anlagenbetreiberMastrNummer", prefix = "nsi2", default)]
	pub anlagenbetreiber_mastr_nummer: Option<MarktakteurMastrNummerId>, 
	#[yaserde(rename = "netzbetreiberMastrNummer", prefix = "nsi2", default)]
	pub netzbetreiber_mastr_nummer: Option<MarktakteurMastrNummerId>, 
	#[yaserde(rename = "identifikationsnummer", prefix = "nsi2", default)]
	pub identifikationsnummer: Option<String>, 
	#[yaserde(rename = "bemerkung", prefix = "nsi2", default)]
	pub bemerkung: Option<String>, 
	#[yaserde(rename = "einheitVorschlag", prefix = "nsi2", default)]
	pub einheit_vorschlag: Option<EinheitMastrNummerId>, 
	#[yaserde(rename = "korrekturVorschlagIds", prefix = "nsi2", default)]
	pub korrektur_vorschlag_ids: Vec<KorrekturVorschlagId>, 
	#[yaserde(rename = "spannungsebene", prefix = "nsi2", default)]
	pub spannungsebene: Option<SpannungsebeneEnum>, 
	#[yaserde(rename = "status", prefix = "nsi2", default)]
	pub status: NetzbetreiberpruefungsStatusEnum, 
	#[yaserde(rename = "TicketMitStatus", prefix = "nsi2", default)]
	pub ticket_mit_status: Vec<TicketMitStatus>, 
	#[yaserde(rename = "kategorie", prefix = "nsi2", default)]
	pub kategorie: NetzbetreiberpruefungsKategorieEnum, 
	#[yaserde(rename = "klaerungsGrund", prefix = "nsi2", default)]
	pub klaerungs_grund: Option<KlaerungsGrundEnum>, 
	#[yaserde(rename = "neustartGrund", prefix = "nsi2", default)]
	pub neustart_grund: Option<String>, 
	#[yaserde(rename = "aenderungsGrundArtDerStromerzeugung", prefix = "nsi2", default)]
	pub aenderungs_grund_art_der_stromerzeugung: Option<String>, 
	#[yaserde(rename = "StartgrundNetzbetreiberpruefung", prefix = "nsi2", default)]
	pub startgrund_netzbetreiberpruefung: Option<StartgrundNetzbetreiberpruefung>, 
	#[yaserde(rename = "AbbruchgrundNetzbetreiberpruefung", prefix = "nsi2", default)]
	pub abbruchgrund_netzbetreiberpruefung: Option<AbbruchgrundNetzbetreiberpruefung>, 
	#[yaserde(rename = "LetzterVorgang", prefix = "nsi2", default)]
	pub letzter_vorgang: Option<String>, 
	#[yaserde(rename = "NetzbetreiberpruefungTicketErstellungsDatum", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_ticket_erstellungs_datum: Option<String>, 
	#[yaserde(rename = "FristverlaengerungAntragstellungDatum", prefix = "nsi2", default)]
	pub fristverlaengerung_antragstellung_datum: Option<String>, 
	#[yaserde(rename = "FristverlaengerungGrund", prefix = "nsi2", default)]
	pub fristverlaengerung_grund: Option<FristverlaengerungGrundEnum>, 
	#[yaserde(rename = "FristverlaengerungErlaeuterung", prefix = "nsi2", default)]
	pub fristverlaengerung_erlaeuterung: Option<String>, 
	#[yaserde(rename = "FristverlaengerungBearbeitungsStatus", prefix = "nsi2", default)]
	pub fristverlaengerung_bearbeitungs_status: Option<FristverlaengerungBearbeitungsStatus>, 
	#[yaserde(rename = "AktuelleFrist", prefix = "nsi2", default)]
	pub aktuelle_frist: Option<String>, 
	#[yaserde(rename = "Frist", prefix = "nsi2", default)]
	pub frist: Option<String>, 
	#[yaserde(rename = "FristverlaengerungAblehnungstext", prefix = "nsi2", default)]
	pub fristverlaengerung_ablehnungstext: Option<String>, 
	#[yaserde(rename = "AutomatischeDatenuebernahmeAm", prefix = "nsi2", default)]
	pub automatische_datenuebernahme_am: Option<String>, 
	#[yaserde(rename = "DatenaenderungsgrundFelder", prefix = "nsi2", default)]
	pub datenaenderungsgrund_felder: Option<String>, 
	#[yaserde(rename = "WeitereDatenaenderung", prefix = "nsi2", default)]
	pub weitere_datenaenderung: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "Katalogkategorie",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct Katalogkategorie {
	#[yaserde(rename = "Id", prefix = "nsi2", default)]
	pub id: KatalogkategorieId, 
	#[yaserde(rename = "Name", prefix = "nsi2", default)]
	pub name: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "Katalogwert",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct Katalogwert {
	#[yaserde(rename = "Id", prefix = "nsi2", default)]
	pub id: KatalogwertId, 
	#[yaserde(rename = "Wert", prefix = "nsi2", default)]
	pub wert: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "Bilanzierungsgebiet",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct Bilanzierungsgebiet {
	#[yaserde(rename = "Id", prefix = "nsi2", default)]
	pub id: BilanzierungsgebietId, 
	#[yaserde(rename = "Yeic", prefix = "nsi2", default)]
	pub yeic: String, 
	#[yaserde(rename = "BilanzierungsgebietNetzanschlusspunkt", prefix = "nsi2", default)]
	pub bilanzierungsgebiet_netzanschlusspunkt: String, 
	#[yaserde(rename = "RegelzoneNetzanschlusspunkt", prefix = "nsi2", default)]
	pub regelzone_netzanschlusspunkt: RegelzoneEnum, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "AuthentifizierteAnfrageBasis",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct AuthentifizierteAnfrageBasis {
	#[yaserde(rename = "apiKey", prefix = "nsi2", default)]
	pub api_key: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "AuthentifizierteAnfrageMitMarktakteurBasis",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct AuthentifizierteAnfrageMitMarktakteurBasis {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_basis: AuthentifizierteAnfrageBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "marktakteurMastrNummer", prefix = "nsi2", default)]
	pub marktakteur_mastr_nummer: MarktakteurMastrNummerId, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "AntwortBasis",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct AntwortBasis {
	#[yaserde(rename = "Ergebniscode", prefix = "nsi2", default)]
	pub ergebniscode: ErgebniscodeTyp, 
	#[yaserde(rename = "AufrufVeraltet", prefix = "nsi2", default)]
	pub aufruf_veraltet: bool, 
	#[yaserde(rename = "AufrufLebenszeitEnde", prefix = "nsi2", default)]
	pub aufruf_lebenszeit_ende: String, 
	#[yaserde(rename = "AufrufVersion", prefix = "nsi2", default)]
	pub aufruf_version: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "Marktakteur",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct Marktakteur {
	#[yaserde(rename = "MarktakteurMastrNummer", prefix = "nsi2", default)]
	pub marktakteur_mastr_nummer: MarktakteurMastrNummerId, 
	#[yaserde(rename = "Personenart", prefix = "nsi2", default)]
	pub personenart: PersonenartEnum, 
	#[yaserde(rename = "Marktakteur", prefix = "nsi2", default)]
	pub marktakteur: String, 
	#[yaserde(rename = "Marktfunktion", prefix = "nsi2", default)]
	pub marktfunktion: MarktfunktionEnum, 
	#[yaserde(rename = "Marktrollen", prefix = "nsi2", default)]
	pub marktrollen: Vec<Marktrolle>, 
	#[yaserde(rename = "Bundesland", prefix = "nsi2", default)]
	pub bundesland: Option<BundeslaenderEnum>, 
	#[yaserde(rename = "Postleitzahl", prefix = "nsi2", default)]
	pub postleitzahl: Option<String>, 
	#[yaserde(rename = "Ort", prefix = "nsi2", default)]
	pub ort: String, 
	#[yaserde(rename = "Strasse", prefix = "nsi2", default)]
	pub strasse: Option<String>, 
	#[yaserde(rename = "Hausnummer", prefix = "nsi2", default)]
	pub hausnummer: Option<ErweiterterString>, 
	#[yaserde(rename = "Land", prefix = "nsi2", default)]
	pub land: Option<LandEnum>, 
	#[yaserde(rename = "RegistrierungsdatumMarktakteur", prefix = "nsi2", default)]
	pub registrierungsdatum_marktakteur: Option<String>, 
	#[yaserde(rename = "DatumLetzeAktualisierung", prefix = "nsi2", default)]
	pub datum_letze_aktualisierung: Option<String>, 
	#[yaserde(rename = "AcerCode", prefix = "nsi2", default)]
	pub acer_code: Option<ErweiterterString>, 
	#[yaserde(rename = "GeschlossenesVerteilernetz", prefix = "nsi2", default)]
	pub geschlossenes_verteilernetz: bool, 
	#[yaserde(rename = "Taetigkeitsbeginn", prefix = "nsi2", default)]
	pub taetigkeitsbeginn: Option<String>, 
	#[yaserde(rename = "Taetigkeitsende", prefix = "nsi2", default)]
	pub taetigkeitsende: Option<String>, 
	#[yaserde(rename = "Status", prefix = "nsi2", default)]
	pub status: MarktakteurStatusEnum, 
	#[yaserde(rename = "Marktakteursvertreter", prefix = "nsi2", default)]
	pub marktakteursvertreter: String, 
	#[yaserde(rename = "RollenImMarktakteur", prefix = "nsi2", default)]
	pub rollen_im_marktakteur: Vec<RollenEnum>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "Einheit",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct Einheit {
	#[yaserde(rename = "EinheitMastrNummer", prefix = "nsi2", default)]
	pub einheit_mastr_nummer: EinheitMastrNummerId, 
	#[yaserde(rename = "DatumLetzeAktualisierung", prefix = "nsi2", default)]
	pub datum_letze_aktualisierung: String, 
	#[yaserde(rename = "Name", prefix = "nsi2", default)]
	pub name: String, 
	#[yaserde(rename = "Einheitart", prefix = "nsi2", default)]
	pub einheitart: EinheitArtEnum, 
	#[yaserde(rename = "Einheittyp", prefix = "nsi2", default)]
	pub einheittyp: Option<EinheitTypEnum>, 
	#[yaserde(rename = "Standort", prefix = "nsi2", default)]
	pub standort: String, 
	#[yaserde(rename = "Bruttoleistung", prefix = "nsi2", default)]
	pub bruttoleistung: Option<f64>, 
	#[yaserde(rename = "Erzeugungsleistung", prefix = "nsi2", default)]
	pub erzeugungsleistung: Option<f64>, 
	#[yaserde(rename = "EinheitSystemstatus", prefix = "nsi2", default)]
	pub einheit_systemstatus: Option<AnlagenSystemStatusEnum>, 
	#[yaserde(rename = "EinheitBetriebsstatus", prefix = "nsi2", default)]
	pub einheit_betriebsstatus: Option<AnlagenBetriebsStatusEnum>, 
	#[yaserde(rename = "Anlagenbetreiber", prefix = "nsi2", default)]
	pub anlagenbetreiber: Option<MarktakteurMastrNummerId>, 
	#[yaserde(rename = "EegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: Option<EegMastrNummerId>, 
	#[yaserde(rename = "KwkMastrNummer", prefix = "nsi2", default)]
	pub kwk_mastr_nummer: Option<KwkMastrNummerId>, 
	#[yaserde(rename = "SpeMastrNummer", prefix = "nsi2", default)]
	pub spe_mastr_nummer: Option<StromSpeicherMastrNummerId>, 
	#[yaserde(rename = "GenMastrNummer", prefix = "nsi2", default)]
	pub gen_mastr_nummer: Option<GenMastrNummerId>, 
	#[yaserde(rename = "BestandsanlageMastrNummer", prefix = "nsi2", default)]
	pub bestandsanlage_mastr_nummer: Option<EinheitMastrNummerId>, 
	#[yaserde(rename = "NichtVorhandenInMigriertenEinheiten", prefix = "nsi2", default)]
	pub nicht_vorhanden_in_migrierten_einheiten: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokaleUhrzeitParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetLokaleUhrzeitParameter {
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokaleUhrzeitAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetLokaleUhrzeitAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "LokaleUhrzeit", prefix = "nsi2", default)]
	pub lokale_uhrzeit: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokaleUhrzeitMitAuthentifizierungParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetLokaleUhrzeitMitAuthentifizierungParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_basis: AuthentifizierteAnfrageBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAktuellerStandTageskontingentAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetAktuellerStandTageskontingentAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "AktuellerStandTageskontingent", prefix = "nsi2", default)]
	pub aktueller_stand_tageskontingent: i32, 
	#[yaserde(rename = "AktuellesLimitTageskontingent", prefix = "nsi2", default)]
	pub aktuelles_limit_tageskontingent: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAktuellerStandTageskontingentParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetAktuellerStandTageskontingentParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokaleUhrzeitMitAuthentifizierungAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetLokaleUhrzeitMitAuthentifizierungAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "LokaleUhrzeitMitAuthentifizierung", prefix = "nsi2", default)]
	pub lokale_uhrzeit_mit_authentifizierung: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeKatalogkategorienParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeKatalogkategorienParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_basis: AuthentifizierteAnfrageBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "startAb", prefix = "nsi2", default)]
	pub start_ab: Option<i32>, 
	#[yaserde(rename = "limit", prefix = "nsi2", default)]
	pub limit: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeKatalogkategorienAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeKatalogkategorienAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "Katalogkategorien", prefix = "nsi2", default)]
	pub katalogkategorien: Vec<Katalogkategorie>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKatalogwerteParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKatalogwerteParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_basis: AuthentifizierteAnfrageBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "startAb", prefix = "nsi2", default)]
	pub start_ab: Option<i32>, 
	#[yaserde(rename = "limit", prefix = "nsi2", default)]
	pub limit: Option<i32>, 
	#[yaserde(rename = "id", prefix = "nsi2", default)]
	pub id: KatalogkategorieId, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKatalogwerteAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKatalogwerteAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "Katalogwerte", prefix = "nsi2", default)]
	pub katalogwerte: Vec<Katalogwert>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetBilanzierungsgebieteParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetBilanzierungsgebieteParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_basis: AuthentifizierteAnfrageBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "startAb", prefix = "nsi2", default)]
	pub start_ab: Option<i32>, 
	#[yaserde(rename = "limit", prefix = "nsi2", default)]
	pub limit: Option<i32>, 
	#[yaserde(rename = "marktakteurMastrNummer", prefix = "nsi2", default)]
	pub marktakteur_mastr_nummer: Option<MarktakteurMastrNummerId>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetBilanzierungsgebieteAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetBilanzierungsgebieteAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "Bilanzierungsgebiete", prefix = "nsi2", default)]
	pub bilanzierungsgebiete: Vec<Bilanzierungsgebiet>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeAlleMarktakteureParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeAlleMarktakteureParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "startAb", prefix = "nsi2", default)]
	pub start_ab: Option<i32>, 
	#[yaserde(rename = "datumAb", prefix = "nsi2", default)]
	pub datum_ab: Option<String>, 
	#[yaserde(rename = "limit", prefix = "nsi2", default)]
	pub limit: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeAlleMarktakteureAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeAlleMarktakteureAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "ListeMarktakteure", prefix = "nsi2", default)]
	pub liste_marktakteure: Vec<Marktakteur>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetMeineMarktakteureParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetMeineMarktakteureParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_basis: AuthentifizierteAnfrageBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "startAb", prefix = "nsi2", default)]
	pub start_ab: Option<i32>, 
	#[yaserde(rename = "datumAb", prefix = "nsi2", default)]
	pub datum_ab: Option<String>, 
	#[yaserde(rename = "limit", prefix = "nsi2", default)]
	pub limit: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetMeineMarktakteureAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetMeineMarktakteureAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "ListeMarktakteure", prefix = "nsi2", default)]
	pub liste_marktakteure: Vec<Marktakteur>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeFreigegebeneMarktakteureParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeFreigegebeneMarktakteureParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "startAb", prefix = "nsi2", default)]
	pub start_ab: Option<i32>, 
	#[yaserde(rename = "datumAb", prefix = "nsi2", default)]
	pub datum_ab: Option<String>, 
	#[yaserde(rename = "limit", prefix = "nsi2", default)]
	pub limit: Option<i32>, 
	#[yaserde(rename = "MastrNummer", prefix = "nsi2", default)]
	pub mastr_nummer: Option<MarktakteurMastrNummerId>, 
	#[yaserde(rename = "Marktfunktion", prefix = "nsi2", default)]
	pub marktfunktion: Option<MarktfunktionEnum>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeFreigegebeneMarktakteureAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeFreigegebeneMarktakteureAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "ListeMarktakteure", prefix = "nsi2", default)]
	pub liste_marktakteure: Vec<Marktakteur>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetMarktakteurParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetMarktakteurParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "mastrNummer", prefix = "nsi2", default)]
	pub mastr_nummer: MarktakteurMastrNummerId, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetMarktakteurAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetMarktakteurAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "MastrNummer", prefix = "nsi2", default)]
	pub mastr_nummer: MarktakteurMastrNummerId, 
	#[yaserde(rename = "DatumLetzeAktualisierung", prefix = "nsi2", default)]
	pub datum_letze_aktualisierung: String, 
	#[yaserde(rename = "Personenart", prefix = "nsi2", default)]
	pub personenart: PersonenartEnum, 
	#[yaserde(rename = "MarktakteurAnrede", prefix = "nsi2", default)]
	pub marktakteur_anrede: Option<SalutationEnum>, 
	#[yaserde(rename = "MarktakteurTitel", prefix = "nsi2", default)]
	pub marktakteur_titel: Option<TitelEnum>, 
	#[yaserde(rename = "MarktakteurVorname", prefix = "nsi2", default)]
	pub marktakteur_vorname: Option<String>, 
	#[yaserde(rename = "MarktakteurNachname", prefix = "nsi2", default)]
	pub marktakteur_nachname: Option<String>, 
	#[yaserde(rename = "Geburtsdatum", prefix = "nsi2", default)]
	pub geburtsdatum: Option<String>, 
	#[yaserde(rename = "Firmenname", prefix = "nsi2", default)]
	pub firmenname: Option<String>, 
	#[yaserde(rename = "Marktfunktion", prefix = "nsi2", default)]
	pub marktfunktion: MarktfunktionEnum, 
	#[yaserde(rename = "Rechtsform", prefix = "nsi2", default)]
	pub rechtsform: Option<Katalogwert>, 
	#[yaserde(rename = "SonstigeRechtsform", prefix = "nsi2", default)]
	pub sonstige_rechtsform: Option<String>, 
	#[yaserde(rename = "Marktrollen", prefix = "nsi2", default)]
	pub marktrollen: Vec<Marktrolle>, 
	#[yaserde(rename = "Marktakteursvertreter", prefix = "nsi2", default)]
	pub marktakteursvertreter: String, 
	#[yaserde(rename = "Land", prefix = "nsi2", default)]
	pub land: Option<LandEnum>, 
	#[yaserde(rename = "Region", prefix = "nsi2", default)]
	pub region: Option<String>, 
	#[yaserde(rename = "Strasse", prefix = "nsi2", default)]
	pub strasse: Option<String>, 
	#[yaserde(rename = "StrasseNichtGefunden", prefix = "nsi2", default)]
	pub strasse_nicht_gefunden: Option<bool>, 
	#[yaserde(rename = "Hausnummer", prefix = "nsi2", default)]
	pub hausnummer: ErweiterterString, 
	#[yaserde(rename = "HausnummerNichtGefunden", prefix = "nsi2", default)]
	pub hausnummer_nicht_gefunden: Option<bool>, 
	#[yaserde(rename = "Adresszusatz", prefix = "nsi2", default)]
	pub adresszusatz: Option<String>, 
	#[yaserde(rename = "Postleitzahl", prefix = "nsi2", default)]
	pub postleitzahl: Option<String>, 
	#[yaserde(rename = "Ort", prefix = "nsi2", default)]
	pub ort: Option<String>, 
	#[yaserde(rename = "Bundesland", prefix = "nsi2", default)]
	pub bundesland: Option<BundeslaenderEnum>, 
	#[yaserde(rename = "Netz", prefix = "nsi2", default)]
	pub netz: Option<Netz>, 
	#[yaserde(rename = "Nuts2", prefix = "nsi2", default)]
	pub nuts_2: Option<NutsZweiRegion>, 
	#[yaserde(rename = "AbweichenderNameFirmenname", prefix = "nsi2", default)]
	pub abweichender_name_firmenname: Option<String>, 
	#[yaserde(rename = "Email", prefix = "nsi2", default)]
	pub email: String, 
	#[yaserde(rename = "Telefon", prefix = "nsi2", default)]
	pub telefon: String, 
	#[yaserde(rename = "Fax", prefix = "nsi2", default)]
	pub fax: ErweiterterString, 
	#[yaserde(rename = "Webseite", prefix = "nsi2", default)]
	pub webseite: ErweiterterString, 
	#[yaserde(rename = "ImHandelsregisterEingetragen", prefix = "nsi2", default)]
	pub im_handelsregister_eingetragen: Option<bool>, 
	#[yaserde(rename = "Registergericht", prefix = "nsi2", default)]
	pub registergericht: Option<Katalogwert>, 
	#[yaserde(rename = "RegistergerichtAusland", prefix = "nsi2", default)]
	pub registergericht_ausland: Option<String>, 
	#[yaserde(rename = "RegisternummerPraefix", prefix = "nsi2", default)]
	pub registernummer_praefix: Option<RegisterNrPraefixEnum>, 
	#[yaserde(rename = "Registernummer", prefix = "nsi2", default)]
	pub registernummer: Option<String>, 
	#[yaserde(rename = "RegisternummerAusland", prefix = "nsi2", default)]
	pub registernummer_ausland: Option<String>, 
	#[yaserde(rename = "Taetigkeitsbeginn", prefix = "nsi2", default)]
	pub taetigkeitsbeginn: Option<String>, 
	#[yaserde(rename = "AcerCode", prefix = "nsi2", default)]
	pub acer_code: ErweiterterString, 
	#[yaserde(rename = "Umsatzsteueridentifikationsnummer", prefix = "nsi2", default)]
	pub umsatzsteueridentifikationsnummer: ErweiterterString, 
	#[yaserde(rename = "Taetigkeitsende", prefix = "nsi2", default)]
	pub taetigkeitsende: Option<String>, 
	#[yaserde(rename = "BundesnetzagenturBetriebsnummer", prefix = "nsi2", default)]
	pub bundesnetzagentur_betriebsnummer: ErweiterterString, 
	#[yaserde(rename = "AdresseIstZustelladresse", prefix = "nsi2", default)]
	pub adresse_ist_zustelladresse: Option<bool>, 
	#[yaserde(rename = "ZustellLand", prefix = "nsi2", default)]
	pub zustell_land: Option<LandEnum>, 
	#[yaserde(rename = "ZustellPostleitzahl", prefix = "nsi2", default)]
	pub zustell_postleitzahl: Option<String>, 
	#[yaserde(rename = "ZustellOrt", prefix = "nsi2", default)]
	pub zustell_ort: Option<String>, 
	#[yaserde(rename = "ZustellStrasse", prefix = "nsi2", default)]
	pub zustell_strasse: Option<String>, 
	#[yaserde(rename = "ZustellStrasseNichtGefunden", prefix = "nsi2", default)]
	pub zustell_strasse_nicht_gefunden: Option<bool>, 
	#[yaserde(rename = "ZustellHausnummer", prefix = "nsi2", default)]
	pub zustell_hausnummer: Option<ErweiterterString>, 
	#[yaserde(rename = "ZustellHausnummerNichtGefunden", prefix = "nsi2", default)]
	pub zustell_hausnummer_nicht_gefunden: Option<bool>, 
	#[yaserde(rename = "ZustellAdresszusatz", prefix = "nsi2", default)]
	pub zustell_adresszusatz: Option<String>, 
	#[yaserde(rename = "Kmu", prefix = "nsi2", default)]
	pub kmu: Option<bool>, 
	#[yaserde(rename = "EinkommenAusSelbstaendigerArbeit", prefix = "nsi2", default)]
	pub einkommen_aus_selbstaendiger_arbeit: Option<bool>, 
	#[yaserde(rename = "TelefonnummerVMav", prefix = "nsi2", default)]
	pub telefonnummer_v_mav: Option<String>, 
	#[yaserde(rename = "EmailVMav", prefix = "nsi2", default)]
	pub email_v_mav: Option<String>, 
	#[yaserde(rename = "RegistrierungsdatumMarktakteur", prefix = "nsi2", default)]
	pub registrierungsdatum_marktakteur: Option<String>, 
	#[yaserde(rename = "HauptwirtdschaftszweigAbteilung", prefix = "nsi2", default)]
	pub hauptwirtdschaftszweig_abteilung: Option<NaceAbteilungEnum>, 
	#[yaserde(rename = "HauptwirtdschaftszweigGruppe", prefix = "nsi2", default)]
	pub hauptwirtdschaftszweig_gruppe: Option<NaceGruppeEnum>, 
	#[yaserde(rename = "HauptwirtdschaftszweigAbschnitt", prefix = "nsi2", default)]
	pub hauptwirtdschaftszweig_abschnitt: Option<NaceAbschnittEnum>, 
	#[yaserde(rename = "Direktvermarktungsunternehmen", prefix = "nsi2", default)]
	pub direktvermarktungsunternehmen: Option<bool>, 
	#[yaserde(rename = "BelieferungVonLetztverbrauchernStrom", prefix = "nsi2", default)]
	pub belieferung_von_letztverbrauchern_strom: Option<bool>, 
	#[yaserde(rename = "BelieferungHaushaltskundenStrom", prefix = "nsi2", default)]
	pub belieferung_haushaltskunden_strom: Option<bool>, 
	#[yaserde(rename = "Gasgrosshaendler", prefix = "nsi2", default)]
	pub gasgrosshaendler: Option<bool>, 
	#[yaserde(rename = "Stromgrosshaendler", prefix = "nsi2", default)]
	pub stromgrosshaendler: Option<bool>, 
	#[yaserde(rename = "BelieferungVonLetztverbrauchernGas", prefix = "nsi2", default)]
	pub belieferung_von_letztverbrauchern_gas: Option<bool>, 
	#[yaserde(rename = "BelieferungHaushaltskundenGas", prefix = "nsi2", default)]
	pub belieferung_haushaltskunden_gas: Option<bool>, 
	#[yaserde(rename = "WebportalDesNetzbetreibers", prefix = "nsi2", default)]
	pub webportal_des_netzbetreibers: Option<String>, 
	#[yaserde(rename = "Status", prefix = "nsi2", default)]
	pub status: MarktakteurStatusEnum, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeLetzteAktualisierungParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeLetzteAktualisierungParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "startAb", prefix = "nsi2", default)]
	pub start_ab: Option<i32>, 
	#[yaserde(rename = "datumAb", prefix = "nsi2", default)]
	pub datum_ab: Option<String>, 
	#[yaserde(rename = "limit", prefix = "nsi2", default)]
	pub limit: Option<i32>, 
	#[yaserde(rename = "Einheitart", prefix = "nsi2", default)]
	pub einheitart: Option<EinheitArtEnum>, 
	#[yaserde(rename = "Einheittyp", prefix = "nsi2", default)]
	pub einheittyp: Option<EinheitTypEnum>, 
	#[yaserde(rename = "VerknuepftesObjektArt", prefix = "nsi2", default)]
	pub verknuepftes_objekt_art: EinheitLetzteAktualisierungObjektEnum, 
	#[yaserde(rename = "VerknuepftesObjektDatumAb", prefix = "nsi2", default)]
	pub verknuepftes_objekt_datum_ab: Option<String>, 
	#[yaserde(rename = "VerknuepftesObjektId", prefix = "nsi2", default)]
	pub verknuepftes_objekt_id: Option<String>, 
	#[yaserde(rename = "EinheitMastrNummern", prefix = "nsi2", default)]
	pub einheit_mastr_nummern: Vec<EinheitMastrNummerId>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeLetzteAktualisierungAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeLetzteAktualisierungAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "Einheiten", prefix = "nsi2", default)]
	pub einheiten: Vec<EinheitLetzteAktualisierung>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeAlleEinheitenParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeAlleEinheitenParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "startAb", prefix = "nsi2", default)]
	pub start_ab: Option<i32>, 
	#[yaserde(rename = "datumAb", prefix = "nsi2", default)]
	pub datum_ab: Option<String>, 
	#[yaserde(rename = "limit", prefix = "nsi2", default)]
	pub limit: Option<i32>, 
	#[yaserde(rename = "einheitMastrNummern", prefix = "nsi2", default)]
	pub einheit_mastr_nummern: Vec<EinheitMastrNummerId>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeAlleEinheitenAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeAlleEinheitenAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "Einheiten", prefix = "nsi2", default)]
	pub einheiten: Vec<Einheit>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeFreigegebeneEinheitenParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeFreigegebeneEinheitenParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "startAb", prefix = "nsi2", default)]
	pub start_ab: Option<i32>, 
	#[yaserde(rename = "datumAb", prefix = "nsi2", default)]
	pub datum_ab: Option<String>, 
	#[yaserde(rename = "limit", prefix = "nsi2", default)]
	pub limit: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeFreigegebeneEinheitenAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeFreigegebeneEinheitenAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "Einheiten", prefix = "nsi2", default)]
	pub einheiten: Vec<Einheit>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetMeineEinheitenParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetMeineEinheitenParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "startAb", prefix = "nsi2", default)]
	pub start_ab: Option<i32>, 
	#[yaserde(rename = "datumAb", prefix = "nsi2", default)]
	pub datum_ab: Option<String>, 
	#[yaserde(rename = "limit", prefix = "nsi2", default)]
	pub limit: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetMeineEinheitenAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetMeineEinheitenAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "Einheiten", prefix = "nsi2", default)]
	pub einheiten: Vec<Einheit>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeEinheitenInMeinemNetzParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeEinheitenInMeinemNetzParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "startAb", prefix = "nsi2", default)]
	pub start_ab: Option<i32>, 
	#[yaserde(rename = "datumAb", prefix = "nsi2", default)]
	pub datum_ab: Option<String>, 
	#[yaserde(rename = "limit", prefix = "nsi2", default)]
	pub limit: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeEinheitenInMeinemNetzAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeEinheitenInMeinemNetzAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "Einheiten", prefix = "nsi2", default)]
	pub einheiten: Vec<Einheit>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeGeloeschteUndDeaktivierteEinheitenParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeGeloeschteUndDeaktivierteEinheitenParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "startAb", prefix = "nsi2", default)]
	pub start_ab: Option<i32>, 
	#[yaserde(rename = "datumAb", prefix = "nsi2", default)]
	pub datum_ab: Option<String>, 
	#[yaserde(rename = "limit", prefix = "nsi2", default)]
	pub limit: Option<i32>, 
	#[yaserde(rename = "einheitMastrNummern", prefix = "nsi2", default)]
	pub einheit_mastr_nummern: Vec<EinheitMastrNummerId>, 
	#[yaserde(rename = "AnlagenSystemstatus", prefix = "nsi2", default)]
	pub anlagen_systemstatus: Option<AnlagenSystemStatusEnum>, 
	#[yaserde(rename = "AnlageBetriebsstatus", prefix = "nsi2", default)]
	pub anlage_betriebsstatus: Option<AnlagenBetriebsStatusEnum>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeGeloeschteUndDeaktivierteEinheitenAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeGeloeschteUndDeaktivierteEinheitenAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "EinheitMitStatus", prefix = "nsi2", default)]
	pub einheit_mit_status: Vec<EinheitMitStatus>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeEinheitenAenderungNetzbetreiberzuordnungParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeEinheitenAenderungNetzbetreiberzuordnungParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "startAb", prefix = "nsi2", default)]
	pub start_ab: Option<i32>, 
	#[yaserde(rename = "datumAb", prefix = "nsi2", default)]
	pub datum_ab: Option<String>, 
	#[yaserde(rename = "limit", prefix = "nsi2", default)]
	pub limit: Option<i32>, 
	#[yaserde(rename = "EinheitMastrNummer", prefix = "nsi2", default)]
	pub einheit_mastr_nummer: Option<EinheitMastrNummerId>, 
	#[yaserde(rename = "LokationMastrNummer", prefix = "nsi2", default)]
	pub lokation_mastr_nummer: Option<LokationMastrNummerId>, 
	#[yaserde(rename = "NetzanschlusspunktMastrNummer", prefix = "nsi2", default)]
	pub netzanschlusspunkt_mastr_nummer: Option<NetzanschlusspunktMastrNummerId>, 
	#[yaserde(rename = "NetzbetreiberMastrNummerAlt", prefix = "nsi2", default)]
	pub netzbetreiber_mastr_nummer_alt: Option<MarktakteurMastrNummerId>, 
	#[yaserde(rename = "NetzbetreiberMastrNummerNeu", prefix = "nsi2", default)]
	pub netzbetreiber_mastr_nummer_neu: Option<MarktakteurMastrNummerId>, 
	#[yaserde(rename = "ArtDerAenderung", prefix = "nsi2", default)]
	pub art_der_aenderung: Option<ArtDerAenderungEnum>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeEinheitenAenderungNetzbetreiberzuordnungAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeEinheitenAenderungNetzbetreiberzuordnungAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "EinheitAenderungZuordnung", prefix = "nsi2", default)]
	pub einheit_aenderung_zuordnung: Vec<EinheitAenderungZuordnung>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeGeloeschteUndDeaktivierteMarktakteureParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeGeloeschteUndDeaktivierteMarktakteureParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "startAb", prefix = "nsi2", default)]
	pub start_ab: Option<i32>, 
	#[yaserde(rename = "datumAb", prefix = "nsi2", default)]
	pub datum_ab: Option<String>, 
	#[yaserde(rename = "limit", prefix = "nsi2", default)]
	pub limit: Option<i32>, 
	#[yaserde(rename = "MarktakteurMastrNummern", prefix = "nsi2", default)]
	pub marktakteur_mastr_nummern: Vec<MarktakteurMastrNummerId>, 
	#[yaserde(rename = "Status", prefix = "nsi2", default)]
	pub status: Option<MarktakteurStatusEnum>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeGeloeschteUndDeaktivierteMarktakteureAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeGeloeschteUndDeaktivierteMarktakteureAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "MarktakteurMitStatus", prefix = "nsi2", default)]
	pub marktakteur_mit_status: Vec<MarktakteurMitStatus>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitBasisParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitBasisParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "einheitMastrNummer", prefix = "nsi2", default)]
	pub einheit_mastr_nummer: EinheitMastrNummerId, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitWindParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitWindParameter {
	#[yaserde(flatten, default)]
	pub get_einheit_basis_parameter: GetEinheitBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitSolarParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitSolarParameter {
	#[yaserde(flatten, default)]
	pub get_einheit_basis_parameter: GetEinheitBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitBiomasseParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitBiomasseParameter {
	#[yaserde(flatten, default)]
	pub get_einheit_basis_parameter: GetEinheitBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitWasserParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitWasserParameter {
	#[yaserde(flatten, default)]
	pub get_einheit_basis_parameter: GetEinheitBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitGeothermieGrubengasDruckentspannungParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitGeothermieGrubengasDruckentspannungParameter {
	#[yaserde(flatten, default)]
	pub get_einheit_basis_parameter: GetEinheitBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitVerbrennungParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitVerbrennungParameter {
	#[yaserde(flatten, default)]
	pub get_einheit_basis_parameter: GetEinheitBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitKernkraftParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitKernkraftParameter {
	#[yaserde(flatten, default)]
	pub get_einheit_basis_parameter: GetEinheitBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitStromSpeicherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitStromSpeicherParameter {
	#[yaserde(flatten, default)]
	pub get_einheit_basis_parameter: GetEinheitBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitStromVerbraucherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitStromVerbraucherParameter {
	#[yaserde(flatten, default)]
	pub get_einheit_basis_parameter: GetEinheitBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitGasErzeugerParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitGasErzeugerParameter {
	#[yaserde(flatten, default)]
	pub get_einheit_basis_parameter: GetEinheitBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitGasSpeicherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitGasSpeicherParameter {
	#[yaserde(flatten, default)]
	pub get_einheit_basis_parameter: GetEinheitBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitGasVerbraucherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitGasVerbraucherParameter {
	#[yaserde(flatten, default)]
	pub get_einheit_basis_parameter: GetEinheitBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitGenehmigungParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitGenehmigungParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "genMastrNummer", prefix = "nsi2", default)]
	pub gen_mastr_nummer: GenMastrNummerId, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitStromerzeugungBasisAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitStromerzeugungBasisAntwort {
	#[yaserde(flatten, default)]
	pub get_einheit_basis_antwort: GetEinheitBasisAntwort, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "NameStromerzeugungseinheit", prefix = "nsi2", default)]
	pub name_stromerzeugungseinheit: String, 
	#[yaserde(rename = "Weic", prefix = "nsi2", default)]
	pub weic: ErweiterterString, 
	#[yaserde(rename = "WeicDisplayName", prefix = "nsi2", default)]
	pub weic_display_name: Option<String>, 
	#[yaserde(rename = "Kraftwerksnummer", prefix = "nsi2", default)]
	pub kraftwerksnummer: ErweiterterString, 
	#[yaserde(rename = "Energietraeger", prefix = "nsi2", default)]
	pub energietraeger: EnergietraegerEnum, 
	#[yaserde(rename = "Bruttoleistung", prefix = "nsi2", default)]
	pub bruttoleistung: f64, 
	#[yaserde(rename = "Nettonennleistung", prefix = "nsi2", default)]
	pub nettonennleistung: f64, 
	#[yaserde(rename = "Schwarzstartfaehigkeit", prefix = "nsi2", default)]
	pub schwarzstartfaehigkeit: Option<bool>, 
	#[yaserde(rename = "Inselbetriebsfaehigkeit", prefix = "nsi2", default)]
	pub inselbetriebsfaehigkeit: Option<bool>, 
	#[yaserde(rename = "Einsatzverantwortlicher", prefix = "nsi2", default)]
	pub einsatzverantwortlicher: Option<String>, 
	#[yaserde(rename = "FernsteuerbarkeitNb", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_nb: Option<bool>, 
	#[yaserde(rename = "FernsteuerbarkeitDv", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_dv: Option<bool>, 
	#[yaserde(rename = "Einspeisungsart", prefix = "nsi2", default)]
	pub einspeisungsart: EinspeisungsartEnum, 
	#[yaserde(rename = "PraequalifiziertFuerRegelenergie", prefix = "nsi2", default)]
	pub praequalifiziert_fuer_regelenergie: Option<bool>, 
	#[yaserde(rename = "GenMastrNummer", prefix = "nsi2", default)]
	pub gen_mastr_nummer: Option<GenMastrNummerId>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitBasisAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitBasisAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "EinheitMastrNummer", prefix = "nsi2", default)]
	pub einheit_mastr_nummer: EinheitMastrNummerId, 
	#[yaserde(rename = "DatumLetzteAktualisierung", prefix = "nsi2", default)]
	pub datum_letzte_aktualisierung: String, 
	#[yaserde(rename = "LokationMastrNummer", prefix = "nsi2", default)]
	pub lokation_mastr_nummer: Option<LokationMastrNummerId>, 
	#[yaserde(rename = "NetzbetreiberpruefungStatus", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_status: NetzbetreiberpruefungsStatusEnum, 
	#[yaserde(rename = "Netzbetreiberzuordnungen", prefix = "nsi2", default)]
	pub netzbetreiberzuordnungen: Vec<Netzbetreiberzuordnung>, 
	#[yaserde(rename = "NetzbetreiberpruefungDatum", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_datum: Option<String>, 
	#[yaserde(rename = "AnlagenbetreiberMastrNummer", prefix = "nsi2", default)]
	pub anlagenbetreiber_mastr_nummer: Option<MarktakteurMastrNummerId>, 
	#[yaserde(rename = "Land", prefix = "nsi2", default)]
	pub land: LaenderEinheitenEnum, 
	#[yaserde(rename = "Bundesland", prefix = "nsi2", default)]
	pub bundesland: Option<BundeslaenderEinheitenEnum>, 
	#[yaserde(rename = "Landkreis", prefix = "nsi2", default)]
	pub landkreis: Option<String>, 
	#[yaserde(rename = "Gemeinde", prefix = "nsi2", default)]
	pub gemeinde: Option<String>, 
	#[yaserde(rename = "Gemeindeschluessel", prefix = "nsi2", default)]
	pub gemeindeschluessel: Option<String>, 
	#[yaserde(rename = "Postleitzahl", prefix = "nsi2", default)]
	pub postleitzahl: String, 
	#[yaserde(rename = "Gemarkung", prefix = "nsi2", default)]
	pub gemarkung: Option<String>, 
	#[yaserde(rename = "FlurFlurstuecknummern", prefix = "nsi2", default)]
	pub flur_flurstuecknummern: Option<String>, 
	#[yaserde(rename = "Strasse", prefix = "nsi2", default)]
	pub strasse: Option<String>, 
	#[yaserde(rename = "StrasseNichtGefunden", prefix = "nsi2", default)]
	pub strasse_nicht_gefunden: Option<bool>, 
	#[yaserde(rename = "Hausnummer", prefix = "nsi2", default)]
	pub hausnummer: ErweiterterString, 
	#[yaserde(rename = "HausnummerNichtGefunden", prefix = "nsi2", default)]
	pub hausnummer_nicht_gefunden: Option<bool>, 
	#[yaserde(rename = "Adresszusatz", prefix = "nsi2", default)]
	pub adresszusatz: Option<String>, 
	#[yaserde(rename = "Ort", prefix = "nsi2", default)]
	pub ort: String, 
	#[yaserde(rename = "Laengengrad", prefix = "nsi2", default)]
	pub laengengrad: Option<f64>, 
	#[yaserde(rename = "Breitengrad", prefix = "nsi2", default)]
	pub breitengrad: Option<f64>, 
	#[yaserde(rename = "UtmZonenwert", prefix = "nsi2", default)]
	pub utm_zonenwert: Option<i32>, 
	#[yaserde(rename = "UtmEast", prefix = "nsi2", default)]
	pub utm_east: Option<f64>, 
	#[yaserde(rename = "UtmNorth", prefix = "nsi2", default)]
	pub utm_north: Option<f64>, 
	#[yaserde(rename = "GaussKruegerHoch", prefix = "nsi2", default)]
	pub gauss_krueger_hoch: Option<f64>, 
	#[yaserde(rename = "GaussKruegerRechts", prefix = "nsi2", default)]
	pub gauss_krueger_rechts: Option<f64>, 
	#[yaserde(rename = "Registrierungsdatum", prefix = "nsi2", default)]
	pub registrierungsdatum: Option<String>, 
	#[yaserde(rename = "GeplantesInbetriebnahmedatum", prefix = "nsi2", default)]
	pub geplantes_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "Inbetriebnahmedatum", prefix = "nsi2", default)]
	pub inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "DatumEndgueltigeStilllegung", prefix = "nsi2", default)]
	pub datum_endgueltige_stilllegung: Option<String>, 
	#[yaserde(rename = "DatumBeginnVoruebergehendeStilllegung", prefix = "nsi2", default)]
	pub datum_beginn_voruebergehende_stilllegung: Option<String>, 
	#[yaserde(rename = "DatumWiederaufnahmeBetrieb", prefix = "nsi2", default)]
	pub datum_wiederaufnahme_betrieb: Option<String>, 
	#[yaserde(rename = "EinheitSystemstatus", prefix = "nsi2", default)]
	pub einheit_systemstatus: Option<AnlagenSystemStatusEnum>, 
	#[yaserde(rename = "EinheitBetriebsstatus", prefix = "nsi2", default)]
	pub einheit_betriebsstatus: AnlagenBetriebsStatusEnum, 
	#[yaserde(rename = "BestandsanlageMastrNummer", prefix = "nsi2", default)]
	pub bestandsanlage_mastr_nummer: Option<EinheitMastrNummerId>, 
	#[yaserde(rename = "NichtVorhandenInMigriertenEinheiten", prefix = "nsi2", default)]
	pub nicht_vorhanden_in_migrierten_einheiten: Option<bool>, 
	#[yaserde(rename = "AltAnlagenbetreiberMastrNummer", prefix = "nsi2", default)]
	pub alt_anlagenbetreiber_mastr_nummer: Option<MarktakteurMastrNummerId>, 
	#[yaserde(rename = "DatumDesBetreiberwechsels", prefix = "nsi2", default)]
	pub datum_des_betreiberwechsels: Option<String>, 
	#[yaserde(rename = "DatumRegistrierungDesBetreiberwechsels", prefix = "nsi2", default)]
	pub datum_registrierung_des_betreiberwechsels: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitWindAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitWindAntwort {
	#[yaserde(flatten, default)]
	pub get_einheit_stromerzeugung_basis_antwort: GetEinheitStromerzeugungBasisAntwort, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "NameWindpark", prefix = "nsi2", default)]
	pub name_windpark: String, 
	#[yaserde(rename = "Lage", prefix = "nsi2", default)]
	pub lage: WindLageEnum, 
	#[yaserde(rename = "Seelage", prefix = "nsi2", default)]
	pub seelage: Option<SeelageEnum>, 
	#[yaserde(rename = "ClusterOstsee", prefix = "nsi2", default)]
	pub cluster_ostsee: Option<ClusterOstseeEnum>, 
	#[yaserde(rename = "ClusterNordsee", prefix = "nsi2", default)]
	pub cluster_nordsee: Option<ClusterNordseeEnum>, 
	#[yaserde(rename = "Hersteller", prefix = "nsi2", default)]
	pub hersteller: Option<Katalogwert>, 
	#[yaserde(rename = "Technologie", prefix = "nsi2", default)]
	pub technologie: Option<WindanlageTechnologieEnum>, 
	#[yaserde(rename = "Typenbezeichnung", prefix = "nsi2", default)]
	pub typenbezeichnung: String, 
	#[yaserde(rename = "Nabenhoehe", prefix = "nsi2", default)]
	pub nabenhoehe: f64, 
	#[yaserde(rename = "Rotordurchmesser", prefix = "nsi2", default)]
	pub rotordurchmesser: f64, 
	#[yaserde(rename = "Rotorblattenteisungssystem", prefix = "nsi2", default)]
	pub rotorblattenteisungssystem: Option<bool>, 
	#[yaserde(rename = "AuflageAbschaltungLeistungsbegrenzung", prefix = "nsi2", default)]
	pub auflage_abschaltung_leistungsbegrenzung: bool, 
	#[yaserde(rename = "AuflagenAbschaltungSchallimmissionsschutzNachts", prefix = "nsi2", default)]
	pub auflagen_abschaltung_schallimmissionsschutz_nachts: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSchallimmissionsschutzTagsueber", prefix = "nsi2", default)]
	pub auflagen_abschaltung_schallimmissionsschutz_tagsueber: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSchattenwurf", prefix = "nsi2", default)]
	pub auflagen_abschaltung_schattenwurf: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungTierschutz", prefix = "nsi2", default)]
	pub auflagen_abschaltung_tierschutz: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungEiswurf", prefix = "nsi2", default)]
	pub auflagen_abschaltung_eiswurf: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSonstige", prefix = "nsi2", default)]
	pub auflagen_abschaltung_sonstige: Option<bool>, 
	#[yaserde(rename = "Wassertiefe", prefix = "nsi2", default)]
	pub wassertiefe: f64, 
	#[yaserde(rename = "Kuestenentfernung", prefix = "nsi2", default)]
	pub kuestenentfernung: f64, 
	#[yaserde(rename = "Buergerenergie", prefix = "nsi2", default)]
	pub buergerenergie: Option<bool>, 
	#[yaserde(rename = "Nachtkennzeichen", prefix = "nsi2", default)]
	pub nachtkennzeichen: Option<bool>, 
	#[yaserde(rename = "EegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: Option<EegMastrNummerId>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitSolarAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitSolarAntwort {
	#[yaserde(flatten, default)]
	pub get_einheit_stromerzeugung_basis_antwort: GetEinheitStromerzeugungBasisAntwort, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "zugeordneteWirkleistungWechselrichter", prefix = "nsi2", default)]
	pub zugeordnete_wirkleistung_wechselrichter: Option<f64>, 
	#[yaserde(rename = "AnzahlModule", prefix = "nsi2", default)]
	pub anzahl_module: Option<i32>, 
	#[yaserde(rename = "Lage", prefix = "nsi2", default)]
	pub lage: Option<SolarLageEnum>, 
	#[yaserde(rename = "Leistungsbegrenzung", prefix = "nsi2", default)]
	pub leistungsbegrenzung: Option<SolarLeistungsbegrenzungEnum>, 
	#[yaserde(rename = "EinheitlicheAusrichtungUndNeigungswinkel", prefix = "nsi2", default)]
	pub einheitliche_ausrichtung_und_neigungswinkel: Option<bool>, 
	#[yaserde(rename = "Hauptausrichtung", prefix = "nsi2", default)]
	pub hauptausrichtung: Option<AnlagenartSolarAusrichtungEnum>, 
	#[yaserde(rename = "HauptausrichtungNeigungswinkel", prefix = "nsi2", default)]
	pub hauptausrichtung_neigungswinkel: Option<AnlagenartSolarNeigungswinkelEnum>, 
	#[yaserde(rename = "Nebenausrichtung", prefix = "nsi2", default)]
	pub nebenausrichtung: Option<AnlagenartSolarAusrichtungEnum>, 
	#[yaserde(rename = "NebenausrichtungNeigungswinkel", prefix = "nsi2", default)]
	pub nebenausrichtung_neigungswinkel: Option<AnlagenartSolarNeigungswinkelEnum>, 
	#[yaserde(rename = "InAnspruchGenommeneFlaeche", prefix = "nsi2", default)]
	pub in_anspruch_genommene_flaeche: Option<f64>, 
	#[yaserde(rename = "ArtDerFlaeche", prefix = "nsi2", default)]
	pub art_der_flaeche: Vec<SolarFlaechenartEnum>, 
	#[yaserde(rename = "InAnspruchGenommeneLandwirtschaftlichGenutzteFlaeche", prefix = "nsi2", default)]
	pub in_anspruch_genommene_landwirtschaftlich_genutzte_flaeche: Option<f64>, 
	#[yaserde(rename = "Nutzungsbereich", prefix = "nsi2", default)]
	pub nutzungsbereich: Option<NutzungsbereichEnum>, 
	#[yaserde(rename = "Buergerenergie", prefix = "nsi2", default)]
	pub buergerenergie: Option<bool>, 
	#[yaserde(rename = "Zaehlernummer", prefix = "nsi2", default)]
	pub zaehlernummer: Option<String>, 
	#[yaserde(rename = "EegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: Option<EegMastrNummerId>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "VerknuepfteEinheit",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct VerknuepfteEinheit {
	#[yaserde(rename = "MaStRNummer", prefix = "nsi2", default)]
	pub ma_st_r_nummer: MaStRNummerId, 
	#[yaserde(rename = "Einheittyp", prefix = "nsi2", default)]
	pub einheittyp: EinheitTypEnum, 
	#[yaserde(rename = "Einheitart", prefix = "nsi2", default)]
	pub einheitart: EinheitArtEnum, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "EinheitMitOrtUndPlz",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct EinheitMitOrtUndPlz {
	#[yaserde(rename = "MaStRNummer", prefix = "nsi2", default)]
	pub ma_st_r_nummer: MaStRNummerId, 
	#[yaserde(rename = "Einheittyp", prefix = "nsi2", default)]
	pub einheittyp: EinheitTypEnum, 
	#[yaserde(rename = "Einheitart", prefix = "nsi2", default)]
	pub einheitart: EinheitArtEnum, 
	#[yaserde(rename = "DatumLetzteAktualisierung", prefix = "nsi2", default)]
	pub datum_letzte_aktualisierung: Option<String>, 
	#[yaserde(rename = "Gemeinde", prefix = "nsi2", default)]
	pub gemeinde: Option<String>, 
	#[yaserde(rename = "Gemeindeschluessel", prefix = "nsi2", default)]
	pub gemeindeschluessel: Option<String>, 
	#[yaserde(rename = "Postleitzahl", prefix = "nsi2", default)]
	pub postleitzahl: Option<String>, 
	#[yaserde(rename = "Ort", prefix = "nsi2", default)]
	pub ort: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "Netzbetreiberzuordnung",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct Netzbetreiberzuordnung {
	#[yaserde(rename = "NetzbetreiberMastrNummer", prefix = "nsi2", default)]
	pub netzbetreiber_mastr_nummer: Option<MarktakteurMastrNummerId>, 
	#[yaserde(rename = "NetzbetreiberpruefungsDatum", prefix = "nsi2", default)]
	pub netzbetreiberpruefungs_datum: Option<String>, 
	#[yaserde(rename = "NetzbetreiberpruefungsStatus", prefix = "nsi2", default)]
	pub netzbetreiberpruefungs_status: Option<NetzbetreiberzuordnungsStatusEnum>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "TicketMitStatus",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct TicketMitStatus {
	#[yaserde(rename = "NetzbetreiberpruefungTicketId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_ticket_id: Option<NetzbetreiberpruefungTicketId>, 
	#[yaserde(rename = "Ticketstatus", prefix = "nsi2", default)]
	pub ticketstatus: Option<TicketStatusEnum>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "EinheitMitStatus",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct EinheitMitStatus {
	#[yaserde(rename = "einheitMastrNummer", prefix = "nsi2", default)]
	pub einheit_mastr_nummer: EinheitMastrNummerId, 
	#[yaserde(rename = "Einheitart", prefix = "nsi2", default)]
	pub einheitart: EinheitArtEnum, 
	#[yaserde(rename = "Einheittyp", prefix = "nsi2", default)]
	pub einheittyp: EinheitTypEnum, 
	#[yaserde(rename = "EinheitSystemstatus", prefix = "nsi2", default)]
	pub einheit_systemstatus: Option<AnlagenSystemStatusEnum>, 
	#[yaserde(rename = "EinheitBetriebsstatus", prefix = "nsi2", default)]
	pub einheit_betriebsstatus: Option<AnlagenBetriebsStatusEnum>, 
	#[yaserde(rename = "DatumLetzteAktualisierung", prefix = "nsi2", default)]
	pub datum_letzte_aktualisierung: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "EinheitAenderungZuordnung",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct EinheitAenderungZuordnung {
	#[yaserde(rename = "EinheitMastrNummer", prefix = "nsi2", default)]
	pub einheit_mastr_nummer: EinheitMastrNummerId, 
	#[yaserde(rename = "LokationMastrNummer", prefix = "nsi2", default)]
	pub lokation_mastr_nummer: Option<LokationMastrNummerId>, 
	#[yaserde(rename = "NetzanschlusspunktMastrNummer", prefix = "nsi2", default)]
	pub netzanschlusspunkt_mastr_nummer: Vec<NetzanschlusspunktMastrNummerId>, 
	#[yaserde(rename = "NetzbetreiberMastrNummerAlt", prefix = "nsi2", default)]
	pub netzbetreiber_mastr_nummer_alt: Option<MarktakteurMastrNummerId>, 
	#[yaserde(rename = "NetzbetreiberMastrNummerNeu", prefix = "nsi2", default)]
	pub netzbetreiber_mastr_nummer_neu: MarktakteurMastrNummerId, 
	#[yaserde(rename = "ArtDerAenderung", prefix = "nsi2", default)]
	pub art_der_aenderung: Option<ArtDerAenderungEnum>, 
	#[yaserde(rename = "RegistrierungsdatumNetzbetreiberzuordnungsaenderung", prefix = "nsi2", default)]
	pub registrierungsdatum_netzbetreiberzuordnungsaenderung: Option<String>, 
	#[yaserde(rename = "Netzbetreiberzuordnungsaenderungsdatum", prefix = "nsi2", default)]
	pub netzbetreiberzuordnungsaenderungsdatum: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "MarktakteurMitStatus",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct MarktakteurMitStatus {
	#[yaserde(rename = "MarktakteurMastrNummer", prefix = "nsi2", default)]
	pub marktakteur_mastr_nummer: MarktakteurMastrNummerId, 
	#[yaserde(rename = "MarktakteurStatus", prefix = "nsi2", default)]
	pub marktakteur_status: MarktakteurStatusEnum, 
	#[yaserde(rename = "DatumLetzteAktualisierung", prefix = "nsi2", default)]
	pub datum_letzte_aktualisierung: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "EinheitLetzteAktualisierung",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct EinheitLetzteAktualisierung {
	#[yaserde(rename = "EinheitMastrNummer", prefix = "nsi2", default)]
	pub einheit_mastr_nummer: EinheitMastrNummerId, 
	#[yaserde(rename = "Einheitart", prefix = "nsi2", default)]
	pub einheitart: EinheitArtEnum, 
	#[yaserde(rename = "Einheittyp", prefix = "nsi2", default)]
	pub einheittyp: EinheitTypEnum, 
	#[yaserde(rename = "EinheitSystemstatus", prefix = "nsi2", default)]
	pub einheit_systemstatus: Option<AnlagenSystemStatusEnum>, 
	#[yaserde(rename = "EinheitBetriebsstatus", prefix = "nsi2", default)]
	pub einheit_betriebsstatus: Option<AnlagenBetriebsStatusEnum>, 
	#[yaserde(rename = "EinheitDatumLetzteAktualisierung", prefix = "nsi2", default)]
	pub einheit_datum_letzte_aktualisierung: String, 
	#[yaserde(rename = "Anlagenbetreiber", prefix = "nsi2", default)]
	pub anlagenbetreiber: Option<LetzteAktualisierungAnlagenbetreiber>, 
	#[yaserde(rename = "Lokation", prefix = "nsi2", default)]
	pub lokation: Option<LetzteAktualisierungLokation>, 
	#[yaserde(rename = "EEG", prefix = "nsi2", default)]
	pub eeg: Option<LetzteAktualisierungEEG>, 
	#[yaserde(rename = "KWK", prefix = "nsi2", default)]
	pub kwk: Option<LetzteAktualisierungKWK>, 
	#[yaserde(rename = "Genehmigung", prefix = "nsi2", default)]
	pub genehmigung: Option<LetzteAktualisierungGenehmigung>, 
	#[yaserde(rename = "Speicher", prefix = "nsi2", default)]
	pub speicher: Option<LetzteAktualisierungSpeicher>, 
	#[yaserde(rename = "Netzbetreiberpruefungsprozesse", prefix = "nsi2", default)]
	pub netzbetreiberpruefungsprozesse: Vec<LetzteAktualisierungNetzbetreiberpruefungsprozess>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "EinheitLetzteAktualisierungObjektEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct EinheitLetzteAktualisierungObjektEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitBiomasseAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitBiomasseAntwort {
	#[yaserde(flatten, default)]
	pub get_einheit_stromerzeugung_basis_antwort: GetEinheitStromerzeugungBasisAntwort, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "Hauptbrennstoff", prefix = "nsi2", default)]
	pub hauptbrennstoff: Option<BiomasseBrennstoffEnum>, 
	#[yaserde(rename = "Biomasseart", prefix = "nsi2", default)]
	pub biomasseart: Option<BiomasseArtEnum>, 
	#[yaserde(rename = "Technologie", prefix = "nsi2", default)]
	pub technologie: TechnologieVerbrennungsanlageEnum, 
	#[yaserde(rename = "EegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: Option<EegMastrNummerId>, 
	#[yaserde(rename = "KwkMastrNummer", prefix = "nsi2", default)]
	pub kwk_mastr_nummer: Option<KwkMastrNummerId>, 
	#[yaserde(rename = "ReserveartNachDemEnWG", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg: Option<ReserveartEnum>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserve", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitWasserAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitWasserAntwort {
	#[yaserde(flatten, default)]
	pub get_einheit_stromerzeugung_basis_antwort: GetEinheitStromerzeugungBasisAntwort, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "NameKraftwerk", prefix = "nsi2", default)]
	pub name_kraftwerk: String, 
	#[yaserde(rename = "ArtDerWasserkraftanlage", prefix = "nsi2", default)]
	pub art_der_wasserkraftanlage: Option<ArtDerWasserkraftanlageEnum>, 
	#[yaserde(rename = "MinderungStromerzeugung", prefix = "nsi2", default)]
	pub minderung_stromerzeugung: Option<bool>, 
	#[yaserde(rename = "BestandteilGrenzkraftwerk", prefix = "nsi2", default)]
	pub bestandteil_grenzkraftwerk: Option<bool>, 
	#[yaserde(rename = "NettonennleistungDeutschland", prefix = "nsi2", default)]
	pub nettonennleistung_deutschland: Option<f64>, 
	#[yaserde(rename = "ArtDesZuflusses", prefix = "nsi2", default)]
	pub art_des_zuflusses: Option<ZuflussartEnum>, 
	#[yaserde(rename = "EegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: Option<EegMastrNummerId>, 
	#[yaserde(rename = "ReserveartNachDemEnWG", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg: Option<ReserveartEnum>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserve", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitGeothermieGrubengasDruckentspannungAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitGeothermieGrubengasDruckentspannungAntwort {
	#[yaserde(flatten, default)]
	pub get_einheit_stromerzeugung_basis_antwort: GetEinheitStromerzeugungBasisAntwort, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "Technologie", prefix = "nsi2", default)]
	pub technologie: Option<TechnologieVerbrennungsanlageEnum>, 
	#[yaserde(rename = "EegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: Option<EegMastrNummerId>, 
	#[yaserde(rename = "KwkMastrNummer", prefix = "nsi2", default)]
	pub kwk_mastr_nummer: Option<KwkMastrNummerId>, 
	#[yaserde(rename = "ReserveartNachDemEnWG", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg: Option<ReserveartEnum>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserve", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitVerbrennungAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitVerbrennungAntwort {
	#[yaserde(flatten, default)]
	pub get_einheit_stromerzeugung_basis_antwort: GetEinheitStromerzeugungBasisAntwort, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "NameKraftwerk", prefix = "nsi2", default)]
	pub name_kraftwerk: String, 
	#[yaserde(rename = "NameKraftwerksblock", prefix = "nsi2", default)]
	pub name_kraftwerksblock: Option<String>, 
	#[yaserde(rename = "DatumBaubeginn", prefix = "nsi2", default)]
	pub datum_baubeginn: Option<String>, 
	#[yaserde(rename = "SteigerungNettonennleistungKombibetrieb", prefix = "nsi2", default)]
	pub steigerung_nettonennleistung_kombibetrieb: Option<f64>, 
	#[yaserde(rename = "AnlageIstImKombibetrieb", prefix = "nsi2", default)]
	pub anlage_ist_im_kombibetrieb: Option<bool>, 
	#[yaserde(rename = "MastrNummernKombibetrieb", prefix = "nsi2", default)]
	pub mastr_nummern_kombibetrieb: Option<String>, 
	#[yaserde(rename = "NetzreserveAbDatum", prefix = "nsi2", default)]
	pub netzreserve_ab_datum: Option<String>, 
	#[yaserde(rename = "SicherheitsbereitschaftAbDatum", prefix = "nsi2", default)]
	pub sicherheitsbereitschaft_ab_datum: Option<String>, 
	#[yaserde(rename = "Hauptbrennstoff", prefix = "nsi2", default)]
	pub hauptbrennstoff: VerbrennungBrennstoffEnum, 
	#[yaserde(rename = "WeitererHauptbrennstoff", prefix = "nsi2", default)]
	pub weiterer_hauptbrennstoff: ErweiterterWeitereBrennstoffe, 
	#[yaserde(rename = "WeitereBrennstoffe", prefix = "nsi2", default)]
	pub weitere_brennstoffe: ErweiterteWeitereBrennstoffe, 
	#[yaserde(rename = "VerknuepfteErzeugungseinheiten", prefix = "nsi2", default)]
	pub verknuepfte_erzeugungseinheiten: Vec<VerknuepfteEinheit>, 
	#[yaserde(rename = "BestandteilGrenzkraftwerk", prefix = "nsi2", default)]
	pub bestandteil_grenzkraftwerk: Option<bool>, 
	#[yaserde(rename = "NettonennleistungDeutschland", prefix = "nsi2", default)]
	pub nettonennleistung_deutschland: Option<f64>, 
	#[yaserde(rename = "Notstromaggregat", prefix = "nsi2", default)]
	pub notstromaggregat: Option<bool>, 
	#[yaserde(rename = "Einsatzort", prefix = "nsi2", default)]
	pub einsatzort: Option<EinsatzortEnum>, 
	#[yaserde(rename = "KwkMastrNummer", prefix = "nsi2", default)]
	pub kwk_mastr_nummer: Option<KwkMastrNummerId>, 
	#[yaserde(rename = "Technologie", prefix = "nsi2", default)]
	pub technologie: Option<TechnologieVerbrennungsanlageEnum>, 
	#[yaserde(rename = "AusschliesslicheVerwendungImKombibetrieb", prefix = "nsi2", default)]
	pub ausschliessliche_verwendung_im_kombibetrieb: Option<bool>, 
	#[yaserde(rename = "ReserveartNachDemEnWG", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg: Option<ReserveartEnum>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserve", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitKernkraftAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitKernkraftAntwort {
	#[yaserde(flatten, default)]
	pub get_einheit_stromerzeugung_basis_antwort: GetEinheitStromerzeugungBasisAntwort, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "NameKraftwerk", prefix = "nsi2", default)]
	pub name_kraftwerk: String, 
	#[yaserde(rename = "NameKraftwerksblock", prefix = "nsi2", default)]
	pub name_kraftwerksblock: Option<String>, 
	#[yaserde(rename = "Technologie", prefix = "nsi2", default)]
	pub technologie: Option<TechnologieKernkraftEnum>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitStromSpeicherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitStromSpeicherAntwort {
	#[yaserde(flatten, default)]
	pub get_einheit_stromerzeugung_basis_antwort: GetEinheitStromerzeugungBasisAntwort, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "Einsatzort", prefix = "nsi2", default)]
	pub einsatzort: Option<EinsatzortEnum>, 
	#[yaserde(rename = "AcDcKoppelung", prefix = "nsi2", default)]
	pub ac_dc_koppelung: Option<SystemkopplungEnum>, 
	#[yaserde(rename = "Batterietechnologie", prefix = "nsi2", default)]
	pub batterietechnologie: Option<BatterieTechnologieEnum>, 
	#[yaserde(rename = "LeistungsaufnahmeBeimEinspeichern", prefix = "nsi2", default)]
	pub leistungsaufnahme_beim_einspeichern: Option<f64>, 
	#[yaserde(rename = "PumpbetriebKontinuierlichRegelbar", prefix = "nsi2", default)]
	pub pumpbetrieb_kontinuierlich_regelbar: Option<bool>, 
	#[yaserde(rename = "Pumpspeichertechnologie", prefix = "nsi2", default)]
	pub pumpspeichertechnologie: Option<PumpspeichertechnologieEnum>, 
	#[yaserde(rename = "Notstromaggregat", prefix = "nsi2", default)]
	pub notstromaggregat: Option<bool>, 
	#[yaserde(rename = "BestandteilGrenzkraftwerk", prefix = "nsi2", default)]
	pub bestandteil_grenzkraftwerk: Option<bool>, 
	#[yaserde(rename = "NettonennleistungDeutschland", prefix = "nsi2", default)]
	pub nettonennleistung_deutschland: Option<f64>, 
	#[yaserde(rename = "ZugeordneteWirkleistungWechselrichter", prefix = "nsi2", default)]
	pub zugeordnete_wirkleistung_wechselrichter: Option<f64>, 
	#[yaserde(rename = "NutzbareSpeicherkapazitaet", prefix = "nsi2", default)]
	pub nutzbare_speicherkapazitaet: Option<f64>, 
	#[yaserde(rename = "SpeMastrNummer", prefix = "nsi2", default)]
	pub spe_mastr_nummer: Option<StromSpeicherMastrNummerId>, 
	#[yaserde(rename = "EegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: Option<EegMastrNummerId>, 
	#[yaserde(rename = "EegAnlagentyp", prefix = "nsi2", default)]
	pub eeg_anlagentyp: Option<EinheitTypEnum>, 
	#[yaserde(rename = "Technologie", prefix = "nsi2", default)]
	pub technologie: Option<TechnologieSpeicherEnum>, 
	#[yaserde(rename = "ReserveartNachDemEnWG", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg: Option<ReserveartEnum>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserve", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitStromVerbraucherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitStromVerbraucherAntwort {
	#[yaserde(flatten, default)]
	pub get_einheit_basis_antwort: GetEinheitBasisAntwort, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "Einsatzverantwortlicher", prefix = "nsi2", default)]
	pub einsatzverantwortlicher: Option<String>, 
	#[yaserde(rename = "TechnischesInbetriebnahmedatum", prefix = "nsi2", default)]
	pub technisches_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "NameStromverbrauchseinheit", prefix = "nsi2", default)]
	pub name_stromverbrauchseinheit: Option<String>, 
	#[yaserde(rename = "AnzahlStromverbrauchseinheitenGroesser50Mw", prefix = "nsi2", default)]
	pub anzahl_stromverbrauchseinheiten_groesser_50_mw: Option<i32>, 
	#[yaserde(rename = "GenMastrNummer", prefix = "nsi2", default)]
	pub gen_mastr_nummer: Option<GenMastrNummerId>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitGasErzeugerAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitGasErzeugerAntwort {
	#[yaserde(flatten, default)]
	pub get_einheit_basis_antwort: GetEinheitBasisAntwort, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "NameGaserzeugungseinheit", prefix = "nsi2", default)]
	pub name_gaserzeugungseinheit: String, 
	#[yaserde(rename = "Technologie", prefix = "nsi2", default)]
	pub technologie: Option<TechnologieGasErzeugungEnum>, 
	#[yaserde(rename = "Erzeugungsleistung", prefix = "nsi2", default)]
	pub erzeugungsleistung: f64, 
	#[yaserde(rename = "MastrNummer", prefix = "nsi2", default)]
	pub mastr_nummer: GasSpeicherMastrNummerId, 
	#[yaserde(rename = "GenMastrNummer", prefix = "nsi2", default)]
	pub gen_mastr_nummer: Option<GenMastrNummerId>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitGasSpeicherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitGasSpeicherAntwort {
	#[yaserde(flatten, default)]
	pub get_einheit_basis_antwort: GetEinheitBasisAntwort, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "NameGasspeicher", prefix = "nsi2", default)]
	pub name_gasspeicher: String, 
	#[yaserde(rename = "Speicherart", prefix = "nsi2", default)]
	pub speicherart: GasSpeicherartEnum, 
	#[yaserde(rename = "MaximalNutzbaresArbeitsgasvolumen", prefix = "nsi2", default)]
	pub maximal_nutzbares_arbeitsgasvolumen: Option<f64>, 
	#[yaserde(rename = "MaximaleEinspeicherleistung", prefix = "nsi2", default)]
	pub maximale_einspeicherleistung: Option<f64>, 
	#[yaserde(rename = "MaximaleAusspeicherleistung", prefix = "nsi2", default)]
	pub maximale_ausspeicherleistung: Option<f64>, 
	#[yaserde(rename = "DurchschnittlicherBrennwert", prefix = "nsi2", default)]
	pub durchschnittlicher_brennwert: Option<f64>, 
	#[yaserde(rename = "Weic", prefix = "nsi2", default)]
	pub weic: ErweiterterString, 
	#[yaserde(rename = "GenMastrNummer", prefix = "nsi2", default)]
	pub gen_mastr_nummer: Option<GenMastrNummerId>, 
	#[yaserde(rename = "SpeMastrNummer", prefix = "nsi2", default)]
	pub spe_mastr_nummer: Option<GasSpeicherMastrNummerId>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitGasVerbraucherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitGasVerbraucherAntwort {
	#[yaserde(flatten, default)]
	pub get_einheit_basis_antwort: GetEinheitBasisAntwort, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "NameGasverbrauchsseinheit", prefix = "nsi2", default)]
	pub name_gasverbrauchsseinheit: String, 
	#[yaserde(rename = "TechnischesInbetriebnahmedatum", prefix = "nsi2", default)]
	pub technisches_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "MaximaleGasbezugsleistung", prefix = "nsi2", default)]
	pub maximale_gasbezugsleistung: Option<f64>, 
	#[yaserde(rename = "EinheitDientDerStromerzeugung", prefix = "nsi2", default)]
	pub einheit_dient_der_stromerzeugung: Option<bool>, 
	#[yaserde(rename = "GenMastrNummer", prefix = "nsi2", default)]
	pub gen_mastr_nummer: Option<GenMastrNummerId>, 
	#[yaserde(rename = "VerknuepfteEinheiten", prefix = "nsi2", default)]
	pub verknuepfte_einheiten: Vec<VerknuepfteEinheit>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetEinheitGenehmigungAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetEinheitGenehmigungAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "GenMastrNummer", prefix = "nsi2", default)]
	pub gen_mastr_nummer: GenMastrNummerId, 
	#[yaserde(rename = "DatumLetzteAktualisierung", prefix = "nsi2", default)]
	pub datum_letzte_aktualisierung: Option<String>, 
	#[yaserde(rename = "Art", prefix = "nsi2", default)]
	pub art: GenehmigungsartEnum, 
	#[yaserde(rename = "Datum", prefix = "nsi2", default)]
	pub datum: String, 
	#[yaserde(rename = "Behoerde", prefix = "nsi2", default)]
	pub behoerde: String, 
	#[yaserde(rename = "Aktenzeichen", prefix = "nsi2", default)]
	pub aktenzeichen: Option<String>, 
	#[yaserde(rename = "Frist", prefix = "nsi2", default)]
	pub frist: ErweitertesDate, 
	#[yaserde(rename = "WasserrechtsNummer", prefix = "nsi2", default)]
	pub wasserrechts_nummer: Option<String>, 
	#[yaserde(rename = "WasserrechtAblaufdatum", prefix = "nsi2", default)]
	pub wasserrecht_ablaufdatum: Option<ErweitertesDate>, 
	#[yaserde(rename = "Registrierungsdatum", prefix = "nsi2", default)]
	pub registrierungsdatum: Option<String>, 
	#[yaserde(rename = "VerknuepfteEinheiten", prefix = "nsi2", default)]
	pub verknuepfte_einheiten: Vec<VerknuepfteEinheit>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetStromSpeicherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetStromSpeicherParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "speMastrNummer", prefix = "nsi2", default)]
	pub spe_mastr_nummer: StromSpeicherMastrNummerId, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetStromSpeicherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetStromSpeicherAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "SpeMastrNummer", prefix = "nsi2", default)]
	pub spe_mastr_nummer: StromSpeicherMastrNummerId, 
	#[yaserde(rename = "DatumLetzteAktualisierung", prefix = "nsi2", default)]
	pub datum_letzte_aktualisierung: String, 
	#[yaserde(rename = "Registrierungsdatum", prefix = "nsi2", default)]
	pub registrierungsdatum: String, 
	#[yaserde(rename = "NutzbareSpeicherkapazitaet", prefix = "nsi2", default)]
	pub nutzbare_speicherkapazitaet: Option<f64>, 
	#[yaserde(rename = "VerknuepfteEinheit", prefix = "nsi2", default)]
	pub verknuepfte_einheit: Vec<VerknuepfteEinheit>, 
	#[yaserde(rename = "AnlageBetriebsstatus", prefix = "nsi2", default)]
	pub anlage_betriebsstatus: AnlagenBetriebsStatusEnum, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGasSpeicherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetGasSpeicherParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "speMastrNummer", prefix = "nsi2", default)]
	pub spe_mastr_nummer: GasSpeicherMastrNummerId, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGasSpeicherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetGasSpeicherAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "SpeMastrNummer", prefix = "nsi2", default)]
	pub spe_mastr_nummer: GasSpeicherMastrNummerId, 
	#[yaserde(rename = "DatumLetzteAktualisierung", prefix = "nsi2", default)]
	pub datum_letzte_aktualisierung: String, 
	#[yaserde(rename = "Speichername", prefix = "nsi2", default)]
	pub speichername: String, 
	#[yaserde(rename = "Registrierungsdatum", prefix = "nsi2", default)]
	pub registrierungsdatum: String, 
	#[yaserde(rename = "AnlageBetriebsstatus", prefix = "nsi2", default)]
	pub anlage_betriebsstatus: AnlagenBetriebsStatusEnum, 
	#[yaserde(rename = "VerknuepfteEinheit", prefix = "nsi2", default)]
	pub verknuepfte_einheit: Vec<VerknuepfteEinheit>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegAntwortBasis",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetAnlageEegAntwortBasis {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "Registrierungsdatum", prefix = "nsi2", default)]
	pub registrierungsdatum: String, 
	#[yaserde(rename = "DatumLetzteAktualisierung", prefix = "nsi2", default)]
	pub datum_letzte_aktualisierung: String, 
	#[yaserde(rename = "EegInbetriebnahmedatum", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegWindParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetAnlageEegWindParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "eegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: EegMastrNummerId, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegWindAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetAnlageEegWindAntwort {
	#[yaserde(flatten, default)]
	pub get_anlage_eeg_antwort_basis: GetAnlageEegAntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "EegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: EegMastrNummerId, 
	#[yaserde(rename = "AnlagenkennzifferAnlagenregister", prefix = "nsi2", default)]
	pub anlagenkennziffer_anlagenregister: ErweiterterString, 
	#[yaserde(rename = "AnlagenschluesselEeg", prefix = "nsi2", default)]
	pub anlagenschluessel_eeg: Option<String>, 
	#[yaserde(rename = "PrototypAnlage", prefix = "nsi2", default)]
	pub prototyp_anlage: bool, 
	#[yaserde(rename = "PilotAnlage", prefix = "nsi2", default)]
	pub pilot_anlage: bool, 
	#[yaserde(rename = "InstallierteLeistung", prefix = "nsi2", default)]
	pub installierte_leistung: Option<f64>, 
	#[yaserde(rename = "VerhaeltnisErtragsschaetzungReferenzertrag", prefix = "nsi2", default)]
	pub verhaeltnis_ertragsschaetzung_referenzertrag: ErweitertesDecimal, 
	#[yaserde(rename = "VerhaeltnisReferenzertragErtrag5Jahre", prefix = "nsi2", default)]
	pub verhaeltnis_referenzertrag_ertrag_5_jahre: ErweitertesDecimal, 
	#[yaserde(rename = "VerhaeltnisReferenzertragErtrag10Jahre", prefix = "nsi2", default)]
	pub verhaeltnis_referenzertrag_ertrag_10_jahre: ErweitertesDecimal, 
	#[yaserde(rename = "VerhaeltnisReferenzertragErtrag15Jahre", prefix = "nsi2", default)]
	pub verhaeltnis_referenzertrag_ertrag_15_jahre: ErweitertesDecimal, 
	#[yaserde(rename = "AusschreibungZuschlag", prefix = "nsi2", default)]
	pub ausschreibung_zuschlag: bool, 
	#[yaserde(rename = "Zuschlagsnummer", prefix = "nsi2", default)]
	pub zuschlagsnummer: Option<String>, 
	#[yaserde(rename = "AnlageBetriebsstatus", prefix = "nsi2", default)]
	pub anlage_betriebsstatus: AnlagenBetriebsStatusEnum, 
	#[yaserde(rename = "VerknuepfteEinheit", prefix = "nsi2", default)]
	pub verknuepfte_einheit: Vec<VerknuepfteEinheit>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegSpeicherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetAnlageEegSpeicherParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "eegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: EegMastrNummerId, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegSpeicherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetAnlageEegSpeicherAntwort {
	#[yaserde(flatten, default)]
	pub get_anlage_eeg_antwort_basis: GetAnlageEegAntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "EegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: EegMastrNummerId, 
	#[yaserde(rename = "eegAnlagenschluessel", prefix = "nsi2", default)]
	pub eeg_anlagenschluessel: Option<String>, 
	#[yaserde(rename = "eegZuschlagsnummer", prefix = "nsi2", default)]
	pub eeg_zuschlagsnummer: Option<String>, 
	#[yaserde(rename = "eegAusschreibungZuschlag", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag: Option<bool>, 
	#[yaserde(rename = "VerknuepfteEinheit", prefix = "nsi2", default)]
	pub verknuepfte_einheit: Vec<VerknuepfteEinheit>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegSolarParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetAnlageEegSolarParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "eegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: EegMastrNummerId, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegSolarAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetAnlageEegSolarAntwort {
	#[yaserde(flatten, default)]
	pub get_anlage_eeg_antwort_basis: GetAnlageEegAntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "EegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: EegMastrNummerId, 
	#[yaserde(rename = "InanspruchnahmeZahlungNachEeg", prefix = "nsi2", default)]
	pub inanspruchnahme_zahlung_nach_eeg: Option<bool>, 
	#[yaserde(rename = "AnlagenschluesselEeg", prefix = "nsi2", default)]
	pub anlagenschluessel_eeg: Option<String>, 
	#[yaserde(rename = "AnlagenkennzifferAnlagenregister", prefix = "nsi2", default)]
	pub anlagenkennziffer_anlagenregister: ErweiterterString, 
	#[yaserde(rename = "InstallierteLeistung", prefix = "nsi2", default)]
	pub installierte_leistung: Option<f64>, 
	#[yaserde(rename = "RegistrierungsnummerPvMeldeportal", prefix = "nsi2", default)]
	pub registrierungsnummer_pv_meldeportal: ErweiterterString, 
	#[yaserde(rename = "MieterstromZugeordnet", prefix = "nsi2", default)]
	pub mieterstrom_zugeordnet: Option<bool>, 
	#[yaserde(rename = "MieterstromRegistrierungsdatum", prefix = "nsi2", default)]
	pub mieterstrom_registrierungsdatum: Option<String>, 
	#[yaserde(rename = "MieterstromErsteZuordnungZuschlag", prefix = "nsi2", default)]
	pub mieterstrom_erste_zuordnung_zuschlag: Option<String>, 
	#[yaserde(rename = "AusschreibungZuschlag", prefix = "nsi2", default)]
	pub ausschreibung_zuschlag: Option<bool>, 
	#[yaserde(rename = "ZugeordneteGebotsmenge", prefix = "nsi2", default)]
	pub zugeordnete_gebotsmenge: Option<f64>, 
	#[yaserde(rename = "Zuschlagsnummer", prefix = "nsi2", default)]
	pub zuschlagsnummer: Option<String>, 
	#[yaserde(rename = "AnlageBetriebsstatus", prefix = "nsi2", default)]
	pub anlage_betriebsstatus: AnlagenBetriebsStatusEnum, 
	#[yaserde(rename = "VerknuepfteEinheit", prefix = "nsi2", default)]
	pub verknuepfte_einheit: Vec<VerknuepfteEinheit>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegBiomasseParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetAnlageEegBiomasseParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "eegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: EegMastrNummerId, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegBiomasseAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetAnlageEegBiomasseAntwort {
	#[yaserde(flatten, default)]
	pub get_anlage_eeg_antwort_basis: GetAnlageEegAntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "EegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: EegMastrNummerId, 
	#[yaserde(rename = "AnlagenschluesselEeg", prefix = "nsi2", default)]
	pub anlagenschluessel_eeg: Option<String>, 
	#[yaserde(rename = "AnlagenkennzifferAnlagenregister", prefix = "nsi2", default)]
	pub anlagenkennziffer_anlagenregister: ErweiterterString, 
	#[yaserde(rename = "InstallierteLeistung", prefix = "nsi2", default)]
	pub installierte_leistung: Option<f64>, 
	#[yaserde(rename = "AusschliesslicheVerwendungBiomasse", prefix = "nsi2", default)]
	pub ausschliessliche_verwendung_biomasse: Option<bool>, 
	#[yaserde(rename = "AusschreibungZuschlag", prefix = "nsi2", default)]
	pub ausschreibung_zuschlag: bool, 
	#[yaserde(rename = "Zuschlagsnummer", prefix = "nsi2", default)]
	pub zuschlagsnummer: Option<String>, 
	#[yaserde(rename = "BiogasInanspruchnahmeFlexiPraemie", prefix = "nsi2", default)]
	pub biogas_inanspruchnahme_flexi_praemie: Option<bool>, 
	#[yaserde(rename = "BiogasDatumInanspruchnahmeFlexiPraemie", prefix = "nsi2", default)]
	pub biogas_datum_inanspruchnahme_flexi_praemie: Option<String>, 
	#[yaserde(rename = "BiogasLeistungserhoehung", prefix = "nsi2", default)]
	pub biogas_leistungserhoehung: Option<bool>, 
	#[yaserde(rename = "BiogasDatumLeistungserhoehung", prefix = "nsi2", default)]
	pub biogas_datum_leistungserhoehung: Option<String>, 
	#[yaserde(rename = "BiogasUmfangLeistungserhoehung", prefix = "nsi2", default)]
	pub biogas_umfang_leistungserhoehung: Option<f64>, 
	#[yaserde(rename = "BiogasGaserzeugungskapazitaet", prefix = "nsi2", default)]
	pub biogas_gaserzeugungskapazitaet: ErweitertesDecimal, 
	#[yaserde(rename = "Hoechstbemessungsleistung", prefix = "nsi2", default)]
	pub hoechstbemessungsleistung: Option<f64>, 
	#[yaserde(rename = "BiomethanErstmaligerEinsatz", prefix = "nsi2", default)]
	pub biomethan_erstmaliger_einsatz: ErweitertesDate, 
	#[yaserde(rename = "AnlageBetriebsstatus", prefix = "nsi2", default)]
	pub anlage_betriebsstatus: AnlagenBetriebsStatusEnum, 
	#[yaserde(rename = "VerknuepfteEinheit", prefix = "nsi2", default)]
	pub verknuepfte_einheit: Vec<VerknuepfteEinheit>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegWasserParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetAnlageEegWasserParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "eegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: EegMastrNummerId, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegWasserAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetAnlageEegWasserAntwort {
	#[yaserde(flatten, default)]
	pub get_anlage_eeg_antwort_basis: GetAnlageEegAntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "EegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: EegMastrNummerId, 
	#[yaserde(rename = "AnlagenschluesselEeg", prefix = "nsi2", default)]
	pub anlagenschluessel_eeg: Option<String>, 
	#[yaserde(rename = "AnlagenkennzifferAnlagenregister", prefix = "nsi2", default)]
	pub anlagenkennziffer_anlagenregister: ErweiterterString, 
	#[yaserde(rename = "InstallierteLeistung", prefix = "nsi2", default)]
	pub installierte_leistung: Option<f64>, 
	#[yaserde(rename = "AnlageBetriebsstatus", prefix = "nsi2", default)]
	pub anlage_betriebsstatus: AnlagenBetriebsStatusEnum, 
	#[yaserde(rename = "Ertuechtigung", prefix = "nsi2", default)]
	pub ertuechtigung: Vec<Ertuechtigung>, 
	#[yaserde(rename = "VerknuepfteEinheit", prefix = "nsi2", default)]
	pub verknuepfte_einheit: Vec<VerknuepfteEinheit>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegGeothermieGrubengasDruckentspannungParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetAnlageEegGeothermieGrubengasDruckentspannungParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "eegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: EegMastrNummerId, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageEegGeothermieGrubengasDruckentspannungAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetAnlageEegGeothermieGrubengasDruckentspannungAntwort {
	#[yaserde(flatten, default)]
	pub get_anlage_eeg_antwort_basis: GetAnlageEegAntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "EegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: EegMastrNummerId, 
	#[yaserde(rename = "AnlagenschluesselEeg", prefix = "nsi2", default)]
	pub anlagenschluessel_eeg: Option<String>, 
	#[yaserde(rename = "AnlagenkennzifferAnlagenregister", prefix = "nsi2", default)]
	pub anlagenkennziffer_anlagenregister: ErweiterterString, 
	#[yaserde(rename = "InstallierteLeistung", prefix = "nsi2", default)]
	pub installierte_leistung: Option<f64>, 
	#[yaserde(rename = "AnlageBetriebsstatus", prefix = "nsi2", default)]
	pub anlage_betriebsstatus: AnlagenBetriebsStatusEnum, 
	#[yaserde(rename = "VerknuepfteEinheit", prefix = "nsi2", default)]
	pub verknuepfte_einheit: Vec<VerknuepfteEinheit>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageKwkParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetAnlageKwkParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "kwkMastrNummer", prefix = "nsi2", default)]
	pub kwk_mastr_nummer: KwkMastrNummerId, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetAnlageKwkAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetAnlageKwkAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "KwkMastrNummer", prefix = "nsi2", default)]
	pub kwk_mastr_nummer: KwkMastrNummerId, 
	#[yaserde(rename = "AusschreibungZuschlag", prefix = "nsi2", default)]
	pub ausschreibung_zuschlag: Option<bool>, 
	#[yaserde(rename = "Zuschlagnummer", prefix = "nsi2", default)]
	pub zuschlagnummer: Option<String>, 
	#[yaserde(rename = "DatumLetzteAktualisierung", prefix = "nsi2", default)]
	pub datum_letzte_aktualisierung: Option<String>, 
	#[yaserde(rename = "Inbetriebnahmedatum", prefix = "nsi2", default)]
	pub inbetriebnahmedatum: String, 
	#[yaserde(rename = "Registrierungsdatum", prefix = "nsi2", default)]
	pub registrierungsdatum: String, 
	#[yaserde(rename = "ThermischeNutzleistung", prefix = "nsi2", default)]
	pub thermische_nutzleistung: Option<f64>, 
	#[yaserde(rename = "ElektrischeKwkLeistung", prefix = "nsi2", default)]
	pub elektrische_kwk_leistung: Option<f64>, 
	#[yaserde(rename = "VerknuepfteEinheiten", prefix = "nsi2", default)]
	pub verknuepfte_einheiten: Vec<VerknuepfteEinheit>, 
	#[yaserde(rename = "AnlageBetriebsstatus", prefix = "nsi2", default)]
	pub anlage_betriebsstatus: AnlagenBetriebsStatusEnum, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeAlleLokationenParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeAlleLokationenParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "startAb", prefix = "nsi2", default)]
	pub start_ab: Option<i32>, 
	#[yaserde(rename = "datumAb", prefix = "nsi2", default)]
	pub datum_ab: Option<String>, 
	#[yaserde(rename = "limit", prefix = "nsi2", default)]
	pub limit: Option<i32>, 
	#[yaserde(rename = "mastrNummer", prefix = "nsi2", default)]
	pub mastr_nummer: Vec<LokationMastrNummerId>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeAlleLokationenAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeAlleLokationenAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "Lokationen", prefix = "nsi2", default)]
	pub lokationen: Vec<Lokation>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeFreigegebeneLokationenParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeFreigegebeneLokationenParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "startAb", prefix = "nsi2", default)]
	pub start_ab: Option<i32>, 
	#[yaserde(rename = "datumAb", prefix = "nsi2", default)]
	pub datum_ab: Option<String>, 
	#[yaserde(rename = "limit", prefix = "nsi2", default)]
	pub limit: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeFreigegebeneLokationenAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeFreigegebeneLokationenAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "Lokationen", prefix = "nsi2", default)]
	pub lokationen: Vec<Lokation>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokationErzeugerVerbraucherBasisParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetLokationErzeugerVerbraucherBasisParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "lokationMastrNummer", prefix = "nsi2", default)]
	pub lokation_mastr_nummer: LokationMastrNummerId, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokationStromErzeugerParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetLokationStromErzeugerParameter {
	#[yaserde(flatten, default)]
	pub get_lokation_erzeuger_verbraucher_basis_parameter: GetLokationErzeugerVerbraucherBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokationStromVerbraucherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetLokationStromVerbraucherParameter {
	#[yaserde(flatten, default)]
	pub get_lokation_erzeuger_verbraucher_basis_parameter: GetLokationErzeugerVerbraucherBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokationGasErzeugerParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetLokationGasErzeugerParameter {
	#[yaserde(flatten, default)]
	pub get_lokation_erzeuger_verbraucher_basis_parameter: GetLokationErzeugerVerbraucherBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokationGasVerbraucherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetLokationGasVerbraucherParameter {
	#[yaserde(flatten, default)]
	pub get_lokation_erzeuger_verbraucher_basis_parameter: GetLokationErzeugerVerbraucherBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokationErzeugerVerbraucherBasisAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetLokationErzeugerVerbraucherBasisAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "MastrNummer", prefix = "nsi2", default)]
	pub mastr_nummer: LokationMastrNummerId, 
	#[yaserde(rename = "NameDerTechnischenLokation", prefix = "nsi2", default)]
	pub name_der_technischen_lokation: Option<String>, 
	#[yaserde(rename = "VerknuepfteEinheiten", prefix = "nsi2", default)]
	pub verknuepfte_einheiten: Vec<VerknuepfteEinheit>, 
	#[yaserde(rename = "NetzanschlusspunktMastrNummer", prefix = "nsi2", default)]
	pub netzanschlusspunkt_mastr_nummer: Vec<NetzanschlusspunktMastrNummerId>, 
	#[yaserde(rename = "NetzanschlusspunktBezeichnung", prefix = "nsi2", default)]
	pub netzanschlusspunkt_bezeichnung: Vec<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokationStromErzeugerAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetLokationStromErzeugerAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "DatumLetzteAktualisierung", prefix = "nsi2", default)]
	pub datum_letzte_aktualisierung: String, 
	#[yaserde(rename = "MastrNummer", prefix = "nsi2", default)]
	pub mastr_nummer: LokationMastrNummerId, 
	#[yaserde(rename = "NameDerTechnischenLokation", prefix = "nsi2", default)]
	pub name_der_technischen_lokation: Option<String>, 
	#[yaserde(rename = "VerknuepfteEinheiten", prefix = "nsi2", default)]
	pub verknuepfte_einheiten: Vec<VerknuepfteEinheit>, 
	#[yaserde(rename = "Netzanschlusspunkte", prefix = "nsi2", default)]
	pub netzanschlusspunkte: Vec<NetzanschlusspunktStrom>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokationStromVerbraucherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetLokationStromVerbraucherAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "DatumLetzteAktualisierung", prefix = "nsi2", default)]
	pub datum_letzte_aktualisierung: String, 
	#[yaserde(rename = "MastrNummer", prefix = "nsi2", default)]
	pub mastr_nummer: LokationMastrNummerId, 
	#[yaserde(rename = "NameDerTechnischenLokation", prefix = "nsi2", default)]
	pub name_der_technischen_lokation: Option<String>, 
	#[yaserde(rename = "VerknuepfteEinheiten", prefix = "nsi2", default)]
	pub verknuepfte_einheiten: Vec<VerknuepfteEinheit>, 
	#[yaserde(rename = "Netzanschlusspunkte", prefix = "nsi2", default)]
	pub netzanschlusspunkte: Vec<NetzanschlusspunktStrom>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokationGasErzeugerAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetLokationGasErzeugerAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "DatumLetzteAktualisierung", prefix = "nsi2", default)]
	pub datum_letzte_aktualisierung: String, 
	#[yaserde(rename = "MastrNummer", prefix = "nsi2", default)]
	pub mastr_nummer: LokationMastrNummerId, 
	#[yaserde(rename = "NameDerTechnischenLokation", prefix = "nsi2", default)]
	pub name_der_technischen_lokation: Option<String>, 
	#[yaserde(rename = "VerknuepfteEinheiten", prefix = "nsi2", default)]
	pub verknuepfte_einheiten: Vec<VerknuepfteEinheit>, 
	#[yaserde(rename = "Netzanschlusspunkte", prefix = "nsi2", default)]
	pub netzanschlusspunkte: Vec<NetzanschlusspunktGas>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetLokationGasVerbraucherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetLokationGasVerbraucherAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "DatumLetzteAktualisierung", prefix = "nsi2", default)]
	pub datum_letzte_aktualisierung: String, 
	#[yaserde(rename = "MastrNummer", prefix = "nsi2", default)]
	pub mastr_nummer: LokationMastrNummerId, 
	#[yaserde(rename = "NameDerTechnischenLokation", prefix = "nsi2", default)]
	pub name_der_technischen_lokation: Option<String>, 
	#[yaserde(rename = "VerknuepfteEinheiten", prefix = "nsi2", default)]
	pub verknuepfte_einheiten: Vec<VerknuepfteEinheit>, 
	#[yaserde(rename = "Netzanschlusspunkte", prefix = "nsi2", default)]
	pub netzanschlusspunkte: Vec<NetzanschlusspunktGas>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeMeineNetzbetreiberpruefungenParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeMeineNetzbetreiberpruefungenParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "startAb", prefix = "nsi2", default)]
	pub start_ab: Option<i32>, 
	#[yaserde(rename = "datumAb", prefix = "nsi2", default)]
	pub datum_ab: Option<String>, 
	#[yaserde(rename = "limit", prefix = "nsi2", default)]
	pub limit: Option<i32>, 
	#[yaserde(rename = "abPruefungsstartTermin", prefix = "nsi2", default)]
	pub ab_pruefungsstart_termin: Option<String>, 
	#[yaserde(rename = "netzbetreiberpruefungIds", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_ids: Vec<i32>, 
	#[yaserde(rename = "einheitMastrNummer", prefix = "nsi2", default)]
	pub einheit_mastr_nummer: Option<EinheitMastrNummerId>, 
	#[yaserde(rename = "kategorie", prefix = "nsi2", default)]
	pub kategorie: Option<NetzbetreiberpruefungsKategorieEnum>, 
	#[yaserde(rename = "AbgeschlosseneTicketprozesseEinschliessen", prefix = "nsi2", default)]
	pub abgeschlossene_ticketprozesse_einschliessen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeMeineNetzbetreiberpruefungenAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeMeineNetzbetreiberpruefungenAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "ListeNetzbetreiberpruefungen", prefix = "nsi2", default)]
	pub liste_netzbetreiberpruefungen: Vec<Netzbetreiberpruefung>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "ErneuteNetzbetreiberpruefungStartenParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct ErneuteNetzbetreiberpruefungStartenParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "einheitMastrNummer", prefix = "nsi2", default)]
	pub einheit_mastr_nummer: EinheitMastrNummerId, 
	#[yaserde(rename = "neustartGrund", prefix = "nsi2", default)]
	pub neustart_grund: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "ErneuteNetzbetreiberpruefungStartenAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct ErneuteNetzbetreiberpruefungStartenAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "neueNetzbetreiberpruefungId", prefix = "nsi2", default)]
	pub neue_netzbetreiberpruefung_id: i32, 
	#[yaserde(rename = "alteNetzbetreiberpruefungId", prefix = "nsi2", default)]
	pub alte_netzbetreiberpruefung_id: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzanschlusspunktParameterBasis",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetNetzanschlusspunktParameterBasis {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "letzteAenderung", prefix = "nsi2", default)]
	pub letzte_aenderung: Option<String>, 
	#[yaserde(rename = "lokationMastrNummer", prefix = "nsi2", default)]
	pub lokation_mastr_nummer: LokationMastrNummerId, 
	#[yaserde(rename = "nameDerTechnischenLokation", prefix = "nsi2", default)]
	pub name_der_technischen_lokation: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzanschlusspunktStromParameterBasis",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetNetzanschlusspunktStromParameterBasis {
	#[yaserde(flatten, default)]
	pub set_netzanschlusspunkt_parameter_basis: SetNetzanschlusspunktParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "netzanschlusspunkt", prefix = "nsi2", default)]
	pub netzanschlusspunkt: NetzanschlusspunktStrom, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzanschlusspunktStromErzeugerParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetNetzanschlusspunktStromErzeugerParameter {
	#[yaserde(flatten, default)]
	pub set_netzanschlusspunkt_strom_parameter_basis: SetNetzanschlusspunktStromParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzanschlusspunktStromErzeugerAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetNetzanschlusspunktStromErzeugerAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "netzanschlusspunktMastrNummer", prefix = "nsi2", default)]
	pub netzanschlusspunkt_mastr_nummer: NetzanschlusspunktMastrNummerId, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzanschlusspunktStromVerbraucherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetNetzanschlusspunktStromVerbraucherParameter {
	#[yaserde(flatten, default)]
	pub set_netzanschlusspunkt_strom_parameter_basis: SetNetzanschlusspunktStromParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzanschlusspunktStromVerbraucherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetNetzanschlusspunktStromVerbraucherAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "netzanschlusspunktMastrNummer", prefix = "nsi2", default)]
	pub netzanschlusspunkt_mastr_nummer: NetzanschlusspunktMastrNummerId, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzanschlusspunktGasParameterBasis",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetNetzanschlusspunktGasParameterBasis {
	#[yaserde(flatten, default)]
	pub set_netzanschlusspunkt_parameter_basis: SetNetzanschlusspunktParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "netzanschlusspunkt", prefix = "nsi2", default)]
	pub netzanschlusspunkt: NetzanschlusspunktGas, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzanschlusspunktGasErzeugerParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetNetzanschlusspunktGasErzeugerParameter {
	#[yaserde(flatten, default)]
	pub set_netzanschlusspunkt_gas_parameter_basis: SetNetzanschlusspunktGasParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzanschlusspunktGasErzeugerAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetNetzanschlusspunktGasErzeugerAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "netzanschlusspunktMastrNummer", prefix = "nsi2", default)]
	pub netzanschlusspunkt_mastr_nummer: NetzanschlusspunktMastrNummerId, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzanschlusspunktGasVerbraucherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetNetzanschlusspunktGasVerbraucherParameter {
	#[yaserde(flatten, default)]
	pub set_netzanschlusspunkt_gas_parameter_basis: SetNetzanschlusspunktGasParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzanschlusspunktGasVerbraucherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetNetzanschlusspunktGasVerbraucherAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "netzanschlusspunktMastrNummer", prefix = "nsi2", default)]
	pub netzanschlusspunkt_mastr_nummer: NetzanschlusspunktMastrNummerId, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "DeleteNetzanschlusspunktParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct DeleteNetzanschlusspunktParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "letzteAenderung", prefix = "nsi2", default)]
	pub letzte_aenderung: String, 
	#[yaserde(rename = "netzanschlusspunktMastrNummer", prefix = "nsi2", default)]
	pub netzanschlusspunkt_mastr_nummer: NetzanschlusspunktMastrNummerId, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "DeleteNetzanschlusspunktAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct DeleteNetzanschlusspunktAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeMeineNetzanschlusspunkteParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeMeineNetzanschlusspunkteParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "startAb", prefix = "nsi2", default)]
	pub start_ab: Option<i32>, 
	#[yaserde(rename = "datumAb", prefix = "nsi2", default)]
	pub datum_ab: Option<String>, 
	#[yaserde(rename = "limit", prefix = "nsi2", default)]
	pub limit: Option<i32>, 
	#[yaserde(rename = "Einheitart", prefix = "nsi2", default)]
	pub einheitart: Option<EinheitArtEnum>, 
	#[yaserde(rename = "Einheittyp", prefix = "nsi2", default)]
	pub einheittyp: Option<EinheitTypEnum>, 
	#[yaserde(rename = "Regelzone", prefix = "nsi2", default)]
	pub regelzone: Option<RegelzoneEnum>, 
	#[yaserde(rename = "einheitMastrNummer", prefix = "nsi2", default)]
	pub einheit_mastr_nummer: Vec<EinheitMastrNummerId>, 
	#[yaserde(rename = "NetzanschlusspunktMastrNummer", prefix = "nsi2", default)]
	pub netzanschlusspunkt_mastr_nummer: Vec<NetzanschlusspunktMastrNummerId>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeMeineNetzanschlusspunkteAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeMeineNetzanschlusspunkteAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "ListeNetzanschlusspunkte", prefix = "nsi2", default)]
	pub liste_netzanschlusspunkte: Vec<NetzanschlusspunktStromUndGas>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeAlleNetzanschlusspunkteParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeAlleNetzanschlusspunkteParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "startAb", prefix = "nsi2", default)]
	pub start_ab: Option<i32>, 
	#[yaserde(rename = "datumAb", prefix = "nsi2", default)]
	pub datum_ab: Option<String>, 
	#[yaserde(rename = "limit", prefix = "nsi2", default)]
	pub limit: Option<i32>, 
	#[yaserde(rename = "Einheitart", prefix = "nsi2", default)]
	pub einheitart: Option<EinheitArtEnum>, 
	#[yaserde(rename = "Einheittyp", prefix = "nsi2", default)]
	pub einheittyp: Option<EinheitTypEnum>, 
	#[yaserde(rename = "Regelzone", prefix = "nsi2", default)]
	pub regelzone: Option<RegelzoneEnum>, 
	#[yaserde(rename = "einheitMastrNummer", prefix = "nsi2", default)]
	pub einheit_mastr_nummer: Vec<EinheitMastrNummerId>, 
	#[yaserde(rename = "NetzanschlusspunktMastrNummer", prefix = "nsi2", default)]
	pub netzanschlusspunkt_mastr_nummer: Vec<NetzanschlusspunktMastrNummerId>, 
	#[yaserde(rename = "LokationMastrNummer", prefix = "nsi2", default)]
	pub lokation_mastr_nummer: Vec<LokationMastrNummerId>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetListeAlleNetzanschlusspunkteAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetListeAlleNetzanschlusspunkteAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "ListeNetzanschlusspunkte", prefix = "nsi2", default)]
	pub liste_netzanschlusspunkte: Vec<NetzanschlusspunktStromUndGas>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "DeleteKorrekturvorschlagParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct DeleteKorrekturvorschlagParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "letzteAenderung", prefix = "nsi2", default)]
	pub letzte_aenderung: String, 
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "DeleteKorrekturvorschlagAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct DeleteKorrekturvorschlagAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "VerschiebeEinheitZuAndererLokationParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct VerschiebeEinheitZuAndererLokationParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "letzteAenderungUrsprungEinheit", prefix = "nsi2", default)]
	pub letzte_aenderung_ursprung_einheit: Option<String>, 
	#[yaserde(rename = "letzteAenderungZielLoktion", prefix = "nsi2", default)]
	pub letzte_aenderung_ziel_loktion: Option<String>, 
	#[yaserde(rename = "letzteAenderungZielEinheit", prefix = "nsi2", default)]
	pub letzte_aenderung_ziel_einheit: Option<String>, 
	#[yaserde(rename = "ursprungEinheitMastrNummer", prefix = "nsi2", default)]
	pub ursprung_einheit_mastr_nummer: EinheitMastrNummerId, 
	#[yaserde(rename = "zielLokationMastrNummer", prefix = "nsi2", default)]
	pub ziel_lokation_mastr_nummer: LokationMastrNummerId, 
	#[yaserde(rename = "zielEinheitMastrNummer", prefix = "nsi2", default)]
	pub ziel_einheit_mastr_nummer: EinheitMastrNummerId, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "VerschiebeEinheitZuAndererLokationAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct VerschiebeEinheitZuAndererLokationAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "VerschiebeEinheitZuNeuerLokationParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct VerschiebeEinheitZuNeuerLokationParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "letzteAenderungUrsprungLokation", prefix = "nsi2", default)]
	pub letzte_aenderung_ursprung_lokation: Option<String>, 
	#[yaserde(rename = "ursprungEinheitMastrNummer", prefix = "nsi2", default)]
	pub ursprung_einheit_mastr_nummer: EinheitMastrNummerId, 
	#[yaserde(rename = "neueLokationName", prefix = "nsi2", default)]
	pub neue_lokation_name: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "VerschiebeEinheitZuNeuerLokationAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct VerschiebeEinheitZuNeuerLokationAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzbetreiberpruefungAbgeschlossenParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetNetzbetreiberpruefungAbgeschlossenParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: NetzbetreiberpruefungId, 
	#[yaserde(rename = "letzteAenderung", prefix = "nsi2", default)]
	pub letzte_aenderung: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzbetreiberpruefungAbgeschlossenAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetNetzbetreiberpruefungAbgeschlossenAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetDatenkorrekturErforderlichParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetDatenkorrekturErforderlichParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: NetzbetreiberpruefungId, 
	#[yaserde(rename = "letzteAenderung", prefix = "nsi2", default)]
	pub letzte_aenderung: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetDatenkorrekturErforderlichAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetDatenkorrekturErforderlichAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzbetreiberNichtZustaendigParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetNetzbetreiberNichtZustaendigParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: NetzbetreiberpruefungId, 
	#[yaserde(rename = "letzteAenderung", prefix = "nsi2", default)]
	pub letzte_aenderung: String, 
	#[yaserde(rename = "NachrichtAnDieBundesnetzagentur", prefix = "nsi2", default)]
	pub nachricht_an_die_bundesnetzagentur: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetNetzbetreiberNichtZustaendigAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetNetzbetreiberNichtZustaendigAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKlaerungErforderlichParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKlaerungErforderlichParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: NetzbetreiberpruefungId, 
	#[yaserde(rename = "letzteAenderung", prefix = "nsi2", default)]
	pub letzte_aenderung: String, 
	#[yaserde(rename = "beschreibung", prefix = "nsi2", default)]
	pub beschreibung: String, 
	#[yaserde(rename = "klaerungsGrund", prefix = "nsi2", default)]
	pub klaerungs_grund: KlaerungsGrundEnum, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKlaerungErforderlichAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKlaerungErforderlichAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturBetriebsstatusParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturBetriebsstatusParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: NetzbetreiberpruefungId, 
	#[yaserde(rename = "letzteAenderung", prefix = "nsi2", default)]
	pub letzte_aenderung: String, 
	#[yaserde(rename = "beschreibung", prefix = "nsi2", default)]
	pub beschreibung: String, 
	#[yaserde(rename = "korrekturBetriebsStatus", prefix = "nsi2", default)]
	pub korrektur_betriebs_status: KorrekturBetriebsStatusEnum, 
	#[yaserde(rename = "geplantesInbetriebnahmedatum", prefix = "nsi2", default)]
	pub geplantes_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "datumEndgueltigeStilllegung", prefix = "nsi2", default)]
	pub datum_endgueltige_stilllegung: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturBetriebsstatusAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturBetriebsstatusAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagBetriebsstatusParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagBetriebsstatusParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagBetriebsstatusAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagBetriebsstatusAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: i32, 
	#[yaserde(rename = "beschreibung", prefix = "nsi2", default)]
	pub beschreibung: Option<String>, 
	#[yaserde(rename = "korrekturBetriebsStatus", prefix = "nsi2", default)]
	pub korrektur_betriebs_status: Option<KorrekturBetriebsStatusEnum>, 
	#[yaserde(rename = "korrekturBetriebsStatusZuPruefen", prefix = "nsi2", default)]
	pub korrektur_betriebs_status_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "geplantesInbetriebnahmedatum", prefix = "nsi2", default)]
	pub geplantes_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "geplantesInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub geplantes_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "datumEndgueltigeStilllegung", prefix = "nsi2", default)]
	pub datum_endgueltige_stilllegung: Option<String>, 
	#[yaserde(rename = "datumEndgueltigeStilllegungZuPruefen", prefix = "nsi2", default)]
	pub datum_endgueltige_stilllegung_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetWiedervorlageVorschlagBetriebsstatusParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetWiedervorlageVorschlagBetriebsstatusParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetWiedervorlageVorschlagBetriebsstatusAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetWiedervorlageVorschlagBetriebsstatusAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: i32, 
	#[yaserde(rename = "beschreibung", prefix = "nsi2", default)]
	pub beschreibung: Option<String>, 
	#[yaserde(rename = "korrekturBetriebsStatus", prefix = "nsi2", default)]
	pub korrektur_betriebs_status: Option<KorrekturBetriebsStatusEnum>, 
	#[yaserde(rename = "geplantesInbetriebnahmedatum", prefix = "nsi2", default)]
	pub geplantes_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "datumEndgueltigeStilllegung", prefix = "nsi2", default)]
	pub datum_endgueltige_stilllegung: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturBetriebsstatusAbgeschlossenParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturBetriebsstatusAbgeschlossenParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: NetzbetreiberpruefungId, 
	#[yaserde(rename = "letzteAenderung", prefix = "nsi2", default)]
	pub letzte_aenderung: String, 
	#[yaserde(rename = "beschreibung", prefix = "nsi2", default)]
	pub beschreibung: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturBetriebsstatusAbgeschlossenAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturBetriebsstatusAbgeschlossenAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetEegAnlagenschluesselParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetEegAnlagenschluesselParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "eegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: EegMastrNummerId, 
	#[yaserde(rename = "eegAnlagenschluessel", prefix = "nsi2", default)]
	pub eeg_anlagenschluessel: ErweiterterString, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetEegAnlagenschluesselAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetEegAnlagenschluesselAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetStilllegungAbgelehntParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetStilllegungAbgelehntParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: NetzbetreiberpruefungId, 
	#[yaserde(rename = "ablehnungsGrund", prefix = "nsi2", default)]
	pub ablehnungs_grund: String, 
	#[yaserde(rename = "letzteAenderung", prefix = "nsi2", default)]
	pub letzte_aenderung: String, 
	#[yaserde(rename = "beschreibung", prefix = "nsi2", default)]
	pub beschreibung: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetStilllegungAbgelehntAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetStilllegungAbgelehntAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetAntragAufFristverlaengerungParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetAntragAufFristverlaengerungParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "NetzbetreiberpruefungTicketId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_ticket_id: NetzbetreiberpruefungTicketId, 
	#[yaserde(rename = "FristverlaengerungGrund", prefix = "nsi2", default)]
	pub fristverlaengerung_grund: FristverlaengerungGrundEnum, 
	#[yaserde(rename = "FristverlaengerungErlaeuterung", prefix = "nsi2", default)]
	pub fristverlaengerung_erlaeuterung: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetAntragAufFristverlaengerungAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetAntragAufFristverlaengerungAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "RuecknahmeFristverlaengerungParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct RuecknahmeFristverlaengerungParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "NetzbetreiberpruefungTicketId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_ticket_id: NetzbetreiberpruefungTicketId, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "RuecknahmeFristverlaengerungAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct RuecknahmeFristverlaengerungAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagParameterBasis",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagParameterBasis {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: i32, 
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: Option<i32>, 
	#[yaserde(rename = "beschreibung", prefix = "nsi2", default)]
	pub beschreibung: Option<String>, 
	#[yaserde(rename = "letzteAenderung", prefix = "nsi2", default)]
	pub letzte_aenderung: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitParameterBasis",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitParameterBasis {
	#[yaserde(flatten, default)]
	pub set_korrektur_vorschlag_parameter_basis: SetKorrekturVorschlagParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "einheitMastrNummer", prefix = "nsi2", default)]
	pub einheit_mastr_nummer: Option<EinheitMastrNummerId>, 
	#[yaserde(rename = "postleitzahl", prefix = "nsi2", default)]
	pub postleitzahl: Option<String>, 
	#[yaserde(rename = "postleitzahlZuPruefen", prefix = "nsi2", default)]
	pub postleitzahl_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "gemarkung", prefix = "nsi2", default)]
	pub gemarkung: Option<String>, 
	#[yaserde(rename = "gemarkungZuPruefen", prefix = "nsi2", default)]
	pub gemarkung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "flurFlurstuecknummern", prefix = "nsi2", default)]
	pub flur_flurstuecknummern: Option<String>, 
	#[yaserde(rename = "flurFlurstuecknummernZuPruefen", prefix = "nsi2", default)]
	pub flur_flurstuecknummern_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "strasse", prefix = "nsi2", default)]
	pub strasse: Option<String>, 
	#[yaserde(rename = "strasseZuPruefen", prefix = "nsi2", default)]
	pub strasse_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "strasseNichtGefunden", prefix = "nsi2", default)]
	pub strasse_nicht_gefunden: Option<bool>, 
	#[yaserde(rename = "hausnummer", prefix = "nsi2", default)]
	pub hausnummer: Option<ErweiterterString>, 
	#[yaserde(rename = "hausnummerNichtGefunden", prefix = "nsi2", default)]
	pub hausnummer_nicht_gefunden: Option<bool>, 
	#[yaserde(rename = "hausnummerZuPruefen", prefix = "nsi2", default)]
	pub hausnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "adresszusatz", prefix = "nsi2", default)]
	pub adresszusatz: Option<String>, 
	#[yaserde(rename = "adresszusatzZuPruefen", prefix = "nsi2", default)]
	pub adresszusatz_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ort", prefix = "nsi2", default)]
	pub ort: Option<String>, 
	#[yaserde(rename = "ortZuPruefen", prefix = "nsi2", default)]
	pub ort_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "bundesland", prefix = "nsi2", default)]
	pub bundesland: Option<BundeslaenderEinheitenEnum>, 
	#[yaserde(rename = "bundeslandZuPruefen", prefix = "nsi2", default)]
	pub bundesland_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "land", prefix = "nsi2", default)]
	pub land: Option<LaenderEinheitenEnum>, 
	#[yaserde(rename = "landZuPruefen", prefix = "nsi2", default)]
	pub land_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "geographischeLage", prefix = "nsi2", default)]
	pub geographische_lage: Option<KorrekturdatenGeographischeLage>, 
	#[yaserde(rename = "technischesInbetriebnahmedatum", prefix = "nsi2", default)]
	pub technisches_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "technischesInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub technisches_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "datumEndgueltigeStilllegung", prefix = "nsi2", default)]
	pub datum_endgueltige_stilllegung: Option<String>, 
	#[yaserde(rename = "datumEndgueltigeStilllegungZuPruefen", prefix = "nsi2", default)]
	pub datum_endgueltige_stilllegung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "geplantesInbetriebnahmedatum", prefix = "nsi2", default)]
	pub geplantes_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "geplantesInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub geplantes_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumDesBetreiberwechsels", prefix = "nsi2", default)]
	pub datum_des_betreiberwechsels: Option<String>, 
	#[yaserde(rename = "DatumDesBetreiberwechselsZuPruefen", prefix = "nsi2", default)]
	pub datum_des_betreiberwechsels_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagStromerzeugungseinheitParameterBasis",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagStromerzeugungseinheitParameterBasis {
	#[yaserde(flatten, default)]
	pub set_korrektur_vorschlag_einheit_parameter_basis: SetKorrekturVorschlagEinheitParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "einsatzverantwortlicher", prefix = "nsi2", default)]
	pub einsatzverantwortlicher: Option<String>, 
	#[yaserde(rename = "einsatzverantwortlicherZuPruefen", prefix = "nsi2", default)]
	pub einsatzverantwortlicher_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "weic", prefix = "nsi2", default)]
	pub weic: Option<ErweiterterString>, 
	#[yaserde(rename = "weicZuPruefen", prefix = "nsi2", default)]
	pub weic_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "weicDisplayName", prefix = "nsi2", default)]
	pub weic_display_name: Option<String>, 
	#[yaserde(rename = "weicDisplayNameZuPruefen", prefix = "nsi2", default)]
	pub weic_display_name_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kraftwerksnummer", prefix = "nsi2", default)]
	pub kraftwerksnummer: Option<ErweiterterString>, 
	#[yaserde(rename = "kraftwerksnummerZuPruefen", prefix = "nsi2", default)]
	pub kraftwerksnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "bruttoleistung", prefix = "nsi2", default)]
	pub bruttoleistung: Option<f64>, 
	#[yaserde(rename = "bruttoleistungZuPruefen", prefix = "nsi2", default)]
	pub bruttoleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nettonennleistung", prefix = "nsi2", default)]
	pub nettonennleistung: Option<f64>, 
	#[yaserde(rename = "nettonennleistungZuPruefen", prefix = "nsi2", default)]
	pub nettonennleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "praequalifiziertFuerRegelenergie", prefix = "nsi2", default)]
	pub praequalifiziert_fuer_regelenergie: Option<bool>, 
	#[yaserde(rename = "praequalifiziertFuerRegelenergieZuPruefen", prefix = "nsi2", default)]
	pub praequalifiziert_fuer_regelenergie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "schwarzstartfaehigkeit", prefix = "nsi2", default)]
	pub schwarzstartfaehigkeit: Option<bool>, 
	#[yaserde(rename = "schwarzstartfaehigkeitZuPruefen", prefix = "nsi2", default)]
	pub schwarzstartfaehigkeit_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "inselbetriebsfaehigkeit", prefix = "nsi2", default)]
	pub inselbetriebsfaehigkeit: Option<bool>, 
	#[yaserde(rename = "inselbetriebsfaehigkeitZuPruefen", prefix = "nsi2", default)]
	pub inselbetriebsfaehigkeit_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitNb", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_nb: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitNbZuPruefen", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_nb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitDv", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_dv: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitDvZuPruefen", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_dv_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einspeisungsart", prefix = "nsi2", default)]
	pub einspeisungsart: Option<EinspeisungsartEnum>, 
	#[yaserde(rename = "einspeisungsartZuPruefen", prefix = "nsi2", default)]
	pub einspeisungsart_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitWasserParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitWasserParameter {
	#[yaserde(flatten, default)]
	pub set_korrektur_vorschlag_stromerzeugungseinheit_parameter_basis: SetKorrekturVorschlagStromerzeugungseinheitParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "nameKraftwerk", prefix = "nsi2", default)]
	pub name_kraftwerk: Option<String>, 
	#[yaserde(rename = "nameKraftwerkZuPruefen", prefix = "nsi2", default)]
	pub name_kraftwerk_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumWiederaufnahmeBetrieb", prefix = "nsi2", default)]
	pub datum_wiederaufnahme_betrieb: Option<String>, 
	#[yaserde(rename = "DatumWiederaufnahmeBetriebZuPruefen", prefix = "nsi2", default)]
	pub datum_wiederaufnahme_betrieb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "artDerWasserkraftanlage", prefix = "nsi2", default)]
	pub art_der_wasserkraftanlage: Option<ArtDerWasserkraftanlageEnum>, 
	#[yaserde(rename = "artDerWasserkraftanlageZuPruefen", prefix = "nsi2", default)]
	pub art_der_wasserkraftanlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "minderungStromerzeugung", prefix = "nsi2", default)]
	pub minderung_stromerzeugung: Option<bool>, 
	#[yaserde(rename = "minderungStromerzeugungZuPruefen", prefix = "nsi2", default)]
	pub minderung_stromerzeugung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "bestandteilGrenzkraftwerk", prefix = "nsi2", default)]
	pub bestandteil_grenzkraftwerk: Option<bool>, 
	#[yaserde(rename = "bestandteilGrenzkraftwerkZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_grenzkraftwerk_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nettonennleistungDeutschland", prefix = "nsi2", default)]
	pub nettonennleistung_deutschland: Option<f64>, 
	#[yaserde(rename = "nettonennleistungDeutschlandZuPruefen", prefix = "nsi2", default)]
	pub nettonennleistung_deutschland_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "artDesZuflusses", prefix = "nsi2", default)]
	pub art_des_zuflusses: Option<ZuflussartEnum>, 
	#[yaserde(rename = "artDesZuflussesZuPruefen", prefix = "nsi2", default)]
	pub art_des_zuflusses_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "BestandteilEEGAnlage", prefix = "nsi2", default)]
	pub bestandteil_eeg_anlage: Option<bool>, 
	#[yaserde(rename = "BestandteilEEGAnlageZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_eeg_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: Option<EegMastrNummerId>, 
	#[yaserde(rename = "eegMastrNummerZuPruefen", prefix = "nsi2", default)]
	pub eeg_mastr_nummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAnlagenkennzifferAnlagenregister", prefix = "nsi2", default)]
	pub eeg_anlagenkennziffer_anlagenregister: Option<ErweiterterString>, 
	#[yaserde(rename = "eegAnlagenkennzifferAnlagenregisterZuPruefen", prefix = "nsi2", default)]
	pub eeg_anlagenkennziffer_anlagenregister_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInstallierteLeistung", prefix = "nsi2", default)]
	pub eeg_installierte_leistung: Option<f64>, 
	#[yaserde(rename = "eegInstallierteLeistungZuPruefen", prefix = "nsi2", default)]
	pub eeg_installierte_leistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInbetriebnahmedatum", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "eegInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ReserveartNachDemEnWG", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg: Option<ReserveartEnum>, 
	#[yaserde(rename = "ReserveartNachDemEnWGZuPruefen", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserve", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve: Option<String>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserveZuPruefen", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitStromVerbraucherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitStromVerbraucherParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitVerbrennungParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitVerbrennungParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitGasSpeicherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitGasSpeicherParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitVerbrennungParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitVerbrennungParameter {
	#[yaserde(flatten, default)]
	pub set_korrektur_vorschlag_stromerzeugungseinheit_parameter_basis: SetKorrekturVorschlagStromerzeugungseinheitParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "nameKraftwerk", prefix = "nsi2", default)]
	pub name_kraftwerk: Option<String>, 
	#[yaserde(rename = "nameKraftwerkZuPruefen", prefix = "nsi2", default)]
	pub name_kraftwerk_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nameKraftwerksblock", prefix = "nsi2", default)]
	pub name_kraftwerksblock: Option<String>, 
	#[yaserde(rename = "nameKraftwerksblockZuPruefen", prefix = "nsi2", default)]
	pub name_kraftwerksblock_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "datumBaubeginn", prefix = "nsi2", default)]
	pub datum_baubeginn: Option<String>, 
	#[yaserde(rename = "datumBaubeginnZuPruefen", prefix = "nsi2", default)]
	pub datum_baubeginn_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "steigerungNettonennleistungKombibetrieb", prefix = "nsi2", default)]
	pub steigerung_nettonennleistung_kombibetrieb: Option<f64>, 
	#[yaserde(rename = "steigerungNettonennleistungKombibetriebZuPruefen", prefix = "nsi2", default)]
	pub steigerung_nettonennleistung_kombibetrieb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "anlageIstImKombibetrieb", prefix = "nsi2", default)]
	pub anlage_ist_im_kombibetrieb: Option<bool>, 
	#[yaserde(rename = "anlageIstImKombibetriebZuPruefen", prefix = "nsi2", default)]
	pub anlage_ist_im_kombibetrieb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "mastrNummernKombibetrieb", prefix = "nsi2", default)]
	pub mastr_nummern_kombibetrieb: Option<String>, 
	#[yaserde(rename = "mastrNummernKombibetriebZuPruefen", prefix = "nsi2", default)]
	pub mastr_nummern_kombibetrieb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "netzreserveAbDatum", prefix = "nsi2", default)]
	pub netzreserve_ab_datum: Option<String>, 
	#[yaserde(rename = "netzreserveAbDatumZuPruefen", prefix = "nsi2", default)]
	pub netzreserve_ab_datum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "sicherheitsbereitschaftAbDatum", prefix = "nsi2", default)]
	pub sicherheitsbereitschaft_ab_datum: Option<String>, 
	#[yaserde(rename = "sicherheitsbereitschaftAbDatumZuPruefen", prefix = "nsi2", default)]
	pub sicherheitsbereitschaft_ab_datum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "energietraeger", prefix = "nsi2", default)]
	pub energietraeger: Option<EnergietraegerEnum>, 
	#[yaserde(rename = "energietraegerZuPruefen", prefix = "nsi2", default)]
	pub energietraeger_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "hauptbrennstoff", prefix = "nsi2", default)]
	pub hauptbrennstoff: Option<VerbrennungBrennstoffEnum>, 
	#[yaserde(rename = "hauptbrennstoffZuPruefen", prefix = "nsi2", default)]
	pub hauptbrennstoff_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "weitererHauptbrennstoff", prefix = "nsi2", default)]
	pub weiterer_hauptbrennstoff: Option<ErweiterterWeitereBrennstoffe>, 
	#[yaserde(rename = "weitererHauptbrennstoffZuPruefen", prefix = "nsi2", default)]
	pub weiterer_hauptbrennstoff_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "weitereBrennstoffe", prefix = "nsi2", default)]
	pub weitere_brennstoffe: Option<ErweiterteWeitereBrennstoffe>, 
	#[yaserde(rename = "weitereBrennstoffeZuPruefen", prefix = "nsi2", default)]
	pub weitere_brennstoffe_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "verknuepfteErzeugungseinheiten", prefix = "nsi2", default)]
	pub verknuepfte_erzeugungseinheiten: Vec<VerknuepfteEinheit>, 
	#[yaserde(rename = "verknuepfteErzeugungseinheitenZuPruefen", prefix = "nsi2", default)]
	pub verknuepfte_erzeugungseinheiten_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "bestandteilGrenzkraftwerk", prefix = "nsi2", default)]
	pub bestandteil_grenzkraftwerk: Option<bool>, 
	#[yaserde(rename = "bestandteilGrenzkraftwerkZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_grenzkraftwerk_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nettonennleistungDeutschland", prefix = "nsi2", default)]
	pub nettonennleistung_deutschland: Option<f64>, 
	#[yaserde(rename = "nettonennleistungDeutschlandZuPruefen", prefix = "nsi2", default)]
	pub nettonennleistung_deutschland_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "notstromaggregat", prefix = "nsi2", default)]
	pub notstromaggregat: Option<bool>, 
	#[yaserde(rename = "notstromaggregatZuPruefen", prefix = "nsi2", default)]
	pub notstromaggregat_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "technologie", prefix = "nsi2", default)]
	pub technologie: Option<TechnologieVerbrennungsanlageEnum>, 
	#[yaserde(rename = "technologieZuPruefen", prefix = "nsi2", default)]
	pub technologie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einsatzort", prefix = "nsi2", default)]
	pub einsatzort: Option<EinsatzortEnum>, 
	#[yaserde(rename = "einsatzortZuPruefen", prefix = "nsi2", default)]
	pub einsatzort_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "BestandteilKWKAnlage", prefix = "nsi2", default)]
	pub bestandteil_kwk_anlage: Option<bool>, 
	#[yaserde(rename = "BestandteilKWKAnlageZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_kwk_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkMastrNummer", prefix = "nsi2", default)]
	pub kwk_mastr_nummer: Option<KwkMastrNummerId>, 
	#[yaserde(rename = "kwkMastrNummerZuPruefen", prefix = "nsi2", default)]
	pub kwk_mastr_nummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkAusschreibungZuschlag", prefix = "nsi2", default)]
	pub kwk_ausschreibung_zuschlag: Option<bool>, 
	#[yaserde(rename = "kwkAusschreibungZuschlagZuPruefen", prefix = "nsi2", default)]
	pub kwk_ausschreibung_zuschlag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkZuschlagnummer", prefix = "nsi2", default)]
	pub kwk_zuschlagnummer: Option<String>, 
	#[yaserde(rename = "kwkZuschlagnummerZuPruefen", prefix = "nsi2", default)]
	pub kwk_zuschlagnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkInbetriebnahmedatum", prefix = "nsi2", default)]
	pub kwk_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "kwkInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub kwk_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkThermischeNutzleistung", prefix = "nsi2", default)]
	pub kwk_thermische_nutzleistung: Option<f64>, 
	#[yaserde(rename = "kwkThermischeNutzleistungZuPruefen", prefix = "nsi2", default)]
	pub kwk_thermische_nutzleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkElektrischeKwkLeistung", prefix = "nsi2", default)]
	pub kwk_elektrische_kwk_leistung: Option<f64>, 
	#[yaserde(rename = "kwkElektrischeKwkLeistungZuPruefen", prefix = "nsi2", default)]
	pub kwk_elektrische_kwk_leistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AusschliesslicheVerwendungImKombibetrieb", prefix = "nsi2", default)]
	pub ausschliessliche_verwendung_im_kombibetrieb: Option<bool>, 
	#[yaserde(rename = "AusschliesslicheVerwendungImKombibetriebZuPruefen", prefix = "nsi2", default)]
	pub ausschliessliche_verwendung_im_kombibetrieb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ReserveartNachDemEnWG", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg: Option<ReserveartEnum>, 
	#[yaserde(rename = "ReserveartNachDemEnWGZuPruefen", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserve", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve: Option<String>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserveZuPruefen", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitSolarParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitSolarParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitGasErzeugerParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitGasErzeugerParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitStromVerbraucherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitStromVerbraucherParameter {
	#[yaserde(flatten, default)]
	pub set_korrektur_vorschlag_einheit_parameter_basis: SetKorrekturVorschlagEinheitParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "NameStromverbrauchseinheit", prefix = "nsi2", default)]
	pub name_stromverbrauchseinheit: Option<String>, 
	#[yaserde(rename = "NameStromverbrauchseinheitZuPruefen", prefix = "nsi2", default)]
	pub name_stromverbrauchseinheit_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einsatzverantwortlicher", prefix = "nsi2", default)]
	pub einsatzverantwortlicher: Option<String>, 
	#[yaserde(rename = "einsatzverantwortlicherZuPruefen", prefix = "nsi2", default)]
	pub einsatzverantwortlicher_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "anzahlStromverbrauchseinheitenGroesser50Mw", prefix = "nsi2", default)]
	pub anzahl_stromverbrauchseinheiten_groesser_50_mw: Option<i32>, 
	#[yaserde(rename = "anzahlStromverbrauchseinheitenGroesser50MwZuPruefen", prefix = "nsi2", default)]
	pub anzahl_stromverbrauchseinheiten_groesser_50_mw_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitSolarParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitSolarParameter {
	#[yaserde(flatten, default)]
	pub set_korrektur_vorschlag_einheit_parameter_basis: SetKorrekturVorschlagEinheitParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "einsatzverantwortlicher", prefix = "nsi2", default)]
	pub einsatzverantwortlicher: Option<String>, 
	#[yaserde(rename = "einsatzverantwortlicherZuPruefen", prefix = "nsi2", default)]
	pub einsatzverantwortlicher_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "weic", prefix = "nsi2", default)]
	pub weic: Option<ErweiterterString>, 
	#[yaserde(rename = "weicZuPruefen", prefix = "nsi2", default)]
	pub weic_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "weicDisplayName", prefix = "nsi2", default)]
	pub weic_display_name: Option<String>, 
	#[yaserde(rename = "weicDisplayNameZuPruefen", prefix = "nsi2", default)]
	pub weic_display_name_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kraftwerksnummer", prefix = "nsi2", default)]
	pub kraftwerksnummer: Option<ErweiterterString>, 
	#[yaserde(rename = "kraftwerksnummerZuPruefen", prefix = "nsi2", default)]
	pub kraftwerksnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "bruttoleistung", prefix = "nsi2", default)]
	pub bruttoleistung: Option<f64>, 
	#[yaserde(rename = "bruttoleistungZuPruefen", prefix = "nsi2", default)]
	pub bruttoleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "praequalifiziertFuerRegelenergie", prefix = "nsi2", default)]
	pub praequalifiziert_fuer_regelenergie: Option<bool>, 
	#[yaserde(rename = "praequalifiziertFuerRegelenergieZuPruefen", prefix = "nsi2", default)]
	pub praequalifiziert_fuer_regelenergie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "schwarzstartfaehigkeit", prefix = "nsi2", default)]
	pub schwarzstartfaehigkeit: Option<bool>, 
	#[yaserde(rename = "schwarzstartfaehigkeitZuPruefen", prefix = "nsi2", default)]
	pub schwarzstartfaehigkeit_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "inselbetriebsfaehigkeit", prefix = "nsi2", default)]
	pub inselbetriebsfaehigkeit: Option<bool>, 
	#[yaserde(rename = "inselbetriebsfaehigkeitZuPruefen", prefix = "nsi2", default)]
	pub inselbetriebsfaehigkeit_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitNb", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_nb: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitNbZuPruefen", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_nb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitDv", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_dv: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitDvZuPruefen", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_dv_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einspeisungsart", prefix = "nsi2", default)]
	pub einspeisungsart: Option<EinspeisungsartEnum>, 
	#[yaserde(rename = "einspeisungsartZuPruefen", prefix = "nsi2", default)]
	pub einspeisungsart_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "zugeordneteWirkleistungWechselrichter", prefix = "nsi2", default)]
	pub zugeordnete_wirkleistung_wechselrichter: Option<f64>, 
	#[yaserde(rename = "zugeordneteWirkleistungWechselrichterZuPruefen", prefix = "nsi2", default)]
	pub zugeordnete_wirkleistung_wechselrichter_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "anzahlModule", prefix = "nsi2", default)]
	pub anzahl_module: Option<i32>, 
	#[yaserde(rename = "anzahlModuleZuPruefen", prefix = "nsi2", default)]
	pub anzahl_module_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "lage", prefix = "nsi2", default)]
	pub lage: Option<SolarLageEnum>, 
	#[yaserde(rename = "lageZuPruefen", prefix = "nsi2", default)]
	pub lage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "leistungsbegrenzung", prefix = "nsi2", default)]
	pub leistungsbegrenzung: Option<SolarLeistungsbegrenzungEnum>, 
	#[yaserde(rename = "leistungsbegrenzungZuPruefen", prefix = "nsi2", default)]
	pub leistungsbegrenzung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einheitlicheAusrichtungUndNeigungswinkel", prefix = "nsi2", default)]
	pub einheitliche_ausrichtung_und_neigungswinkel: Option<bool>, 
	#[yaserde(rename = "einheitlicheAusrichtungUndNeigungswinkelZuPruefen", prefix = "nsi2", default)]
	pub einheitliche_ausrichtung_und_neigungswinkel_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "hauptausrichtung", prefix = "nsi2", default)]
	pub hauptausrichtung: Option<AnlagenartSolarAusrichtungEnum>, 
	#[yaserde(rename = "hauptausrichtungZuPruefen", prefix = "nsi2", default)]
	pub hauptausrichtung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "hauptausrichtungNeigungswinkel", prefix = "nsi2", default)]
	pub hauptausrichtung_neigungswinkel: Option<AnlagenartSolarNeigungswinkelEnum>, 
	#[yaserde(rename = "hauptausrichtungNeigungswinkelZuPruefen", prefix = "nsi2", default)]
	pub hauptausrichtung_neigungswinkel_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nebenausrichtung", prefix = "nsi2", default)]
	pub nebenausrichtung: Option<AnlagenartSolarAusrichtungEnum>, 
	#[yaserde(rename = "nebenausrichtungZuPruefen", prefix = "nsi2", default)]
	pub nebenausrichtung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nebenausrichtungNeigungswinkel", prefix = "nsi2", default)]
	pub nebenausrichtung_neigungswinkel: Option<AnlagenartSolarNeigungswinkelEnum>, 
	#[yaserde(rename = "nebenausrichtungNeigungswinkelZuPruefen", prefix = "nsi2", default)]
	pub nebenausrichtung_neigungswinkel_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "inAnspruchGenommeneFlaeche", prefix = "nsi2", default)]
	pub in_anspruch_genommene_flaeche: Option<f64>, 
	#[yaserde(rename = "inAnspruchGenommeneFlaecheZuPruefen", prefix = "nsi2", default)]
	pub in_anspruch_genommene_flaeche_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "artDerFlaeche", prefix = "nsi2", default)]
	pub art_der_flaeche: Vec<SolarFlaechenartEnum>, 
	#[yaserde(rename = "artDerFlaecheZuPruefen", prefix = "nsi2", default)]
	pub art_der_flaeche_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "inAnspruchGenommeneLandwirtschaftlichGenutzteFlaeche", prefix = "nsi2", default)]
	pub in_anspruch_genommene_landwirtschaftlich_genutzte_flaeche: Option<f64>, 
	#[yaserde(rename = "inAnspruchGenommeneLandwirtschaftlichGenutzteFlaecheZuPruefen", prefix = "nsi2", default)]
	pub in_anspruch_genommene_landwirtschaftlich_genutzte_flaeche_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nutzungsbereich", prefix = "nsi2", default)]
	pub nutzungsbereich: Option<NutzungsbereichEnum>, 
	#[yaserde(rename = "nutzungsbereichZuPruefen", prefix = "nsi2", default)]
	pub nutzungsbereich_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInanspruchnahmeZahlungNachEeg", prefix = "nsi2", default)]
	pub eeg_inanspruchnahme_zahlung_nach_eeg: Option<bool>, 
	#[yaserde(rename = "eegInanspruchnahmeZahlungNachEegZuPruefen", prefix = "nsi2", default)]
	pub eeg_inanspruchnahme_zahlung_nach_eeg_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAnlagenkennzifferAnlagenregister", prefix = "nsi2", default)]
	pub eeg_anlagenkennziffer_anlagenregister: Option<ErweiterterString>, 
	#[yaserde(rename = "eegAnlagenkennzifferAnlagenregisterZuPruefen", prefix = "nsi2", default)]
	pub eeg_anlagenkennziffer_anlagenregister_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInbetriebnahmedatum", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "eegInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegRegistrierungsnummerPvMeldeportal", prefix = "nsi2", default)]
	pub eeg_registrierungsnummer_pv_meldeportal: Option<ErweiterterString>, 
	#[yaserde(rename = "eegRegistrierungsnummerPvMeldeportalZuPruefen", prefix = "nsi2", default)]
	pub eeg_registrierungsnummer_pv_meldeportal_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegMieterstromZugeordnet", prefix = "nsi2", default)]
	pub eeg_mieterstrom_zugeordnet: Option<bool>, 
	#[yaserde(rename = "eegMieterstromZugeordnetZuPruefen", prefix = "nsi2", default)]
	pub eeg_mieterstrom_zugeordnet_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegMieterstromRegistrierungsdatum", prefix = "nsi2", default)]
	pub eeg_mieterstrom_registrierungsdatum: Option<String>, 
	#[yaserde(rename = "eegMieterstromRegistrierungsdatumZuPruefen", prefix = "nsi2", default)]
	pub eeg_mieterstrom_registrierungsdatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegMieterstromErsteZuordnungZuschlag", prefix = "nsi2", default)]
	pub eeg_mieterstrom_erste_zuordnung_zuschlag: Option<String>, 
	#[yaserde(rename = "eegMieterstromErsteZuordnungZuschlagZuPruefen", prefix = "nsi2", default)]
	pub eeg_mieterstrom_erste_zuordnung_zuschlag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAusschreibungZuschlag", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag: Option<bool>, 
	#[yaserde(rename = "eegAusschreibungZuschlagZuPruefen", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegZuschlagsnummer", prefix = "nsi2", default)]
	pub eeg_zuschlagsnummer: Option<String>, 
	#[yaserde(rename = "eegZuschlagsnummerZuPruefen", prefix = "nsi2", default)]
	pub eeg_zuschlagsnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegZugeordneteGebotsmenge", prefix = "nsi2", default)]
	pub eeg_zugeordnete_gebotsmenge: Option<f64>, 
	#[yaserde(rename = "eegZugeordneteGebotsmengeZuPruefen", prefix = "nsi2", default)]
	pub eeg_zugeordnete_gebotsmenge_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Buergerenergie", prefix = "nsi2", default)]
	pub buergerenergie: Option<bool>, 
	#[yaserde(rename = "BuergerenergieZuPruefen", prefix = "nsi2", default)]
	pub buergerenergie_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitBiomasseParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitBiomasseParameter {
	#[yaserde(flatten, default)]
	pub set_korrektur_vorschlag_stromerzeugungseinheit_parameter_basis: SetKorrekturVorschlagStromerzeugungseinheitParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "DatumBeginnVoruebergehendeStilllegung", prefix = "nsi2", default)]
	pub datum_beginn_voruebergehende_stilllegung: Option<String>, 
	#[yaserde(rename = "DatumBeginnVoruebergehendeStilllegungZuPruefen", prefix = "nsi2", default)]
	pub datum_beginn_voruebergehende_stilllegung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumWiederaufnahmeBetrieb", prefix = "nsi2", default)]
	pub datum_wiederaufnahme_betrieb: Option<String>, 
	#[yaserde(rename = "DatumWiederaufnahmeBetriebZuPruefen", prefix = "nsi2", default)]
	pub datum_wiederaufnahme_betrieb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "hauptbrennstoff", prefix = "nsi2", default)]
	pub hauptbrennstoff: Option<BiomasseBrennstoffEnum>, 
	#[yaserde(rename = "hauptbrennstoffZuPruefen", prefix = "nsi2", default)]
	pub hauptbrennstoff_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "technologie", prefix = "nsi2", default)]
	pub technologie: Option<TechnologieVerbrennungsanlageEnum>, 
	#[yaserde(rename = "technologieZuPruefen", prefix = "nsi2", default)]
	pub technologie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "BestandteilEEGAnlage", prefix = "nsi2", default)]
	pub bestandteil_eeg_anlage: Option<bool>, 
	#[yaserde(rename = "BestandteilEEGAnlageZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_eeg_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: Option<EegMastrNummerId>, 
	#[yaserde(rename = "eegMastrNummerZuPruefen", prefix = "nsi2", default)]
	pub eeg_mastr_nummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAnlagenkennzifferAnlagenregister", prefix = "nsi2", default)]
	pub eeg_anlagenkennziffer_anlagenregister: Option<ErweiterterString>, 
	#[yaserde(rename = "eegAnlagenkennzifferAnlagenregisterZuPruefen", prefix = "nsi2", default)]
	pub eeg_anlagenkennziffer_anlagenregister_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInstallierteLeistung", prefix = "nsi2", default)]
	pub eeg_installierte_leistung: Option<f64>, 
	#[yaserde(rename = "eegInstallierteLeistungZuPruefen", prefix = "nsi2", default)]
	pub eeg_installierte_leistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInbetriebnahmedatum", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "eegInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAusschliesslicheVerwendungBiomasse", prefix = "nsi2", default)]
	pub eeg_ausschliessliche_verwendung_biomasse: Option<bool>, 
	#[yaserde(rename = "eegAusschliesslicheVerwendungBiomasseZuPruefen", prefix = "nsi2", default)]
	pub eeg_ausschliessliche_verwendung_biomasse_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAusschreibungZuschlag", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag: Option<bool>, 
	#[yaserde(rename = "eegAusschreibungZuschlagZuPruefen", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegBiogasZuschlagsnummer", prefix = "nsi2", default)]
	pub eeg_biogas_zuschlagsnummer: Option<String>, 
	#[yaserde(rename = "eegBiogasZuschlagsnummerZuPruefen", prefix = "nsi2", default)]
	pub eeg_biogas_zuschlagsnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegBiogasInanspruchnahmeFlexiPraemie", prefix = "nsi2", default)]
	pub eeg_biogas_inanspruchnahme_flexi_praemie: Option<bool>, 
	#[yaserde(rename = "eegBiogasInanspruchnahmeFlexiPraemieZuPruefen", prefix = "nsi2", default)]
	pub eeg_biogas_inanspruchnahme_flexi_praemie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegBiogasDatumInanspruchnahmeFlexiPraemie", prefix = "nsi2", default)]
	pub eeg_biogas_datum_inanspruchnahme_flexi_praemie: Option<String>, 
	#[yaserde(rename = "eegBiogasDatumInanspruchnahmeFlexiPraemieZuPruefen", prefix = "nsi2", default)]
	pub eeg_biogas_datum_inanspruchnahme_flexi_praemie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegBiogasLeistungserhoehung", prefix = "nsi2", default)]
	pub eeg_biogas_leistungserhoehung: Option<bool>, 
	#[yaserde(rename = "eegBiogasLeistungserhoehungZuPruefen", prefix = "nsi2", default)]
	pub eeg_biogas_leistungserhoehung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegBiogasDatumLeistungserhoehung", prefix = "nsi2", default)]
	pub eeg_biogas_datum_leistungserhoehung: Option<String>, 
	#[yaserde(rename = "eegBiogasDatumLeistungserhoehungZuPruefen", prefix = "nsi2", default)]
	pub eeg_biogas_datum_leistungserhoehung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegBiogasUmfangLeistungserhoehung", prefix = "nsi2", default)]
	pub eeg_biogas_umfang_leistungserhoehung: Option<f64>, 
	#[yaserde(rename = "eegBiogasUmfangLeistungserhoehungZuPruefen", prefix = "nsi2", default)]
	pub eeg_biogas_umfang_leistungserhoehung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegBiogasGaserzeugungskapazitaet", prefix = "nsi2", default)]
	pub eeg_biogas_gaserzeugungskapazitaet: Option<ErweitertesDecimal>, 
	#[yaserde(rename = "eegBiogasGaserzeugungskapazitaetZuPruefen", prefix = "nsi2", default)]
	pub eeg_biogas_gaserzeugungskapazitaet_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegHoechstbemessungsleistung", prefix = "nsi2", default)]
	pub eeg_hoechstbemessungsleistung: Option<f64>, 
	#[yaserde(rename = "eegHoechstbemessungsleistungZuPruefen", prefix = "nsi2", default)]
	pub eeg_hoechstbemessungsleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegBiomethanErstmaligerEinsatz", prefix = "nsi2", default)]
	pub eeg_biomethan_erstmaliger_einsatz: Option<ErweitertesDate>, 
	#[yaserde(rename = "eegBiomethanErstmaligerEinsatzZuPruefen", prefix = "nsi2", default)]
	pub eeg_biomethan_erstmaliger_einsatz_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "BestandteilKWKAnlage", prefix = "nsi2", default)]
	pub bestandteil_kwk_anlage: Option<bool>, 
	#[yaserde(rename = "BestandteilKWKAnlageZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_kwk_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkMastrNummer", prefix = "nsi2", default)]
	pub kwk_mastr_nummer: Option<KwkMastrNummerId>, 
	#[yaserde(rename = "kwkMastrNummerZuPruefen", prefix = "nsi2", default)]
	pub kwk_mastr_nummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkAusschreibungZuschlag", prefix = "nsi2", default)]
	pub kwk_ausschreibung_zuschlag: Option<bool>, 
	#[yaserde(rename = "kwkAusschreibungZuschlagZuPruefen", prefix = "nsi2", default)]
	pub kwk_ausschreibung_zuschlag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkZuschlagnummer", prefix = "nsi2", default)]
	pub kwk_zuschlagnummer: Option<String>, 
	#[yaserde(rename = "kwkZuschlagnummerZuPruefen", prefix = "nsi2", default)]
	pub kwk_zuschlagnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkInbetriebnahmedatum", prefix = "nsi2", default)]
	pub kwk_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "kwkInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub kwk_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkThermischeNutzleistung", prefix = "nsi2", default)]
	pub kwk_thermische_nutzleistung: Option<f64>, 
	#[yaserde(rename = "kwkThermischeNutzleistungZuPruefen", prefix = "nsi2", default)]
	pub kwk_thermische_nutzleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkElektrischeKwkLeistung", prefix = "nsi2", default)]
	pub kwk_elektrische_kwk_leistung: Option<f64>, 
	#[yaserde(rename = "kwkElektrischeKwkLeistungZuPruefen", prefix = "nsi2", default)]
	pub kwk_elektrische_kwk_leistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ReserveartNachDemEnWG", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg: Option<ReserveartEnum>, 
	#[yaserde(rename = "ReserveartNachDemEnWGZuPruefen", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserve", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve: Option<String>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserveZuPruefen", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitGasVerbraucherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitGasVerbraucherParameter {
	#[yaserde(flatten, default)]
	pub set_korrektur_vorschlag_einheit_parameter_basis: SetKorrekturVorschlagEinheitParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "maximaleGasbezugsleistung", prefix = "nsi2", default)]
	pub maximale_gasbezugsleistung: Option<f64>, 
	#[yaserde(rename = "maximaleGasbezugsleistungZuPruefen", prefix = "nsi2", default)]
	pub maximale_gasbezugsleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einheitDientDerStromerzeugung", prefix = "nsi2", default)]
	pub einheit_dient_der_stromerzeugung: Option<bool>, 
	#[yaserde(rename = "einheitDientDerStromerzeugungZuPruefen", prefix = "nsi2", default)]
	pub einheit_dient_der_stromerzeugung_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitGasErzeugerParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitGasErzeugerParameter {
	#[yaserde(flatten, default)]
	pub set_korrektur_vorschlag_einheit_parameter_basis: SetKorrekturVorschlagEinheitParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "technologie", prefix = "nsi2", default)]
	pub technologie: Option<TechnologieGasErzeugungEnum>, 
	#[yaserde(rename = "technologieZuPruefen", prefix = "nsi2", default)]
	pub technologie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "erzeugungsleistung", prefix = "nsi2", default)]
	pub erzeugungsleistung: Option<f64>, 
	#[yaserde(rename = "erzeugungsleistungZuPruefen", prefix = "nsi2", default)]
	pub erzeugungsleistung_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitWindParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitWindParameter {
	#[yaserde(flatten, default)]
	pub set_korrektur_vorschlag_stromerzeugungseinheit_parameter_basis: SetKorrekturVorschlagStromerzeugungseinheitParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "nameWindpark", prefix = "nsi2", default)]
	pub name_windpark: Option<String>, 
	#[yaserde(rename = "nameWindparkZuPruefen", prefix = "nsi2", default)]
	pub name_windpark_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "lage", prefix = "nsi2", default)]
	pub lage: Option<WindLageEnum>, 
	#[yaserde(rename = "lageZuPruefen", prefix = "nsi2", default)]
	pub lage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "seelage", prefix = "nsi2", default)]
	pub seelage: Option<SeelageEnum>, 
	#[yaserde(rename = "seelageZuPruefen", prefix = "nsi2", default)]
	pub seelage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "clusterOstsee", prefix = "nsi2", default)]
	pub cluster_ostsee: Option<ClusterOstseeEnum>, 
	#[yaserde(rename = "clusterOstseeZuPruefen", prefix = "nsi2", default)]
	pub cluster_ostsee_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "clusterNordsee", prefix = "nsi2", default)]
	pub cluster_nordsee: Option<ClusterNordseeEnum>, 
	#[yaserde(rename = "clusterNordseeZuPruefen", prefix = "nsi2", default)]
	pub cluster_nordsee_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "technologie", prefix = "nsi2", default)]
	pub technologie: Option<WindanlageTechnologieEnum>, 
	#[yaserde(rename = "technologieZuPruefen", prefix = "nsi2", default)]
	pub technologie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "herstellerId", prefix = "nsi2", default)]
	pub hersteller_id: Option<KatalogwertId>, 
	#[yaserde(rename = "herstellerIdZuPruefen", prefix = "nsi2", default)]
	pub hersteller_id_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "typenbezeichnung", prefix = "nsi2", default)]
	pub typenbezeichnung: Option<String>, 
	#[yaserde(rename = "typenbezeichnungZuPruefen", prefix = "nsi2", default)]
	pub typenbezeichnung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nabenhoehe", prefix = "nsi2", default)]
	pub nabenhoehe: Option<f64>, 
	#[yaserde(rename = "nabenhoeheZuPruefen", prefix = "nsi2", default)]
	pub nabenhoehe_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "rotordurchmesser", prefix = "nsi2", default)]
	pub rotordurchmesser: Option<f64>, 
	#[yaserde(rename = "rotordurchmesserZuPruefen", prefix = "nsi2", default)]
	pub rotordurchmesser_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Rotorblattenteisungssystem", prefix = "nsi2", default)]
	pub rotorblattenteisungssystem: Option<bool>, 
	#[yaserde(rename = "RotorblattenteisungssystemZuPruefen", prefix = "nsi2", default)]
	pub rotorblattenteisungssystem_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "hoehe", prefix = "nsi2", default)]
	pub hoehe: Option<f64>, 
	#[yaserde(rename = "hoeheZuPruefen", prefix = "nsi2", default)]
	pub hoehe_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "auflageAbschaltungLeistungsbegrenzung", prefix = "nsi2", default)]
	pub auflage_abschaltung_leistungsbegrenzung: Option<bool>, 
	#[yaserde(rename = "auflageAbschaltungLeistungsbegrenzungZuPruefen", prefix = "nsi2", default)]
	pub auflage_abschaltung_leistungsbegrenzung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSchallimmissionsschutzNachts", prefix = "nsi2", default)]
	pub auflagen_abschaltung_schallimmissionsschutz_nachts: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSchallimmissionsschutzNachtsZuPruefen", prefix = "nsi2", default)]
	pub auflagen_abschaltung_schallimmissionsschutz_nachts_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSchallimmissionsschutzTagsueber", prefix = "nsi2", default)]
	pub auflagen_abschaltung_schallimmissionsschutz_tagsueber: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSchallimmissionsschutzTagsueberZuPruefen", prefix = "nsi2", default)]
	pub auflagen_abschaltung_schallimmissionsschutz_tagsueber_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSchattenwurf", prefix = "nsi2", default)]
	pub auflagen_abschaltung_schattenwurf: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSchattenwurfZuPruefen", prefix = "nsi2", default)]
	pub auflagen_abschaltung_schattenwurf_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungTierschutz", prefix = "nsi2", default)]
	pub auflagen_abschaltung_tierschutz: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungTierschutzZuPruefen", prefix = "nsi2", default)]
	pub auflagen_abschaltung_tierschutz_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungEiswurf", prefix = "nsi2", default)]
	pub auflagen_abschaltung_eiswurf: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungEiswurfZuPruefen", prefix = "nsi2", default)]
	pub auflagen_abschaltung_eiswurf_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSonstige", prefix = "nsi2", default)]
	pub auflagen_abschaltung_sonstige: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSonstigeZuPruefen", prefix = "nsi2", default)]
	pub auflagen_abschaltung_sonstige_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "wassertiefe", prefix = "nsi2", default)]
	pub wassertiefe: Option<f64>, 
	#[yaserde(rename = "wassertiefeZuPruefen", prefix = "nsi2", default)]
	pub wassertiefe_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kuestenentfernung", prefix = "nsi2", default)]
	pub kuestenentfernung: Option<f64>, 
	#[yaserde(rename = "kuestenentfernungZuPruefen", prefix = "nsi2", default)]
	pub kuestenentfernung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegPrototypAnlage", prefix = "nsi2", default)]
	pub eeg_prototyp_anlage: Option<bool>, 
	#[yaserde(rename = "eegPrototypAnlageZuPruefen", prefix = "nsi2", default)]
	pub eeg_prototyp_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegPilotAnlage", prefix = "nsi2", default)]
	pub eeg_pilot_anlage: Option<bool>, 
	#[yaserde(rename = "eegPilotAnlageZuPruefen", prefix = "nsi2", default)]
	pub eeg_pilot_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInstallierteLeistung", prefix = "nsi2", default)]
	pub eeg_installierte_leistung: Option<f64>, 
	#[yaserde(rename = "eegInstallierteLeistungZuPruefen", prefix = "nsi2", default)]
	pub eeg_installierte_leistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInbetriebnahmedatum", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "eegInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegVerhaeltnisErtragsschaetzungReferenzertrag", prefix = "nsi2", default)]
	pub eeg_verhaeltnis_ertragsschaetzung_referenzertrag: Option<ErweitertesDecimal>, 
	#[yaserde(rename = "eegVerhaeltnisReferenzertragErtragZuPruefen", prefix = "nsi2", default)]
	pub eeg_verhaeltnis_referenzertrag_ertrag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegVerhaeltnisReferenzertragErtrag5Jahre", prefix = "nsi2", default)]
	pub eeg_verhaeltnis_referenzertrag_ertrag_5_jahre: Option<ErweitertesDecimal>, 
	#[yaserde(rename = "eegVerhaeltnisReferenzertragErtrag5JahreZuPruefen", prefix = "nsi2", default)]
	pub eeg_verhaeltnis_referenzertrag_ertrag_5_jahre_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegVerhaeltnisReferenzertragErtrag10Jahre", prefix = "nsi2", default)]
	pub eeg_verhaeltnis_referenzertrag_ertrag_10_jahre: Option<ErweitertesDecimal>, 
	#[yaserde(rename = "eegVerhaeltnisReferenzertragErtrag10JahreZuPruefen", prefix = "nsi2", default)]
	pub eeg_verhaeltnis_referenzertrag_ertrag_10_jahre_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegVerhaeltnisReferenzertragErtrag15Jahre", prefix = "nsi2", default)]
	pub eeg_verhaeltnis_referenzertrag_ertrag_15_jahre: Option<ErweitertesDecimal>, 
	#[yaserde(rename = "eegVerhaeltnisReferenzertragErtrag15JahreZuPruefen", prefix = "nsi2", default)]
	pub eeg_verhaeltnis_referenzertrag_ertrag_15_jahre_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAusschreibungZuschlag", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag: Option<bool>, 
	#[yaserde(rename = "eegAusschreibungZuschlagZuPruefen", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegZuschlagsnummer", prefix = "nsi2", default)]
	pub eeg_zuschlagsnummer: Option<String>, 
	#[yaserde(rename = "eegZuschlagsnummerZuPruefen", prefix = "nsi2", default)]
	pub eeg_zuschlagsnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Buergerenergie", prefix = "nsi2", default)]
	pub buergerenergie: Option<bool>, 
	#[yaserde(rename = "BuergerenergieZuPruefen", prefix = "nsi2", default)]
	pub buergerenergie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Nachtkennzeichen", prefix = "nsi2", default)]
	pub nachtkennzeichen: Option<bool>, 
	#[yaserde(rename = "NachtkennzeichenZuPruefen", prefix = "nsi2", default)]
	pub nachtkennzeichen_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitWindParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitWindParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitAnlagenbetreiberParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitAnlagenbetreiberParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitAnlagenbetreiberParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitAnlagenbetreiberParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: i32, 
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: Option<i32>, 
	#[yaserde(rename = "letzteAenderung", prefix = "nsi2", default)]
	pub letzte_aenderung: Option<String>, 
	#[yaserde(rename = "beschreibung", prefix = "nsi2", default)]
	pub beschreibung: Option<String>, 
	#[yaserde(rename = "Personenart", prefix = "nsi2", default)]
	pub personenart: Option<PersonenartEnum>, 
	#[yaserde(rename = "PersonenartZuPruefen", prefix = "nsi2", default)]
	pub personenart_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Firmenname", prefix = "nsi2", default)]
	pub firmenname: Option<String>, 
	#[yaserde(rename = "FirmennameZuPruefen", prefix = "nsi2", default)]
	pub firmenname_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "RechtsformId", prefix = "nsi2", default)]
	pub rechtsform_id: Option<KatalogwertId>, 
	#[yaserde(rename = "RechtsformIdZuPruefen", prefix = "nsi2", default)]
	pub rechtsform_id_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "SonstigeRechtsform", prefix = "nsi2", default)]
	pub sonstige_rechtsform: Option<String>, 
	#[yaserde(rename = "SonstigeRechtsformZuPruefen", prefix = "nsi2", default)]
	pub sonstige_rechtsform_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Anrede", prefix = "nsi2", default)]
	pub anrede: Option<SalutationEnum>, 
	#[yaserde(rename = "AnredeZuPruefen", prefix = "nsi2", default)]
	pub anrede_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Titel", prefix = "nsi2", default)]
	pub titel: Option<TitelEnum>, 
	#[yaserde(rename = "TitelZuPruefen", prefix = "nsi2", default)]
	pub titel_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Vorname", prefix = "nsi2", default)]
	pub vorname: Option<String>, 
	#[yaserde(rename = "VornameZuPruefen", prefix = "nsi2", default)]
	pub vorname_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Nachname", prefix = "nsi2", default)]
	pub nachname: Option<String>, 
	#[yaserde(rename = "NachnameZuPruefen", prefix = "nsi2", default)]
	pub nachname_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Geburtsdatum", prefix = "nsi2", default)]
	pub geburtsdatum: Option<String>, 
	#[yaserde(rename = "GeburtsdatumZuPruefen", prefix = "nsi2", default)]
	pub geburtsdatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Postleitzahl", prefix = "nsi2", default)]
	pub postleitzahl: Option<String>, 
	#[yaserde(rename = "PostleitzahlZuPruefen", prefix = "nsi2", default)]
	pub postleitzahl_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Strasse", prefix = "nsi2", default)]
	pub strasse: Option<String>, 
	#[yaserde(rename = "StrasseZuPruefen", prefix = "nsi2", default)]
	pub strasse_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "StrasseNichtGefunden", prefix = "nsi2", default)]
	pub strasse_nicht_gefunden: Option<bool>, 
	#[yaserde(rename = "Hausnummer", prefix = "nsi2", default)]
	pub hausnummer: Option<ErweiterterString>, 
	#[yaserde(rename = "HausnummerZuPruefen", prefix = "nsi2", default)]
	pub hausnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "HausnummerNichtGefunden", prefix = "nsi2", default)]
	pub hausnummer_nicht_gefunden: Option<bool>, 
	#[yaserde(rename = "Adresszusatz", prefix = "nsi2", default)]
	pub adresszusatz: Option<String>, 
	#[yaserde(rename = "AdresszusatzZuPruefen", prefix = "nsi2", default)]
	pub adresszusatz_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Ort", prefix = "nsi2", default)]
	pub ort: Option<String>, 
	#[yaserde(rename = "OrtZuPruefen", prefix = "nsi2", default)]
	pub ort_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Bundesland", prefix = "nsi2", default)]
	pub bundesland: Option<BundeslaenderEnum>, 
	#[yaserde(rename = "BundeslandZuPruefen", prefix = "nsi2", default)]
	pub bundesland_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Land", prefix = "nsi2", default)]
	pub land: Option<LandEnum>, 
	#[yaserde(rename = "LandZuPruefen", prefix = "nsi2", default)]
	pub land_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AdresseIstZustelladresse", prefix = "nsi2", default)]
	pub adresse_ist_zustelladresse: Option<bool>, 
	#[yaserde(rename = "AdresseIstZustelladresseZuPruefen", prefix = "nsi2", default)]
	pub adresse_ist_zustelladresse_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ZustellPostleitzahl", prefix = "nsi2", default)]
	pub zustell_postleitzahl: Option<String>, 
	#[yaserde(rename = "ZustellPostleitzahlZuPruefen", prefix = "nsi2", default)]
	pub zustell_postleitzahl_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ZustellStrasse", prefix = "nsi2", default)]
	pub zustell_strasse: Option<String>, 
	#[yaserde(rename = "ZustellStrasseZuPruefen", prefix = "nsi2", default)]
	pub zustell_strasse_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ZustellStrasseNichtGefunden", prefix = "nsi2", default)]
	pub zustell_strasse_nicht_gefunden: Option<bool>, 
	#[yaserde(rename = "ZustellHausnummer", prefix = "nsi2", default)]
	pub zustell_hausnummer: Option<ErweiterterString>, 
	#[yaserde(rename = "ZustellHausnummerZuPruefen", prefix = "nsi2", default)]
	pub zustell_hausnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ZustellHausnummerNichtGefunden", prefix = "nsi2", default)]
	pub zustell_hausnummer_nicht_gefunden: Option<bool>, 
	#[yaserde(rename = "ZustellAdresszusatz", prefix = "nsi2", default)]
	pub zustell_adresszusatz: Option<String>, 
	#[yaserde(rename = "ZustellAdresszusatzZuPruefen", prefix = "nsi2", default)]
	pub zustell_adresszusatz_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ZustellOrt", prefix = "nsi2", default)]
	pub zustell_ort: Option<String>, 
	#[yaserde(rename = "ZustellOrtZuPruefen", prefix = "nsi2", default)]
	pub zustell_ort_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ZustellLand", prefix = "nsi2", default)]
	pub zustell_land: Option<LandEnum>, 
	#[yaserde(rename = "ZustellLandZuPruefen", prefix = "nsi2", default)]
	pub zustell_land_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AbweichenderNameFirmenname", prefix = "nsi2", default)]
	pub abweichender_name_firmenname: Option<String>, 
	#[yaserde(rename = "AbweichenderNameFirmennameZuPruefen", prefix = "nsi2", default)]
	pub abweichender_name_firmenname_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Email", prefix = "nsi2", default)]
	pub email: Option<String>, 
	#[yaserde(rename = "EmailZuPruefen", prefix = "nsi2", default)]
	pub email_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Telefon", prefix = "nsi2", default)]
	pub telefon: Option<String>, 
	#[yaserde(rename = "TelefonZuPruefen", prefix = "nsi2", default)]
	pub telefon_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Fax", prefix = "nsi2", default)]
	pub fax: Option<ErweiterterString>, 
	#[yaserde(rename = "FaxZuPruefen", prefix = "nsi2", default)]
	pub fax_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Webseite", prefix = "nsi2", default)]
	pub webseite: Option<ErweiterterString>, 
	#[yaserde(rename = "WebseiteZuPruefen", prefix = "nsi2", default)]
	pub webseite_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ImHandelsregisterEingetragen", prefix = "nsi2", default)]
	pub im_handelsregister_eingetragen: Option<bool>, 
	#[yaserde(rename = "ImHandelsregisterEingetragenZuPruefen", prefix = "nsi2", default)]
	pub im_handelsregister_eingetragen_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "RegistergerichtId", prefix = "nsi2", default)]
	pub registergericht_id: Option<KatalogwertId>, 
	#[yaserde(rename = "RegistergerichtIdZuPruefen", prefix = "nsi2", default)]
	pub registergericht_id_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "RegisternummerPraefix", prefix = "nsi2", default)]
	pub registernummer_praefix: Option<RegisterNrPraefixEnum>, 
	#[yaserde(rename = "RegisternummerPraefixZuPruefen", prefix = "nsi2", default)]
	pub registernummer_praefix_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Registernummer", prefix = "nsi2", default)]
	pub registernummer: Option<String>, 
	#[yaserde(rename = "RegisternummerZuPruefen", prefix = "nsi2", default)]
	pub registernummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "RegistergerichtAusland", prefix = "nsi2", default)]
	pub registergericht_ausland: Option<String>, 
	#[yaserde(rename = "RegistergerichtAuslandZuPruefen", prefix = "nsi2", default)]
	pub registergericht_ausland_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "RegisternummerAusland", prefix = "nsi2", default)]
	pub registernummer_ausland: Option<String>, 
	#[yaserde(rename = "RegisternummerAuslandZuPruefen", prefix = "nsi2", default)]
	pub registernummer_ausland_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AcerCode", prefix = "nsi2", default)]
	pub acer_code: Option<ErweiterterString>, 
	#[yaserde(rename = "AcerCodeZuPruefen", prefix = "nsi2", default)]
	pub acer_code_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Umsatzsteueridentifikationsnummer", prefix = "nsi2", default)]
	pub umsatzsteueridentifikationsnummer: Option<ErweiterterString>, 
	#[yaserde(rename = "UmsatzsteueridentifikationsnummerZuPruefen", prefix = "nsi2", default)]
	pub umsatzsteueridentifikationsnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "HauptwirtdschaftszweigGruppe", prefix = "nsi2", default)]
	pub hauptwirtdschaftszweig_gruppe: Option<NaceGruppeEnum>, 
	#[yaserde(rename = "HauptwirtdschaftszweigGruppeZuPruefen", prefix = "nsi2", default)]
	pub hauptwirtdschaftszweig_gruppe_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Kmu", prefix = "nsi2", default)]
	pub kmu: Option<bool>, 
	#[yaserde(rename = "KmuZuPruefen", prefix = "nsi2", default)]
	pub kmu_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "EinkommenAusSelbstaendigerArbeit", prefix = "nsi2", default)]
	pub einkommen_aus_selbstaendiger_arbeit: Option<bool>, 
	#[yaserde(rename = "EinkommenAusSelbstaendigerArbeitZuPruefen", prefix = "nsi2", default)]
	pub einkommen_aus_selbstaendiger_arbeit_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungParameter {
	#[yaserde(flatten, default)]
	pub set_korrektur_vorschlag_stromerzeugungseinheit_parameter_basis: SetKorrekturVorschlagStromerzeugungseinheitParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "technologie", prefix = "nsi2", default)]
	pub technologie: Option<TechnologieVerbrennungsanlageEnum>, 
	#[yaserde(rename = "technologieZuPruefen", prefix = "nsi2", default)]
	pub technologie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "energietraeger", prefix = "nsi2", default)]
	pub energietraeger: Option<EnergietraegerEnum>, 
	#[yaserde(rename = "energietraegerZuPruefen", prefix = "nsi2", default)]
	pub energietraeger_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "BestandteilEEGAnlage", prefix = "nsi2", default)]
	pub bestandteil_eeg_anlage: Option<bool>, 
	#[yaserde(rename = "BestandteilEEGAnlageZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_eeg_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: Option<EegMastrNummerId>, 
	#[yaserde(rename = "eegMastrNummerZuPruefen", prefix = "nsi2", default)]
	pub eeg_mastr_nummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAnlagenkennzifferAnlagenregister", prefix = "nsi2", default)]
	pub eeg_anlagenkennziffer_anlagenregister: Option<ErweiterterString>, 
	#[yaserde(rename = "eegAnlagenkennzifferAnlagenregisterZuPruefen", prefix = "nsi2", default)]
	pub eeg_anlagenkennziffer_anlagenregister_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInstallierteLeistung", prefix = "nsi2", default)]
	pub eeg_installierte_leistung: Option<f64>, 
	#[yaserde(rename = "eegInstallierteLeistungZuPruefen", prefix = "nsi2", default)]
	pub eeg_installierte_leistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInbetriebnahmedatum", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "eegInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "BestandteilKWKAnlage", prefix = "nsi2", default)]
	pub bestandteil_kwk_anlage: Option<bool>, 
	#[yaserde(rename = "BestandteilKWKAnlageZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_kwk_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkMastrNummer", prefix = "nsi2", default)]
	pub kwk_mastr_nummer: Option<KwkMastrNummerId>, 
	#[yaserde(rename = "kwkMastrNummerZuPruefen", prefix = "nsi2", default)]
	pub kwk_mastr_nummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkAusschreibungZuschlag", prefix = "nsi2", default)]
	pub kwk_ausschreibung_zuschlag: Option<bool>, 
	#[yaserde(rename = "kwkAusschreibungZuschlagZuPruefen", prefix = "nsi2", default)]
	pub kwk_ausschreibung_zuschlag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkZuschlagnummer", prefix = "nsi2", default)]
	pub kwk_zuschlagnummer: Option<String>, 
	#[yaserde(rename = "kwkZuschlagnummerZuPruefen", prefix = "nsi2", default)]
	pub kwk_zuschlagnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkInbetriebnahmedatum", prefix = "nsi2", default)]
	pub kwk_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "kwkInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub kwk_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkThermischeNutzleistung", prefix = "nsi2", default)]
	pub kwk_thermische_nutzleistung: Option<f64>, 
	#[yaserde(rename = "kwkThermischeNutzleistungZuPruefen", prefix = "nsi2", default)]
	pub kwk_thermische_nutzleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkElektrischeKwkLeistung", prefix = "nsi2", default)]
	pub kwk_elektrische_kwk_leistung: Option<f64>, 
	#[yaserde(rename = "kwkElektrischeKwkLeistungZuPruefen", prefix = "nsi2", default)]
	pub kwk_elektrische_kwk_leistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ReserveartNachDemEnWG", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg: Option<ReserveartEnum>, 
	#[yaserde(rename = "ReserveartNachDemEnWGZuPruefen", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserve", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve: Option<String>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserveZuPruefen", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitGasVerbraucherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitGasVerbraucherParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitBiomasseParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitBiomasseParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitGasSpeicherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitGasSpeicherParameter {
	#[yaserde(flatten, default)]
	pub set_korrektur_vorschlag_einheit_parameter_basis: SetKorrekturVorschlagEinheitParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "speichername", prefix = "nsi2", default)]
	pub speichername: Option<String>, 
	#[yaserde(rename = "speichernameZuPruefen", prefix = "nsi2", default)]
	pub speichername_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "speicherart", prefix = "nsi2", default)]
	pub speicherart: Option<GasSpeicherartEnum>, 
	#[yaserde(rename = "speicherartZuPruefen", prefix = "nsi2", default)]
	pub speicherart_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "maximalNutzbaresArbeitsgasvolumen", prefix = "nsi2", default)]
	pub maximal_nutzbares_arbeitsgasvolumen: Option<f64>, 
	#[yaserde(rename = "maximalNutzbaresArbeitsgasvolumenZuPruefen", prefix = "nsi2", default)]
	pub maximal_nutzbares_arbeitsgasvolumen_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "maximaleEinspeicherleistung", prefix = "nsi2", default)]
	pub maximale_einspeicherleistung: Option<f64>, 
	#[yaserde(rename = "maximaleEinspeicherleistungZuPruefen", prefix = "nsi2", default)]
	pub maximale_einspeicherleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "maximaleAusspeicherleistung", prefix = "nsi2", default)]
	pub maximale_ausspeicherleistung: Option<f64>, 
	#[yaserde(rename = "maximaleAusspeicherleistungZuPruefen", prefix = "nsi2", default)]
	pub maximale_ausspeicherleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "durchschnittlicherBrennwert", prefix = "nsi2", default)]
	pub durchschnittlicher_brennwert: Option<f64>, 
	#[yaserde(rename = "durchschnittlicherBrennwertZuPruefen", prefix = "nsi2", default)]
	pub durchschnittlicher_brennwert_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "speGasSpeicheranlage", prefix = "nsi2", default)]
	pub spe_gas_speicheranlage: Option<GasSpeicherMastrNummerId>, 
	#[yaserde(rename = "speGasSpeicheranlageZuPruefen", prefix = "nsi2", default)]
	pub spe_gas_speicheranlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "weic", prefix = "nsi2", default)]
	pub weic: Option<ErweiterterString>, 
	#[yaserde(rename = "weicZuPruefen", prefix = "nsi2", default)]
	pub weic_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitStromSpeicherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitStromSpeicherParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitStromSpeicherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitStromSpeicherParameter {
	#[yaserde(flatten, default)]
	pub set_korrektur_vorschlag_einheit_parameter_basis: SetKorrekturVorschlagEinheitParameterBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "weic", prefix = "nsi2", default)]
	pub weic: Option<ErweiterterString>, 
	#[yaserde(rename = "weicZuPruefen", prefix = "nsi2", default)]
	pub weic_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "weicDisplayName", prefix = "nsi2", default)]
	pub weic_display_name: Option<String>, 
	#[yaserde(rename = "weicDisplayNameZuPruefen", prefix = "nsi2", default)]
	pub weic_display_name_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kraftwerksnummer", prefix = "nsi2", default)]
	pub kraftwerksnummer: Option<ErweiterterString>, 
	#[yaserde(rename = "kraftwerksnummerZuPruefen", prefix = "nsi2", default)]
	pub kraftwerksnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "bruttoleistung", prefix = "nsi2", default)]
	pub bruttoleistung: Option<f64>, 
	#[yaserde(rename = "bruttoleistungZuPruefen", prefix = "nsi2", default)]
	pub bruttoleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nettonennleistung", prefix = "nsi2", default)]
	pub nettonennleistung: Option<f64>, 
	#[yaserde(rename = "nettonennleistungZuPruefen", prefix = "nsi2", default)]
	pub nettonennleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "technologie", prefix = "nsi2", default)]
	pub technologie: Option<TechnologieSpeicherEnum>, 
	#[yaserde(rename = "technologieZuPruefen", prefix = "nsi2", default)]
	pub technologie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "schwarzstartfaehigkeit", prefix = "nsi2", default)]
	pub schwarzstartfaehigkeit: Option<bool>, 
	#[yaserde(rename = "schwarzstartfaehigkeitZuPruefen", prefix = "nsi2", default)]
	pub schwarzstartfaehigkeit_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "inselbetriebsfaehigkeit", prefix = "nsi2", default)]
	pub inselbetriebsfaehigkeit: Option<bool>, 
	#[yaserde(rename = "inselbetriebsfaehigkeitZuPruefen", prefix = "nsi2", default)]
	pub inselbetriebsfaehigkeit_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitNb", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_nb: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitNbZuPruefen", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_nb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitDv", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_dv: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitDvZuPruefen", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_dv_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "acDcKoppelung", prefix = "nsi2", default)]
	pub ac_dc_koppelung: Option<SystemkopplungEnum>, 
	#[yaserde(rename = "acDcKoppelungZuPruefen", prefix = "nsi2", default)]
	pub ac_dc_koppelung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "batterietechnologie", prefix = "nsi2", default)]
	pub batterietechnologie: Option<BatterieTechnologieEnum>, 
	#[yaserde(rename = "batterietechnologieZuPruefen", prefix = "nsi2", default)]
	pub batterietechnologie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "praequalifiziertFuerRegelenergie", prefix = "nsi2", default)]
	pub praequalifiziert_fuer_regelenergie: Option<bool>, 
	#[yaserde(rename = "praequalifiziertFuerRegelenergieZuPruefen", prefix = "nsi2", default)]
	pub praequalifiziert_fuer_regelenergie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "LeistungsaufnahmeBeimEinspeichern", prefix = "nsi2", default)]
	pub leistungsaufnahme_beim_einspeichern: Option<f64>, 
	#[yaserde(rename = "LeistungsaufnahmeBeimEinspeichernZuPruefen", prefix = "nsi2", default)]
	pub leistungsaufnahme_beim_einspeichern_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "pumpbetriebKontinuierlichRegelbar", prefix = "nsi2", default)]
	pub pumpbetrieb_kontinuierlich_regelbar: Option<bool>, 
	#[yaserde(rename = "pumpbetriebKontinuierlichRegelbarZuPruefen", prefix = "nsi2", default)]
	pub pumpbetrieb_kontinuierlich_regelbar_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Pumpspeichertechnologie", prefix = "nsi2", default)]
	pub pumpspeichertechnologie: Option<PumpspeichertechnologieEnum>, 
	#[yaserde(rename = "PumpspeichertechnologieZuPruefen", prefix = "nsi2", default)]
	pub pumpspeichertechnologie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einspeisungsart", prefix = "nsi2", default)]
	pub einspeisungsart: Option<EinspeisungsartEnum>, 
	#[yaserde(rename = "einspeisungsartZuPruefen", prefix = "nsi2", default)]
	pub einspeisungsart_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "bestandteilGrenzkraftwerk", prefix = "nsi2", default)]
	pub bestandteil_grenzkraftwerk: Option<bool>, 
	#[yaserde(rename = "bestandteilGrenzkraftwerkZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_grenzkraftwerk_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nettonennleistungDeutschland", prefix = "nsi2", default)]
	pub nettonennleistung_deutschland: Option<f64>, 
	#[yaserde(rename = "nettonennleistungDeutschlandZuPruefen", prefix = "nsi2", default)]
	pub nettonennleistung_deutschland_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "notstromaggregat", prefix = "nsi2", default)]
	pub notstromaggregat: Option<bool>, 
	#[yaserde(rename = "notstromaggregatZuPruefen", prefix = "nsi2", default)]
	pub notstromaggregat_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einsatzort", prefix = "nsi2", default)]
	pub einsatzort: Option<EinsatzortEnum>, 
	#[yaserde(rename = "einsatzortZuPruefen", prefix = "nsi2", default)]
	pub einsatzort_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "zugeordneteWirkleistungWechselrichter", prefix = "nsi2", default)]
	pub zugeordnete_wirkleistung_wechselrichter: Option<f64>, 
	#[yaserde(rename = "zugeordneteWirkleistungWechselrichterZuPruefen", prefix = "nsi2", default)]
	pub zugeordnete_wirkleistung_wechselrichter_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "speNutzbareSpeicherkapazitaet", prefix = "nsi2", default)]
	pub spe_nutzbare_speicherkapazitaet: Option<f64>, 
	#[yaserde(rename = "speNutzbareSpeicherkapazitaetZuPruefen", prefix = "nsi2", default)]
	pub spe_nutzbare_speicherkapazitaet_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "BestandteilEEGAnlage", prefix = "nsi2", default)]
	pub bestandteil_eeg_anlage: Option<bool>, 
	#[yaserde(rename = "BestandteilEEGAnlageZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_eeg_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInbetriebnahmedatum", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "eegInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegZuschlagsnummer", prefix = "nsi2", default)]
	pub eeg_zuschlagsnummer: Option<String>, 
	#[yaserde(rename = "eegZuschlagsnummerZuPruefen", prefix = "nsi2", default)]
	pub eeg_zuschlagsnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAusschreibungZuschlag", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag: Option<bool>, 
	#[yaserde(rename = "eegAusschreibungZuschlagZuPruefen", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ReserveartNachDemEnWG", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg: Option<ReserveartEnum>, 
	#[yaserde(rename = "ReserveartNachDemEnWGZuPruefen", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserve", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve: Option<String>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserveZuPruefen", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "DeleteKorrekturVorschlagMarktakteurParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct DeleteKorrekturVorschlagMarktakteurParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: Option<i32>, 
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitWasserParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitWasserParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitSolarAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitSolarAntwort {
	#[yaserde(flatten, default)]
	pub get_korrektur_vorschlag_stromerzeugungseinheit_antwort_basis: GetKorrekturVorschlagStromerzeugungseinheitAntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "zugeordneteWirkleistungWechselrichter", prefix = "nsi2", default)]
	pub zugeordnete_wirkleistung_wechselrichter: Option<f64>, 
	#[yaserde(rename = "zugeordneteWirkleistungWechselrichterZuPruefen", prefix = "nsi2", default)]
	pub zugeordnete_wirkleistung_wechselrichter_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "anzahlModule", prefix = "nsi2", default)]
	pub anzahl_module: Option<i32>, 
	#[yaserde(rename = "anzahlModuleZuPruefen", prefix = "nsi2", default)]
	pub anzahl_module_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "lage", prefix = "nsi2", default)]
	pub lage: Option<SolarLageEnum>, 
	#[yaserde(rename = "lageZuPruefen", prefix = "nsi2", default)]
	pub lage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "leistungsbegrenzung", prefix = "nsi2", default)]
	pub leistungsbegrenzung: Option<SolarLeistungsbegrenzungEnum>, 
	#[yaserde(rename = "leistungsbegrenzungZuPruefen", prefix = "nsi2", default)]
	pub leistungsbegrenzung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einheitlicheAusrichtungUndNeigungswinkel", prefix = "nsi2", default)]
	pub einheitliche_ausrichtung_und_neigungswinkel: Option<bool>, 
	#[yaserde(rename = "einheitlicheAusrichtungUndNeigungswinkelZuPruefen", prefix = "nsi2", default)]
	pub einheitliche_ausrichtung_und_neigungswinkel_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "hauptausrichtung", prefix = "nsi2", default)]
	pub hauptausrichtung: Option<AnlagenartSolarAusrichtungEnum>, 
	#[yaserde(rename = "hauptausrichtungZuPruefen", prefix = "nsi2", default)]
	pub hauptausrichtung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "hauptausrichtungNeigungswinkel", prefix = "nsi2", default)]
	pub hauptausrichtung_neigungswinkel: Option<AnlagenartSolarNeigungswinkelEnum>, 
	#[yaserde(rename = "hauptausrichtungNeigungswinkelZuPruefen", prefix = "nsi2", default)]
	pub hauptausrichtung_neigungswinkel_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nebenausrichtung", prefix = "nsi2", default)]
	pub nebenausrichtung: Option<AnlagenartSolarAusrichtungEnum>, 
	#[yaserde(rename = "nebenausrichtungZuPruefen", prefix = "nsi2", default)]
	pub nebenausrichtung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nebenausrichtungNeigungswinkel", prefix = "nsi2", default)]
	pub nebenausrichtung_neigungswinkel: Option<AnlagenartSolarNeigungswinkelEnum>, 
	#[yaserde(rename = "nebenausrichtungNeigungswinkelZuPruefen", prefix = "nsi2", default)]
	pub nebenausrichtung_neigungswinkel_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "inAnspruchGenommeneFlaeche", prefix = "nsi2", default)]
	pub in_anspruch_genommene_flaeche: Option<f64>, 
	#[yaserde(rename = "inAnspruchGenommeneFlaecheZuPruefen", prefix = "nsi2", default)]
	pub in_anspruch_genommene_flaeche_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "artDerFlaeche", prefix = "nsi2", default)]
	pub art_der_flaeche: Vec<SolarFlaechenartEnum>, 
	#[yaserde(rename = "artDerFlaecheZuPruefen", prefix = "nsi2", default)]
	pub art_der_flaeche_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "inAnspruchGenommeneLandwirtschaftlichGenutzteFlaeche", prefix = "nsi2", default)]
	pub in_anspruch_genommene_landwirtschaftlich_genutzte_flaeche: Option<f64>, 
	#[yaserde(rename = "inAnspruchGenommeneLandwirtschaftlichGenutzteFlaecheZuPruefen", prefix = "nsi2", default)]
	pub in_anspruch_genommene_landwirtschaftlich_genutzte_flaeche_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nutzungsbereich", prefix = "nsi2", default)]
	pub nutzungsbereich: Option<NutzungsbereichEnum>, 
	#[yaserde(rename = "nutzungsbereichZuPruefen", prefix = "nsi2", default)]
	pub nutzungsbereich_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: Option<EegMastrNummerId>, 
	#[yaserde(rename = "eegMastrNummerZuPreufen", prefix = "nsi2", default)]
	pub eeg_mastr_nummer_zu_preufen: Option<bool>, 
	#[yaserde(rename = "eegInanspruchnahmeZahlungNachEeg", prefix = "nsi2", default)]
	pub eeg_inanspruchnahme_zahlung_nach_eeg: Option<bool>, 
	#[yaserde(rename = "eegInanspruchnahmeZahlungNachEegZuPruefen", prefix = "nsi2", default)]
	pub eeg_inanspruchnahme_zahlung_nach_eeg_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAnlagenschluessel", prefix = "nsi2", default)]
	pub eeg_anlagenschluessel: ErweiterterString, 
	#[yaserde(rename = "eegAnlagenschluesselZuPruefen", prefix = "nsi2", default)]
	pub eeg_anlagenschluessel_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAnlagenkennzifferAnlagenregister", prefix = "nsi2", default)]
	pub eeg_anlagenkennziffer_anlagenregister: ErweiterterString, 
	#[yaserde(rename = "eegAnlagenkennzifferAnlagenregisterZuPruefen", prefix = "nsi2", default)]
	pub eeg_anlagenkennziffer_anlagenregister_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInbetriebnahmedatum", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "eegInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegRegistrierungsnummerPvMeldeportal", prefix = "nsi2", default)]
	pub eeg_registrierungsnummer_pv_meldeportal: ErweiterterString, 
	#[yaserde(rename = "eegRegistrierungsnummerPvMeldeportalZuPruefen", prefix = "nsi2", default)]
	pub eeg_registrierungsnummer_pv_meldeportal_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegMieterstromZugeordnet", prefix = "nsi2", default)]
	pub eeg_mieterstrom_zugeordnet: Option<bool>, 
	#[yaserde(rename = "eegMieterstromZugeordnetZuPruefen", prefix = "nsi2", default)]
	pub eeg_mieterstrom_zugeordnet_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegMieterstromRegistrierungsdatum", prefix = "nsi2", default)]
	pub eeg_mieterstrom_registrierungsdatum: Option<String>, 
	#[yaserde(rename = "eegMieterstromRegistrierungsdatumZuPruefen", prefix = "nsi2", default)]
	pub eeg_mieterstrom_registrierungsdatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegMieterstromErsteZuordnungZuschlag", prefix = "nsi2", default)]
	pub eeg_mieterstrom_erste_zuordnung_zuschlag: Option<String>, 
	#[yaserde(rename = "eegMieterstromErsteZuordnungZuschlagZuPruefen", prefix = "nsi2", default)]
	pub eeg_mieterstrom_erste_zuordnung_zuschlag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAusschreibungZuschlag", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag: Option<bool>, 
	#[yaserde(rename = "eegAusschreibungZuschlagZuPruefen", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegZuschlagsnummer", prefix = "nsi2", default)]
	pub eeg_zuschlagsnummer: Option<String>, 
	#[yaserde(rename = "eegZuschlagsnummerZuPruefen", prefix = "nsi2", default)]
	pub eeg_zuschlagsnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegZugeordneteGebotsmenge", prefix = "nsi2", default)]
	pub eeg_zugeordnete_gebotsmenge: Option<f64>, 
	#[yaserde(rename = "eegZugeordneteGebotsmengeZuPruefen", prefix = "nsi2", default)]
	pub eeg_zugeordnete_gebotsmenge_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Buergerenergie", prefix = "nsi2", default)]
	pub buergerenergie: Option<bool>, 
	#[yaserde(rename = "BuergerenergieZuPruefen", prefix = "nsi2", default)]
	pub buergerenergie_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitGasSpeicherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitGasSpeicherAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitGasVerbraucherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitGasVerbraucherAntwort {
	#[yaserde(flatten, default)]
	pub get_korrektur_vorschlag_einheit_antwort_basis: GetKorrekturVorschlagEinheitAntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "maximaleGasbezugsleistung", prefix = "nsi2", default)]
	pub maximale_gasbezugsleistung: Option<f64>, 
	#[yaserde(rename = "maximaleGasbezugsleistungZuPruefen", prefix = "nsi2", default)]
	pub maximale_gasbezugsleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einheitDientDerStromerzeugung", prefix = "nsi2", default)]
	pub einheit_dient_der_stromerzeugung: Option<bool>, 
	#[yaserde(rename = "einheitDientDerStromerzeugungZuPruefen", prefix = "nsi2", default)]
	pub einheit_dient_der_stromerzeugung_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitGasErzeugerAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitGasErzeugerAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitStromVerbraucherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitStromVerbraucherAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitWasserAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitWasserAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitStromVerbraucherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitStromVerbraucherAntwort {
	#[yaserde(flatten, default)]
	pub get_korrektur_vorschlag_einheit_antwort_basis: GetKorrekturVorschlagEinheitAntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "einheitMastrNummer", prefix = "nsi2", default)]
	pub einheit_mastr_nummer: Option<EinheitMastrNummerId>, 
	#[yaserde(rename = "NameStromverbrauchseinheit", prefix = "nsi2", default)]
	pub name_stromverbrauchseinheit: Option<String>, 
	#[yaserde(rename = "NameStromverbrauchseinheitZuPruefen", prefix = "nsi2", default)]
	pub name_stromverbrauchseinheit_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einsatzverantwortlicher", prefix = "nsi2", default)]
	pub einsatzverantwortlicher: Option<String>, 
	#[yaserde(rename = "einsatzverantwortlicherZuPruefen", prefix = "nsi2", default)]
	pub einsatzverantwortlicher_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "technischesInbetriebnahmedatum", prefix = "nsi2", default)]
	pub technisches_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "technischesInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub technisches_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "anzahlStromverbrauchseinheitenGroesser50Mw", prefix = "nsi2", default)]
	pub anzahl_stromverbrauchseinheiten_groesser_50_mw: Option<i32>, 
	#[yaserde(rename = "anzahlStromverbrauchseinheitenGroesser50MwZuPruefen", prefix = "nsi2", default)]
	pub anzahl_stromverbrauchseinheiten_groesser_50_mw_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitGasVerbraucherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitGasVerbraucherAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungAntwort {
	#[yaserde(flatten, default)]
	pub get_korrektur_vorschlag_stromerzeugungseinheit_antwort_basis: GetKorrekturVorschlagStromerzeugungseinheitAntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "technologie", prefix = "nsi2", default)]
	pub technologie: Option<TechnologieVerbrennungsanlageEnum>, 
	#[yaserde(rename = "technologieZuPruefen", prefix = "nsi2", default)]
	pub technologie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "energietraeger", prefix = "nsi2", default)]
	pub energietraeger: Option<EnergietraegerEnum>, 
	#[yaserde(rename = "energietraegerZuPruefen", prefix = "nsi2", default)]
	pub energietraeger_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "BestandteilEEGAnlage", prefix = "nsi2", default)]
	pub bestandteil_eeg_anlage: Option<bool>, 
	#[yaserde(rename = "BestandteilEEGAnlageZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_eeg_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: Option<EegMastrNummerId>, 
	#[yaserde(rename = "eegMastrNummerZuPruefen", prefix = "nsi2", default)]
	pub eeg_mastr_nummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAnlagenschluessel", prefix = "nsi2", default)]
	pub eeg_anlagenschluessel: ErweiterterString, 
	#[yaserde(rename = "eegAnlagenschluesselZuPruefen", prefix = "nsi2", default)]
	pub eeg_anlagenschluessel_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAnlagenkennzifferAnlagenregister", prefix = "nsi2", default)]
	pub eeg_anlagenkennziffer_anlagenregister: ErweiterterString, 
	#[yaserde(rename = "eegAnlagenkennzifferAnlagenregisterZuPruefen", prefix = "nsi2", default)]
	pub eeg_anlagenkennziffer_anlagenregister_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInstallierteLeistung", prefix = "nsi2", default)]
	pub eeg_installierte_leistung: Option<f64>, 
	#[yaserde(rename = "eegInstallierteLeistungZuPruefen", prefix = "nsi2", default)]
	pub eeg_installierte_leistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInbetriebnahmedatum", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "eegInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "BestandteilKWKAnlage", prefix = "nsi2", default)]
	pub bestandteil_kwk_anlage: Option<bool>, 
	#[yaserde(rename = "BestandteilKWKAnlageZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_kwk_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkMastrNummer", prefix = "nsi2", default)]
	pub kwk_mastr_nummer: Option<KwkMastrNummerId>, 
	#[yaserde(rename = "kwkMastrNummerZuPruefen", prefix = "nsi2", default)]
	pub kwk_mastr_nummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkAusschreibungZuschlag", prefix = "nsi2", default)]
	pub kwk_ausschreibung_zuschlag: Option<bool>, 
	#[yaserde(rename = "kwkAusschreibungZuschlagZuPruefen", prefix = "nsi2", default)]
	pub kwk_ausschreibung_zuschlag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkZuschlagnummer", prefix = "nsi2", default)]
	pub kwk_zuschlagnummer: Option<String>, 
	#[yaserde(rename = "kwkZuschlagnummerZuPruefen", prefix = "nsi2", default)]
	pub kwk_zuschlagnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkInbetriebnahmedatum", prefix = "nsi2", default)]
	pub kwk_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "kwkInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub kwk_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkThermischeNutzleistung", prefix = "nsi2", default)]
	pub kwk_thermische_nutzleistung: Option<f64>, 
	#[yaserde(rename = "kwkThermischeNutzleistungZuPruefen", prefix = "nsi2", default)]
	pub kwk_thermische_nutzleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkElektrischeKwkLeistung", prefix = "nsi2", default)]
	pub kwk_elektrische_kwk_leistung: Option<f64>, 
	#[yaserde(rename = "kwkElektrischeKwkLeistungZuPruefen", prefix = "nsi2", default)]
	pub kwk_elektrische_kwk_leistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ReserveartNachDemEnWG", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg: Option<ReserveartEnum>, 
	#[yaserde(rename = "ReserveartNachDemEnWGZuPruefen", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserve", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve: Option<String>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserveZuPruefen", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitGasSpeicherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitGasSpeicherAntwort {
	#[yaserde(flatten, default)]
	pub get_korrektur_vorschlag_einheit_antwort_basis: GetKorrekturVorschlagEinheitAntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "speichername", prefix = "nsi2", default)]
	pub speichername: Option<String>, 
	#[yaserde(rename = "speichernameZuPruefen", prefix = "nsi2", default)]
	pub speichername_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "speicherart", prefix = "nsi2", default)]
	pub speicherart: Option<GasSpeicherartEnum>, 
	#[yaserde(rename = "speicherartZuPruefen", prefix = "nsi2", default)]
	pub speicherart_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "maximalNutzbaresArbeitsgasvolumen", prefix = "nsi2", default)]
	pub maximal_nutzbares_arbeitsgasvolumen: Option<f64>, 
	#[yaserde(rename = "maximalNutzbaresArbeitsgasvolumenZuPruefen", prefix = "nsi2", default)]
	pub maximal_nutzbares_arbeitsgasvolumen_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "maximaleEinspeicherleistung", prefix = "nsi2", default)]
	pub maximale_einspeicherleistung: Option<f64>, 
	#[yaserde(rename = "maximaleEinspeicherleistungZuPruefen", prefix = "nsi2", default)]
	pub maximale_einspeicherleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "maximaleAusspeicherleistung", prefix = "nsi2", default)]
	pub maximale_ausspeicherleistung: Option<f64>, 
	#[yaserde(rename = "maximaleAusspeicherleistungZuPruefen", prefix = "nsi2", default)]
	pub maximale_ausspeicherleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "durchschnittlicherBrennwert", prefix = "nsi2", default)]
	pub durchschnittlicher_brennwert: Option<f64>, 
	#[yaserde(rename = "durchschnittlicherBrennwertZuPruefen", prefix = "nsi2", default)]
	pub durchschnittlicher_brennwert_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "speGasSpeicheranlage", prefix = "nsi2", default)]
	pub spe_gas_speicheranlage: Option<GasSpeicherMastrNummerId>, 
	#[yaserde(rename = "speGasSpeicheranlageZuPruefen", prefix = "nsi2", default)]
	pub spe_gas_speicheranlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "weic", prefix = "nsi2", default)]
	pub weic: ErweiterterString, 
	#[yaserde(rename = "weicZuPruefen", prefix = "nsi2", default)]
	pub weic_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagAntwortBasis",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagAntwortBasis {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: i32, 
	#[yaserde(rename = "beschreibung", prefix = "nsi2", default)]
	pub beschreibung: Option<String>, 
	#[yaserde(rename = "letzteAenderung", prefix = "nsi2", default)]
	pub letzte_aenderung: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitAntwortBasis",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitAntwortBasis {
	#[yaserde(flatten, default)]
	pub get_korrektur_vorschlag_antwort_basis: GetKorrekturVorschlagAntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "strasse", prefix = "nsi2", default)]
	pub strasse: Option<String>, 
	#[yaserde(rename = "strasseZuPruefen", prefix = "nsi2", default)]
	pub strasse_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "strasseNichtGefunden", prefix = "nsi2", default)]
	pub strasse_nicht_gefunden: Option<bool>, 
	#[yaserde(rename = "hausnummer", prefix = "nsi2", default)]
	pub hausnummer: ErweiterterString, 
	#[yaserde(rename = "hausnummerZuPruefen", prefix = "nsi2", default)]
	pub hausnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "hausnummerNichtGefunden", prefix = "nsi2", default)]
	pub hausnummer_nicht_gefunden: Option<bool>, 
	#[yaserde(rename = "adresszusatz", prefix = "nsi2", default)]
	pub adresszusatz: Option<String>, 
	#[yaserde(rename = "adresszusatzZuPruefen", prefix = "nsi2", default)]
	pub adresszusatz_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "postleitzahl", prefix = "nsi2", default)]
	pub postleitzahl: Option<String>, 
	#[yaserde(rename = "postleitzahlZuPruefen", prefix = "nsi2", default)]
	pub postleitzahl_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "gemarkung", prefix = "nsi2", default)]
	pub gemarkung: Option<String>, 
	#[yaserde(rename = "gemarkungZuPruefen", prefix = "nsi2", default)]
	pub gemarkung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "flurFlurstuecknummern", prefix = "nsi2", default)]
	pub flur_flurstuecknummern: Option<String>, 
	#[yaserde(rename = "flurFlurstuecknummernZuPruefen", prefix = "nsi2", default)]
	pub flur_flurstuecknummern_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ort", prefix = "nsi2", default)]
	pub ort: Option<String>, 
	#[yaserde(rename = "ortZuPruefen", prefix = "nsi2", default)]
	pub ort_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "bundesland", prefix = "nsi2", default)]
	pub bundesland: Option<BundeslaenderEinheitenEnum>, 
	#[yaserde(rename = "bundeslandZuPruefen", prefix = "nsi2", default)]
	pub bundesland_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "land", prefix = "nsi2", default)]
	pub land: Option<LaenderEinheitenEnum>, 
	#[yaserde(rename = "landZuPruefen", prefix = "nsi2", default)]
	pub land_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "laengengrad", prefix = "nsi2", default)]
	pub laengengrad: Option<f64>, 
	#[yaserde(rename = "laengengradZuPruefen", prefix = "nsi2", default)]
	pub laengengrad_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "breitengrad", prefix = "nsi2", default)]
	pub breitengrad: Option<f64>, 
	#[yaserde(rename = "breitengradZuPruefen", prefix = "nsi2", default)]
	pub breitengrad_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "utmZonenwert", prefix = "nsi2", default)]
	pub utm_zonenwert: Option<i32>, 
	#[yaserde(rename = "utmZonenwertZuPruefen", prefix = "nsi2", default)]
	pub utm_zonenwert_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "utmEast", prefix = "nsi2", default)]
	pub utm_east: Option<f64>, 
	#[yaserde(rename = "utmEastZuPruefen", prefix = "nsi2", default)]
	pub utm_east_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "utmNorth", prefix = "nsi2", default)]
	pub utm_north: Option<f64>, 
	#[yaserde(rename = "utmNorthZuPruefen", prefix = "nsi2", default)]
	pub utm_north_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "gaussKruegerHoch", prefix = "nsi2", default)]
	pub gauss_krueger_hoch: Option<f64>, 
	#[yaserde(rename = "gaussKruegerHochZuPruefen", prefix = "nsi2", default)]
	pub gauss_krueger_hoch_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "gaussKruegerRechts", prefix = "nsi2", default)]
	pub gauss_krueger_rechts: Option<f64>, 
	#[yaserde(rename = "gaussKruegerRechtsZuPruefen", prefix = "nsi2", default)]
	pub gauss_krueger_rechts_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "inbetriebnahmedatum", prefix = "nsi2", default)]
	pub inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "inbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "datumEndgueltigeStilllegung", prefix = "nsi2", default)]
	pub datum_endgueltige_stilllegung: Option<String>, 
	#[yaserde(rename = "datumEndgueltigeStilllegungZuPruefen", prefix = "nsi2", default)]
	pub datum_endgueltige_stilllegung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "geplantesInbetriebnahmedatum", prefix = "nsi2", default)]
	pub geplantes_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "geplantesInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub geplantes_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumDesBetreiberwechsels", prefix = "nsi2", default)]
	pub datum_des_betreiberwechsels: Option<String>, 
	#[yaserde(rename = "DatumDesBetreiberwechselsZuPruefen", prefix = "nsi2", default)]
	pub datum_des_betreiberwechsels_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagStromerzeugungseinheitAntwortBasis",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagStromerzeugungseinheitAntwortBasis {
	#[yaserde(flatten, default)]
	pub get_korrektur_vorschlag_einheit_antwort_basis: GetKorrekturVorschlagEinheitAntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "nameStromerzeugungseinheit", prefix = "nsi2", default)]
	pub name_stromerzeugungseinheit: Option<String>, 
	#[yaserde(rename = "nameStromerzeugungseinheitZuPruefen", prefix = "nsi2", default)]
	pub name_stromerzeugungseinheit_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einheitMastrNummer", prefix = "nsi2", default)]
	pub einheit_mastr_nummer: Option<EinheitMastrNummerId>, 
	#[yaserde(rename = "weic", prefix = "nsi2", default)]
	pub weic: ErweiterterString, 
	#[yaserde(rename = "weicZuPruefen", prefix = "nsi2", default)]
	pub weic_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "weicDisplayName", prefix = "nsi2", default)]
	pub weic_display_name: Option<String>, 
	#[yaserde(rename = "weicDisplayNameZuPruefen", prefix = "nsi2", default)]
	pub weic_display_name_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einsatzverantwortlicher", prefix = "nsi2", default)]
	pub einsatzverantwortlicher: Option<String>, 
	#[yaserde(rename = "einsatzverantwortlicherZuPruefen", prefix = "nsi2", default)]
	pub einsatzverantwortlicher_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kraftwerksnummer", prefix = "nsi2", default)]
	pub kraftwerksnummer: ErweiterterString, 
	#[yaserde(rename = "kraftwerksnummerZuPruefen", prefix = "nsi2", default)]
	pub kraftwerksnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "bruttoleistung", prefix = "nsi2", default)]
	pub bruttoleistung: Option<f64>, 
	#[yaserde(rename = "bruttoleistungZuPruefen", prefix = "nsi2", default)]
	pub bruttoleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nettonennleistung", prefix = "nsi2", default)]
	pub nettonennleistung: Option<f64>, 
	#[yaserde(rename = "nettonennleistungZuPruefen", prefix = "nsi2", default)]
	pub nettonennleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "praequalifiziertFuerRegelenergie", prefix = "nsi2", default)]
	pub praequalifiziert_fuer_regelenergie: Option<bool>, 
	#[yaserde(rename = "praequalifiziertFuerRegelenergieZuPruefen", prefix = "nsi2", default)]
	pub praequalifiziert_fuer_regelenergie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "schwarzstartfaehigkeit", prefix = "nsi2", default)]
	pub schwarzstartfaehigkeit: Option<bool>, 
	#[yaserde(rename = "schwarzstartfaehigkeitZuPruefen", prefix = "nsi2", default)]
	pub schwarzstartfaehigkeit_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "inselbetriebsfaehigkeit", prefix = "nsi2", default)]
	pub inselbetriebsfaehigkeit: Option<bool>, 
	#[yaserde(rename = "inselbetriebsfaehigkeitZuPruefen", prefix = "nsi2", default)]
	pub inselbetriebsfaehigkeit_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitNb", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_nb: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitNbZuPruefen", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_nb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitDv", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_dv: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitDvZuPruefen", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_dv_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einspeisungsart", prefix = "nsi2", default)]
	pub einspeisungsart: Option<EinspeisungsartEnum>, 
	#[yaserde(rename = "einspeisungsartZuPruefen", prefix = "nsi2", default)]
	pub einspeisungsart_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitBiomasseAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitBiomasseAntwort {
	#[yaserde(flatten, default)]
	pub get_korrektur_vorschlag_stromerzeugungseinheit_antwort_basis: GetKorrekturVorschlagStromerzeugungseinheitAntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "DatumBeginnVoruebergehendeStilllegung", prefix = "nsi2", default)]
	pub datum_beginn_voruebergehende_stilllegung: Option<String>, 
	#[yaserde(rename = "DatumBeginnVoruebergehendeStilllegungZuPruefen", prefix = "nsi2", default)]
	pub datum_beginn_voruebergehende_stilllegung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumWiederaufnahmeBetrieb", prefix = "nsi2", default)]
	pub datum_wiederaufnahme_betrieb: Option<String>, 
	#[yaserde(rename = "DatumWiederaufnahmeBetriebZuPruefen", prefix = "nsi2", default)]
	pub datum_wiederaufnahme_betrieb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "hauptbrennstoff", prefix = "nsi2", default)]
	pub hauptbrennstoff: Option<BiomasseBrennstoffEnum>, 
	#[yaserde(rename = "hauptbrennstoffZuPruefen", prefix = "nsi2", default)]
	pub hauptbrennstoff_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "technologie", prefix = "nsi2", default)]
	pub technologie: Option<TechnologieVerbrennungsanlageEnum>, 
	#[yaserde(rename = "technologieZuPruefen", prefix = "nsi2", default)]
	pub technologie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "BestandteilEEGAnlage", prefix = "nsi2", default)]
	pub bestandteil_eeg_anlage: Option<bool>, 
	#[yaserde(rename = "BestandteilEEGAnlageZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_eeg_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: Option<EegMastrNummerId>, 
	#[yaserde(rename = "eegMastrNummerZuPruefen", prefix = "nsi2", default)]
	pub eeg_mastr_nummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAnlagenschluessel", prefix = "nsi2", default)]
	pub eeg_anlagenschluessel: ErweiterterString, 
	#[yaserde(rename = "eegAnlagenschluesselZuPruefen", prefix = "nsi2", default)]
	pub eeg_anlagenschluessel_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAnlagenkennzifferAnlagenregister", prefix = "nsi2", default)]
	pub eeg_anlagenkennziffer_anlagenregister: ErweiterterString, 
	#[yaserde(rename = "eegAnlagenkennzifferAnlagenregisterZuPruefen", prefix = "nsi2", default)]
	pub eeg_anlagenkennziffer_anlagenregister_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInstallierteLeistung", prefix = "nsi2", default)]
	pub eeg_installierte_leistung: Option<f64>, 
	#[yaserde(rename = "eegInstallierteLeistungZuPruefen", prefix = "nsi2", default)]
	pub eeg_installierte_leistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInbetriebnahmedatum", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "eegInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAusschliesslicheVerwendungBiomasse", prefix = "nsi2", default)]
	pub eeg_ausschliessliche_verwendung_biomasse: Option<bool>, 
	#[yaserde(rename = "eegAusschliesslicheVerwendungBiomasseZuPruefen", prefix = "nsi2", default)]
	pub eeg_ausschliessliche_verwendung_biomasse_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAusschreibungZuschlag", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag: Option<bool>, 
	#[yaserde(rename = "eegAusschreibungZuschlagZuPruefen", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegBiogasZuschlagsnummer", prefix = "nsi2", default)]
	pub eeg_biogas_zuschlagsnummer: Option<String>, 
	#[yaserde(rename = "eegBiogasZuschlagsnummerZuPruefen", prefix = "nsi2", default)]
	pub eeg_biogas_zuschlagsnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegBiogasInanspruchnahmeFlexiPraemie", prefix = "nsi2", default)]
	pub eeg_biogas_inanspruchnahme_flexi_praemie: Option<bool>, 
	#[yaserde(rename = "eegBiogasInanspruchnahmeFlexiPraemieZuPruefen", prefix = "nsi2", default)]
	pub eeg_biogas_inanspruchnahme_flexi_praemie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegBiogasDatumInanspruchnahmeFlexiPraemie", prefix = "nsi2", default)]
	pub eeg_biogas_datum_inanspruchnahme_flexi_praemie: Option<String>, 
	#[yaserde(rename = "eegBiogasDatumInanspruchnahmeFlexiPraemieZuPruefen", prefix = "nsi2", default)]
	pub eeg_biogas_datum_inanspruchnahme_flexi_praemie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegBiogasLeistungserhoehung", prefix = "nsi2", default)]
	pub eeg_biogas_leistungserhoehung: Option<bool>, 
	#[yaserde(rename = "eegBiogasLeistungserhoehungZuPruefen", prefix = "nsi2", default)]
	pub eeg_biogas_leistungserhoehung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegBiogasDatumLeistungserhoehung", prefix = "nsi2", default)]
	pub eeg_biogas_datum_leistungserhoehung: Option<String>, 
	#[yaserde(rename = "eegBiogasDatumLeistungserhoehungZuPruefen", prefix = "nsi2", default)]
	pub eeg_biogas_datum_leistungserhoehung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegBiogasUmfangLeistungserhoehung", prefix = "nsi2", default)]
	pub eeg_biogas_umfang_leistungserhoehung: Option<f64>, 
	#[yaserde(rename = "eegBiogasUmfangLeistungserhoehungZuPruefen", prefix = "nsi2", default)]
	pub eeg_biogas_umfang_leistungserhoehung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegBiogasGaserzeugungskapazitaet", prefix = "nsi2", default)]
	pub eeg_biogas_gaserzeugungskapazitaet: ErweitertesDecimal, 
	#[yaserde(rename = "eegBiogasGaserzeugungskapazitaetZuPruefen", prefix = "nsi2", default)]
	pub eeg_biogas_gaserzeugungskapazitaet_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegHoechstbemessungsleistung", prefix = "nsi2", default)]
	pub eeg_hoechstbemessungsleistung: Option<f64>, 
	#[yaserde(rename = "eegHoechstbemessungsleistungZuPruefen", prefix = "nsi2", default)]
	pub eeg_hoechstbemessungsleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegBiomethanErstmaligerEinsatz", prefix = "nsi2", default)]
	pub eeg_biomethan_erstmaliger_einsatz: ErweitertesDate, 
	#[yaserde(rename = "eegBiomethanErstmaligerEinsatzZuPruefen", prefix = "nsi2", default)]
	pub eeg_biomethan_erstmaliger_einsatz_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "BestandteilKWKAnlage", prefix = "nsi2", default)]
	pub bestandteil_kwk_anlage: Option<bool>, 
	#[yaserde(rename = "BestandteilKWKAnlageZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_kwk_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkMastrNummer", prefix = "nsi2", default)]
	pub kwk_mastr_nummer: Option<KwkMastrNummerId>, 
	#[yaserde(rename = "kwkMastrNummerZuPruefen", prefix = "nsi2", default)]
	pub kwk_mastr_nummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkAusschreibungZuschlag", prefix = "nsi2", default)]
	pub kwk_ausschreibung_zuschlag: Option<bool>, 
	#[yaserde(rename = "kwkAusschreibungZuschlagZuPruefen", prefix = "nsi2", default)]
	pub kwk_ausschreibung_zuschlag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkZuschlagnummer", prefix = "nsi2", default)]
	pub kwk_zuschlagnummer: Option<String>, 
	#[yaserde(rename = "kwkZuschlagnummerZuPruefen", prefix = "nsi2", default)]
	pub kwk_zuschlagnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkInbetriebnahmedatum", prefix = "nsi2", default)]
	pub kwk_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "kwkInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub kwk_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkThermischeNutzleistung", prefix = "nsi2", default)]
	pub kwk_thermische_nutzleistung: Option<f64>, 
	#[yaserde(rename = "kwkThermischeNutzleistungZuPruefen", prefix = "nsi2", default)]
	pub kwk_thermische_nutzleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkElektrischeKwkLeistung", prefix = "nsi2", default)]
	pub kwk_elektrische_kwk_leistung: Option<f64>, 
	#[yaserde(rename = "kwkElektrischeKwkLeistungZuPruefen", prefix = "nsi2", default)]
	pub kwk_elektrische_kwk_leistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ReserveartNachDemEnWG", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg: Option<ReserveartEnum>, 
	#[yaserde(rename = "ReserveartNachDemEnWGZuPruefen", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserve", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve: Option<String>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserveZuPruefen", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitVerbrennungAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitVerbrennungAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitGasErzeugerAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitGasErzeugerAntwort {
	#[yaserde(flatten, default)]
	pub get_korrektur_vorschlag_einheit_antwort_basis: GetKorrekturVorschlagEinheitAntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "technologie", prefix = "nsi2", default)]
	pub technologie: Option<TechnologieGasErzeugungEnum>, 
	#[yaserde(rename = "technologieZuPruefen", prefix = "nsi2", default)]
	pub technologie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "erzeugungsleistung", prefix = "nsi2", default)]
	pub erzeugungsleistung: Option<f64>, 
	#[yaserde(rename = "erzeugungsleistungZuPruefen", prefix = "nsi2", default)]
	pub erzeugungsleistung_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitWindAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitWindAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitStromSpeicherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitStromSpeicherAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitVerbrennungAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitVerbrennungAntwort {
	#[yaserde(flatten, default)]
	pub get_korrektur_vorschlag_stromerzeugungseinheit_antwort_basis: GetKorrekturVorschlagStromerzeugungseinheitAntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "nameKraftwerk", prefix = "nsi2", default)]
	pub name_kraftwerk: Option<String>, 
	#[yaserde(rename = "nameKraftwerkZuPruefen", prefix = "nsi2", default)]
	pub name_kraftwerk_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nameKraftwerksblock", prefix = "nsi2", default)]
	pub name_kraftwerksblock: Option<String>, 
	#[yaserde(rename = "nameKraftwerksblockZuPruefen", prefix = "nsi2", default)]
	pub name_kraftwerksblock_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "datumBaubeginn", prefix = "nsi2", default)]
	pub datum_baubeginn: Option<String>, 
	#[yaserde(rename = "datumBaubeginnZuPruefen", prefix = "nsi2", default)]
	pub datum_baubeginn_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumWiederaufnahmeBetrieb", prefix = "nsi2", default)]
	pub datum_wiederaufnahme_betrieb: Option<String>, 
	#[yaserde(rename = "DatumWiederaufnahmeBetriebZuPruefen", prefix = "nsi2", default)]
	pub datum_wiederaufnahme_betrieb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "steigerungNettonennleistungKombibetrieb", prefix = "nsi2", default)]
	pub steigerung_nettonennleistung_kombibetrieb: Option<f64>, 
	#[yaserde(rename = "steigerungNettonennleistungKombibetriebZuPruefen", prefix = "nsi2", default)]
	pub steigerung_nettonennleistung_kombibetrieb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "anlageIstImKombibetrieb", prefix = "nsi2", default)]
	pub anlage_ist_im_kombibetrieb: Option<bool>, 
	#[yaserde(rename = "anlageIstImKombibetriebZuPruefen", prefix = "nsi2", default)]
	pub anlage_ist_im_kombibetrieb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "mastrNummernKombibetrieb", prefix = "nsi2", default)]
	pub mastr_nummern_kombibetrieb: Option<String>, 
	#[yaserde(rename = "mastrNummernKombibetriebZuPruefen", prefix = "nsi2", default)]
	pub mastr_nummern_kombibetrieb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "netzreserveAbDatum", prefix = "nsi2", default)]
	pub netzreserve_ab_datum: Option<String>, 
	#[yaserde(rename = "netzreserveAbDatumZuPruefen", prefix = "nsi2", default)]
	pub netzreserve_ab_datum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "sicherheitsbereitschaftAbDatum", prefix = "nsi2", default)]
	pub sicherheitsbereitschaft_ab_datum: Option<String>, 
	#[yaserde(rename = "sicherheitsbereitschaftAbDatumZuPruefen", prefix = "nsi2", default)]
	pub sicherheitsbereitschaft_ab_datum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "energietraeger", prefix = "nsi2", default)]
	pub energietraeger: Option<EnergietraegerEnum>, 
	#[yaserde(rename = "energietraegerZuPruefen", prefix = "nsi2", default)]
	pub energietraeger_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "hauptbrennstoff", prefix = "nsi2", default)]
	pub hauptbrennstoff: Option<VerbrennungBrennstoffEnum>, 
	#[yaserde(rename = "hauptbrennstoffZuPruefen", prefix = "nsi2", default)]
	pub hauptbrennstoff_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "weitererHauptbrennstoff", prefix = "nsi2", default)]
	pub weiterer_hauptbrennstoff: ErweiterterWeitereBrennstoffe, 
	#[yaserde(rename = "weitererHauptbrennstoffZuPruefen", prefix = "nsi2", default)]
	pub weiterer_hauptbrennstoff_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "weitereBrennstoffe", prefix = "nsi2", default)]
	pub weitere_brennstoffe: ErweiterteWeitereBrennstoffe, 
	#[yaserde(rename = "weitereBrennstoffeZuPruefen", prefix = "nsi2", default)]
	pub weitere_brennstoffe_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "verknuepfteErzeugungseinheiten", prefix = "nsi2", default)]
	pub verknuepfte_erzeugungseinheiten: Vec<VerknuepfteEinheit>, 
	#[yaserde(rename = "verknuepfteErzeugungseinheitenZuPruefen", prefix = "nsi2", default)]
	pub verknuepfte_erzeugungseinheiten_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "bestandteilGrenzkraftwerk", prefix = "nsi2", default)]
	pub bestandteil_grenzkraftwerk: Option<bool>, 
	#[yaserde(rename = "bestandteilGrenzkraftwerkZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_grenzkraftwerk_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nettonennleistungDeutschland", prefix = "nsi2", default)]
	pub nettonennleistung_deutschland: Option<f64>, 
	#[yaserde(rename = "nettonennleistungDeutschlandZuPruefen", prefix = "nsi2", default)]
	pub nettonennleistung_deutschland_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "notstromaggregat", prefix = "nsi2", default)]
	pub notstromaggregat: Option<bool>, 
	#[yaserde(rename = "notstromaggregatZuPruefen", prefix = "nsi2", default)]
	pub notstromaggregat_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "technologie", prefix = "nsi2", default)]
	pub technologie: Option<TechnologieVerbrennungsanlageEnum>, 
	#[yaserde(rename = "technologieZuPruefen", prefix = "nsi2", default)]
	pub technologie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einsatzort", prefix = "nsi2", default)]
	pub einsatzort: Option<EinsatzortEnum>, 
	#[yaserde(rename = "einsatzortZuPruefen", prefix = "nsi2", default)]
	pub einsatzort_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "BestandteilKWKAnlage", prefix = "nsi2", default)]
	pub bestandteil_kwk_anlage: Option<bool>, 
	#[yaserde(rename = "BestandteilKWKAnlageZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_kwk_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkMastrNummer", prefix = "nsi2", default)]
	pub kwk_mastr_nummer: Option<KwkMastrNummerId>, 
	#[yaserde(rename = "kwkMastrNummerZuPruefen", prefix = "nsi2", default)]
	pub kwk_mastr_nummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkAusschreibungZuschlag", prefix = "nsi2", default)]
	pub kwk_ausschreibung_zuschlag: Option<bool>, 
	#[yaserde(rename = "kwkAusschreibungZuschlagZuPruefen", prefix = "nsi2", default)]
	pub kwk_ausschreibung_zuschlag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkZuschlagnummer", prefix = "nsi2", default)]
	pub kwk_zuschlagnummer: Option<String>, 
	#[yaserde(rename = "kwkZuschlagnummerZuPruefen", prefix = "nsi2", default)]
	pub kwk_zuschlagnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkInbetriebnahmedatum", prefix = "nsi2", default)]
	pub kwk_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "kwkInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub kwk_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkThermischeNutzleistung", prefix = "nsi2", default)]
	pub kwk_thermische_nutzleistung: Option<f64>, 
	#[yaserde(rename = "kwkThermischeNutzleistungZuPruefen", prefix = "nsi2", default)]
	pub kwk_thermische_nutzleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kwkElektrischeKwkLeistung", prefix = "nsi2", default)]
	pub kwk_elektrische_kwk_leistung: Option<f64>, 
	#[yaserde(rename = "kwkElektrischeKwkLeistungZuPruefen", prefix = "nsi2", default)]
	pub kwk_elektrische_kwk_leistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AusschliesslicheVerwendungImKombibetrieb", prefix = "nsi2", default)]
	pub ausschliessliche_verwendung_im_kombibetrieb: Option<bool>, 
	#[yaserde(rename = "AusschliesslicheVerwendungImKombibetriebZuPruefen", prefix = "nsi2", default)]
	pub ausschliessliche_verwendung_im_kombibetrieb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ReserveartNachDemEnWG", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg: Option<ReserveartEnum>, 
	#[yaserde(rename = "ReserveartNachDemEnWGZuPruefen", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserve", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve: Option<String>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserveZuPruefen", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitAnlagenbetreiberAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitAnlagenbetreiberAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitStromSpeicherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitStromSpeicherAntwort {
	#[yaserde(flatten, default)]
	pub get_korrektur_vorschlag_einheit_antwort_basis: GetKorrekturVorschlagEinheitAntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "nameStromerzeugungseinheit", prefix = "nsi2", default)]
	pub name_stromerzeugungseinheit: Option<String>, 
	#[yaserde(rename = "nameStromerzeugungseinheitZuPruefen", prefix = "nsi2", default)]
	pub name_stromerzeugungseinheit_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "weic", prefix = "nsi2", default)]
	pub weic: ErweiterterString, 
	#[yaserde(rename = "weicZuPruefen", prefix = "nsi2", default)]
	pub weic_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "weicDisplayName", prefix = "nsi2", default)]
	pub weic_display_name: Option<String>, 
	#[yaserde(rename = "weicDisplayNameZuPruefen", prefix = "nsi2", default)]
	pub weic_display_name_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kraftwerksnummer", prefix = "nsi2", default)]
	pub kraftwerksnummer: ErweiterterString, 
	#[yaserde(rename = "kraftwerksnummerZuPruefen", prefix = "nsi2", default)]
	pub kraftwerksnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "bruttoleistung", prefix = "nsi2", default)]
	pub bruttoleistung: Option<f64>, 
	#[yaserde(rename = "bruttoleistungZuPruefen", prefix = "nsi2", default)]
	pub bruttoleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nettonennleistung", prefix = "nsi2", default)]
	pub nettonennleistung: Option<f64>, 
	#[yaserde(rename = "nettonennleistungZuPruefen", prefix = "nsi2", default)]
	pub nettonennleistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "technologie", prefix = "nsi2", default)]
	pub technologie: Option<TechnologieSpeicherEnum>, 
	#[yaserde(rename = "technologieZuPruefen", prefix = "nsi2", default)]
	pub technologie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "schwarzstartfaehigkeit", prefix = "nsi2", default)]
	pub schwarzstartfaehigkeit: Option<bool>, 
	#[yaserde(rename = "schwarzstartfaehigkeitZuPruefen", prefix = "nsi2", default)]
	pub schwarzstartfaehigkeit_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "inselbetriebsfaehigkeit", prefix = "nsi2", default)]
	pub inselbetriebsfaehigkeit: Option<bool>, 
	#[yaserde(rename = "inselbetriebsfaehigkeitZuPruefen", prefix = "nsi2", default)]
	pub inselbetriebsfaehigkeit_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitNb", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_nb: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitNbZuPruefen", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_nb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitDv", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_dv: Option<bool>, 
	#[yaserde(rename = "fernsteuerbarkeitDvZuPruefen", prefix = "nsi2", default)]
	pub fernsteuerbarkeit_dv_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "acDcKoppelung", prefix = "nsi2", default)]
	pub ac_dc_koppelung: Option<SystemkopplungEnum>, 
	#[yaserde(rename = "acDcKoppelungZuPruefen", prefix = "nsi2", default)]
	pub ac_dc_koppelung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "batterietechnologie", prefix = "nsi2", default)]
	pub batterietechnologie: Option<BatterieTechnologieEnum>, 
	#[yaserde(rename = "batterietechnologieZuPruefen", prefix = "nsi2", default)]
	pub batterietechnologie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "praequalifiziertFuerRegelenergie", prefix = "nsi2", default)]
	pub praequalifiziert_fuer_regelenergie: Option<bool>, 
	#[yaserde(rename = "praequalifiziertFuerRegelenergieZuPruefen", prefix = "nsi2", default)]
	pub praequalifiziert_fuer_regelenergie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "LeistungsaufnahmeBeimEinspeichern", prefix = "nsi2", default)]
	pub leistungsaufnahme_beim_einspeichern: Option<f64>, 
	#[yaserde(rename = "LeistungsaufnahmeBeimEinspeichernZuPruefen", prefix = "nsi2", default)]
	pub leistungsaufnahme_beim_einspeichern_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "pumpbetriebKontinuierlichRegelbar", prefix = "nsi2", default)]
	pub pumpbetrieb_kontinuierlich_regelbar: Option<bool>, 
	#[yaserde(rename = "pumpbetriebKontinuierlichRegelbarZuPruefen", prefix = "nsi2", default)]
	pub pumpbetrieb_kontinuierlich_regelbar_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Pumpspeichertechnologie", prefix = "nsi2", default)]
	pub pumpspeichertechnologie: Option<PumpspeichertechnologieEnum>, 
	#[yaserde(rename = "PumpspeichertechnologieZuPruefen", prefix = "nsi2", default)]
	pub pumpspeichertechnologie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einspeisungsart", prefix = "nsi2", default)]
	pub einspeisungsart: Option<EinspeisungsartEnum>, 
	#[yaserde(rename = "einspeisungsartZuPruefen", prefix = "nsi2", default)]
	pub einspeisungsart_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "bestandteilGrenzkraftwerk", prefix = "nsi2", default)]
	pub bestandteil_grenzkraftwerk: Option<bool>, 
	#[yaserde(rename = "bestandteilGrenzkraftwerkZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_grenzkraftwerk_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nettonennleistungDeutschland", prefix = "nsi2", default)]
	pub nettonennleistung_deutschland: Option<f64>, 
	#[yaserde(rename = "nettonennleistungDeutschlandZuPruefen", prefix = "nsi2", default)]
	pub nettonennleistung_deutschland_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "notstromaggregat", prefix = "nsi2", default)]
	pub notstromaggregat: Option<bool>, 
	#[yaserde(rename = "notstromaggregatZuPruefen", prefix = "nsi2", default)]
	pub notstromaggregat_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "einsatzort", prefix = "nsi2", default)]
	pub einsatzort: Option<EinsatzortEnum>, 
	#[yaserde(rename = "einsatzortZuPruefen", prefix = "nsi2", default)]
	pub einsatzort_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "zugeordneteWirkleistungWechselrichter", prefix = "nsi2", default)]
	pub zugeordnete_wirkleistung_wechselrichter: Option<f64>, 
	#[yaserde(rename = "zugeordneteWirkleistungWechselrichterZuPruefen", prefix = "nsi2", default)]
	pub zugeordnete_wirkleistung_wechselrichter_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nutzbareSpeicherkapazitaet", prefix = "nsi2", default)]
	pub nutzbare_speicherkapazitaet: Option<f64>, 
	#[yaserde(rename = "nutzbareSpeicherkapazitaetZuPruefen", prefix = "nsi2", default)]
	pub nutzbare_speicherkapazitaet_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "BestandteilEEGAnlage", prefix = "nsi2", default)]
	pub bestandteil_eeg_anlage: Option<bool>, 
	#[yaserde(rename = "BestandteilEEGAnlageZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_eeg_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInbetriebnahmedatum", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "eegInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAnlagenschluessel", prefix = "nsi2", default)]
	pub eeg_anlagenschluessel: Option<ErweiterterString>, 
	#[yaserde(rename = "eegAnlagenschluesselZuPruefen", prefix = "nsi2", default)]
	pub eeg_anlagenschluessel_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegZuschlagsnummer", prefix = "nsi2", default)]
	pub eeg_zuschlagsnummer: Option<String>, 
	#[yaserde(rename = "eegZuschlagsnummerZuPruefen", prefix = "nsi2", default)]
	pub eeg_zuschlagsnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAusschreibungZuschlag", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag: Option<bool>, 
	#[yaserde(rename = "eegAusschreibungZuschlagZuPruefen", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ReserveartNachDemEnWG", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg: Option<ReserveartEnum>, 
	#[yaserde(rename = "ReserveartNachDemEnWGZuPruefen", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserve", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve: Option<String>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserveZuPruefen", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagAntwort {
	#[yaserde(flatten, default)]
	pub get_korrektur_vorschlag_antwort_basis: GetKorrekturVorschlagAntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "ListeDatenkorrekturFeld", prefix = "nsi2", default)]
	pub liste_datenkorrektur_feld: Vec<DatenkorrekturFeld>, 
	#[yaserde(rename = "ListeDatenkorrekturAnlagenbetreiberFeld", prefix = "nsi2", default)]
	pub liste_datenkorrektur_anlagenbetreiber_feld: Vec<DatenkorrekturFeld>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitWindAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitWindAntwort {
	#[yaserde(flatten, default)]
	pub get_korrektur_vorschlag_stromerzeugungseinheit_antwort_basis: GetKorrekturVorschlagStromerzeugungseinheitAntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "nameWindpark", prefix = "nsi2", default)]
	pub name_windpark: Option<String>, 
	#[yaserde(rename = "nameWindparkZuPruefen", prefix = "nsi2", default)]
	pub name_windpark_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "lage", prefix = "nsi2", default)]
	pub lage: Option<WindLageEnum>, 
	#[yaserde(rename = "lageZuPruefen", prefix = "nsi2", default)]
	pub lage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "seelage", prefix = "nsi2", default)]
	pub seelage: Option<SeelageEnum>, 
	#[yaserde(rename = "seelageZuPruefen", prefix = "nsi2", default)]
	pub seelage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "clusterOstsee", prefix = "nsi2", default)]
	pub cluster_ostsee: Option<ClusterOstseeEnum>, 
	#[yaserde(rename = "clusterOsteseeZuPruefen", prefix = "nsi2", default)]
	pub cluster_ostesee_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "clusterNordsee", prefix = "nsi2", default)]
	pub cluster_nordsee: Option<ClusterNordseeEnum>, 
	#[yaserde(rename = "clusterNordseeZuPruefen", prefix = "nsi2", default)]
	pub cluster_nordsee_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "technologie", prefix = "nsi2", default)]
	pub technologie: Option<WindanlageTechnologieEnum>, 
	#[yaserde(rename = "technologieZuPruefen", prefix = "nsi2", default)]
	pub technologie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "herstellerId", prefix = "nsi2", default)]
	pub hersteller_id: Option<KatalogwertId>, 
	#[yaserde(rename = "herstellerIdZuPruefen", prefix = "nsi2", default)]
	pub hersteller_id_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "typenbezeichnung", prefix = "nsi2", default)]
	pub typenbezeichnung: Option<String>, 
	#[yaserde(rename = "typenbezeichnungZuPruefen", prefix = "nsi2", default)]
	pub typenbezeichnung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nabenhoehe", prefix = "nsi2", default)]
	pub nabenhoehe: Option<f64>, 
	#[yaserde(rename = "nabenhoeheZuPruefen", prefix = "nsi2", default)]
	pub nabenhoehe_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "rotordurchmesser", prefix = "nsi2", default)]
	pub rotordurchmesser: Option<f64>, 
	#[yaserde(rename = "rotordurchmesserZuPruefen", prefix = "nsi2", default)]
	pub rotordurchmesser_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Rotorblattenteisungssystem", prefix = "nsi2", default)]
	pub rotorblattenteisungssystem: Option<bool>, 
	#[yaserde(rename = "RotorblattenteisungssystemZuPruefen", prefix = "nsi2", default)]
	pub rotorblattenteisungssystem_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "hoehe", prefix = "nsi2", default)]
	pub hoehe: Option<f64>, 
	#[yaserde(rename = "hoeheZuPruefen", prefix = "nsi2", default)]
	pub hoehe_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "auflageAbschaltungLeistungsbegrenzung", prefix = "nsi2", default)]
	pub auflage_abschaltung_leistungsbegrenzung: Option<bool>, 
	#[yaserde(rename = "auflageAbschaltungLeistungsbegrenzungZuPruefen", prefix = "nsi2", default)]
	pub auflage_abschaltung_leistungsbegrenzung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSchallimmissionsschutzNachts", prefix = "nsi2", default)]
	pub auflagen_abschaltung_schallimmissionsschutz_nachts: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSchallimmissionsschutzNachtsZuPruefen", prefix = "nsi2", default)]
	pub auflagen_abschaltung_schallimmissionsschutz_nachts_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSchallimmissionsschutzTagsueber", prefix = "nsi2", default)]
	pub auflagen_abschaltung_schallimmissionsschutz_tagsueber: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSchallimmissionsschutzTagsueberZuPruefen", prefix = "nsi2", default)]
	pub auflagen_abschaltung_schallimmissionsschutz_tagsueber_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSchattenwurf", prefix = "nsi2", default)]
	pub auflagen_abschaltung_schattenwurf: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSchattenwurfZuPruefen", prefix = "nsi2", default)]
	pub auflagen_abschaltung_schattenwurf_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungTierschutz", prefix = "nsi2", default)]
	pub auflagen_abschaltung_tierschutz: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungTierschutzZuPruefen", prefix = "nsi2", default)]
	pub auflagen_abschaltung_tierschutz_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungEiswurf", prefix = "nsi2", default)]
	pub auflagen_abschaltung_eiswurf: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungEiswurfZuPruefen", prefix = "nsi2", default)]
	pub auflagen_abschaltung_eiswurf_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSonstige", prefix = "nsi2", default)]
	pub auflagen_abschaltung_sonstige: Option<bool>, 
	#[yaserde(rename = "AuflagenAbschaltungSonstigeZuPruefen", prefix = "nsi2", default)]
	pub auflagen_abschaltung_sonstige_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "wassertiefe", prefix = "nsi2", default)]
	pub wassertiefe: Option<f64>, 
	#[yaserde(rename = "wassertiefeZuPruefen", prefix = "nsi2", default)]
	pub wassertiefe_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "kuestenentfernung", prefix = "nsi2", default)]
	pub kuestenentfernung: Option<f64>, 
	#[yaserde(rename = "kuestenentfernungZuPruefen", prefix = "nsi2", default)]
	pub kuestenentfernung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAnlagenschluessel", prefix = "nsi2", default)]
	pub eeg_anlagenschluessel: Option<ErweiterterString>, 
	#[yaserde(rename = "eegAnlagenschluesselZuPruefen", prefix = "nsi2", default)]
	pub eeg_anlagenschluessel_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegPrototypAnlage", prefix = "nsi2", default)]
	pub eeg_prototyp_anlage: Option<bool>, 
	#[yaserde(rename = "eegPrototypAnlageZuPruefen", prefix = "nsi2", default)]
	pub eeg_prototyp_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegPilotAnlage", prefix = "nsi2", default)]
	pub eeg_pilot_anlage: Option<bool>, 
	#[yaserde(rename = "eegPilotAnlageZuPruefen", prefix = "nsi2", default)]
	pub eeg_pilot_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInstallierteLeistung", prefix = "nsi2", default)]
	pub eeg_installierte_leistung: Option<f64>, 
	#[yaserde(rename = "eegInstallierteLeistungZuPruefen", prefix = "nsi2", default)]
	pub eeg_installierte_leistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInbetriebnahmedatum", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "eegInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegVerhaeltnisErtragsschaetzungReferenzertrag", prefix = "nsi2", default)]
	pub eeg_verhaeltnis_ertragsschaetzung_referenzertrag: ErweitertesDecimal, 
	#[yaserde(rename = "eegVerhaeltnisReferenzertragErtragZuPruefen", prefix = "nsi2", default)]
	pub eeg_verhaeltnis_referenzertrag_ertrag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegVerhaeltnisReferenzertragErtrag5Jahre", prefix = "nsi2", default)]
	pub eeg_verhaeltnis_referenzertrag_ertrag_5_jahre: ErweitertesDecimal, 
	#[yaserde(rename = "eegVerhaeltnisReferenzertragErtrag5JahreZuPruefen", prefix = "nsi2", default)]
	pub eeg_verhaeltnis_referenzertrag_ertrag_5_jahre_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegVerhaeltnisReferenzertragErtrag10Jahre", prefix = "nsi2", default)]
	pub eeg_verhaeltnis_referenzertrag_ertrag_10_jahre: ErweitertesDecimal, 
	#[yaserde(rename = "eegVerhaeltnisReferenzertragErtrag10JahreZuPruefen", prefix = "nsi2", default)]
	pub eeg_verhaeltnis_referenzertrag_ertrag_10_jahre_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegVerhaeltnisReferenzertragErtrag15Jahre", prefix = "nsi2", default)]
	pub eeg_verhaeltnis_referenzertrag_ertrag_15_jahre: ErweitertesDecimal, 
	#[yaserde(rename = "eegVerhaeltnisReferenzertragErtrag15JahreZuPruefen", prefix = "nsi2", default)]
	pub eeg_verhaeltnis_referenzertrag_ertrag_15_jahre_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAusschreibungZuschlag", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag: Option<bool>, 
	#[yaserde(rename = "eegAusschreibungZuschlagZuPruefen", prefix = "nsi2", default)]
	pub eeg_ausschreibung_zuschlag_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegZuschlagsnummer", prefix = "nsi2", default)]
	pub eeg_zuschlagsnummer: Option<String>, 
	#[yaserde(rename = "eegZuschlagsnummerZuPruefen", prefix = "nsi2", default)]
	pub eeg_zuschlagsnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Buergerenergie", prefix = "nsi2", default)]
	pub buergerenergie: Option<bool>, 
	#[yaserde(rename = "BuergerenergieZuPruefen", prefix = "nsi2", default)]
	pub buergerenergie_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Nachtkennzeichen", prefix = "nsi2", default)]
	pub nachtkennzeichen: Option<bool>, 
	#[yaserde(rename = "NachtkennzeichenZuPruefen", prefix = "nsi2", default)]
	pub nachtkennzeichen_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitAnlagenbetreiberAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitAnlagenbetreiberAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
	#[yaserde(rename = "netzbetreiberpruefungId", prefix = "nsi2", default)]
	pub netzbetreiberpruefung_id: i32, 
	#[yaserde(rename = "korrekturVorschlagMarktakteur", prefix = "nsi2", default)]
	pub korrektur_vorschlag_marktakteur: Option<String>, 
	#[yaserde(rename = "letzteAenderung", prefix = "nsi2", default)]
	pub letzte_aenderung: Option<String>, 
	#[yaserde(rename = "beschreibung", prefix = "nsi2", default)]
	pub beschreibung: Option<String>, 
	#[yaserde(rename = "Personenart", prefix = "nsi2", default)]
	pub personenart: Option<PersonenartEnum>, 
	#[yaserde(rename = "PersonenartZuPruefen", prefix = "nsi2", default)]
	pub personenart_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Firmenname", prefix = "nsi2", default)]
	pub firmenname: Option<String>, 
	#[yaserde(rename = "FirmennameZuPruefen", prefix = "nsi2", default)]
	pub firmenname_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "RechtsformId", prefix = "nsi2", default)]
	pub rechtsform_id: Option<KatalogwertId>, 
	#[yaserde(rename = "RechtsformIdZuPruefen", prefix = "nsi2", default)]
	pub rechtsform_id_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "SonstigeRechtsform", prefix = "nsi2", default)]
	pub sonstige_rechtsform: Option<String>, 
	#[yaserde(rename = "SonstigeRechtsformZuPruefen", prefix = "nsi2", default)]
	pub sonstige_rechtsform_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Anrede", prefix = "nsi2", default)]
	pub anrede: Option<SalutationEnum>, 
	#[yaserde(rename = "AnredeZuPruefen", prefix = "nsi2", default)]
	pub anrede_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Titel", prefix = "nsi2", default)]
	pub titel: Option<TitelEnum>, 
	#[yaserde(rename = "TitelZuPruefen", prefix = "nsi2", default)]
	pub titel_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Vorname", prefix = "nsi2", default)]
	pub vorname: Option<String>, 
	#[yaserde(rename = "VornameZuPruefen", prefix = "nsi2", default)]
	pub vorname_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Nachname", prefix = "nsi2", default)]
	pub nachname: Option<String>, 
	#[yaserde(rename = "NachnameZuPruefen", prefix = "nsi2", default)]
	pub nachname_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Geburtsdatum", prefix = "nsi2", default)]
	pub geburtsdatum: Option<String>, 
	#[yaserde(rename = "GeburtsdatumZuPruefen", prefix = "nsi2", default)]
	pub geburtsdatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Postleitzahl", prefix = "nsi2", default)]
	pub postleitzahl: Option<String>, 
	#[yaserde(rename = "PostleitzahlZuPruefen", prefix = "nsi2", default)]
	pub postleitzahl_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Strasse", prefix = "nsi2", default)]
	pub strasse: Option<String>, 
	#[yaserde(rename = "StrasseZuPruefen", prefix = "nsi2", default)]
	pub strasse_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "StrasseNichtGefunden", prefix = "nsi2", default)]
	pub strasse_nicht_gefunden: Option<bool>, 
	#[yaserde(rename = "Hausnummer", prefix = "nsi2", default)]
	pub hausnummer: Option<ErweiterterString>, 
	#[yaserde(rename = "HausnummerZuPruefen", prefix = "nsi2", default)]
	pub hausnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "HausnummerNichtGefunden", prefix = "nsi2", default)]
	pub hausnummer_nicht_gefunden: Option<bool>, 
	#[yaserde(rename = "Adresszusatz", prefix = "nsi2", default)]
	pub adresszusatz: Option<String>, 
	#[yaserde(rename = "AdresszusatzZuPruefen", prefix = "nsi2", default)]
	pub adresszusatz_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Ort", prefix = "nsi2", default)]
	pub ort: Option<String>, 
	#[yaserde(rename = "OrtZuPruefen", prefix = "nsi2", default)]
	pub ort_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Bundesland", prefix = "nsi2", default)]
	pub bundesland: Option<BundeslaenderEnum>, 
	#[yaserde(rename = "BundeslandZuPruefen", prefix = "nsi2", default)]
	pub bundesland_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Land", prefix = "nsi2", default)]
	pub land: Option<LandEnum>, 
	#[yaserde(rename = "LandZuPruefen", prefix = "nsi2", default)]
	pub land_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AdresseIstZustelladresse", prefix = "nsi2", default)]
	pub adresse_ist_zustelladresse: Option<bool>, 
	#[yaserde(rename = "AdresseIstZustelladresseZuPruefen", prefix = "nsi2", default)]
	pub adresse_ist_zustelladresse_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ZustellPostleitzahl", prefix = "nsi2", default)]
	pub zustell_postleitzahl: Option<String>, 
	#[yaserde(rename = "ZustellPostleitzahlZuPruefen", prefix = "nsi2", default)]
	pub zustell_postleitzahl_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ZustellStrasse", prefix = "nsi2", default)]
	pub zustell_strasse: Option<String>, 
	#[yaserde(rename = "ZustellStrasseZuPruefen", prefix = "nsi2", default)]
	pub zustell_strasse_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ZustellStrasseNichtGefunden", prefix = "nsi2", default)]
	pub zustell_strasse_nicht_gefunden: Option<bool>, 
	#[yaserde(rename = "ZustellHausnummer", prefix = "nsi2", default)]
	pub zustell_hausnummer: Option<ErweiterterString>, 
	#[yaserde(rename = "ZustellHausnummerZuPruefen", prefix = "nsi2", default)]
	pub zustell_hausnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ZustellHausnummerNichtGefunden", prefix = "nsi2", default)]
	pub zustell_hausnummer_nicht_gefunden: Option<bool>, 
	#[yaserde(rename = "ZustellAdresszusatz", prefix = "nsi2", default)]
	pub zustell_adresszusatz: Option<String>, 
	#[yaserde(rename = "ZustellAdresszusatzZuPruefen", prefix = "nsi2", default)]
	pub zustell_adresszusatz_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ZustellOrt", prefix = "nsi2", default)]
	pub zustell_ort: Option<String>, 
	#[yaserde(rename = "ZustellOrtZuPruefen", prefix = "nsi2", default)]
	pub zustell_ort_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ZustellLand", prefix = "nsi2", default)]
	pub zustell_land: Option<LandEnum>, 
	#[yaserde(rename = "ZustellLandZuPruefen", prefix = "nsi2", default)]
	pub zustell_land_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AbweichenderNameFirmenname", prefix = "nsi2", default)]
	pub abweichender_name_firmenname: Option<String>, 
	#[yaserde(rename = "AbweichenderNameFirmennameZuPruefen", prefix = "nsi2", default)]
	pub abweichender_name_firmenname_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Email", prefix = "nsi2", default)]
	pub email: Option<String>, 
	#[yaserde(rename = "EmailZuPruefen", prefix = "nsi2", default)]
	pub email_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Telefon", prefix = "nsi2", default)]
	pub telefon: Option<String>, 
	#[yaserde(rename = "TelefonZuPruefen", prefix = "nsi2", default)]
	pub telefon_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Fax", prefix = "nsi2", default)]
	pub fax: Option<ErweiterterString>, 
	#[yaserde(rename = "FaxZuPruefen", prefix = "nsi2", default)]
	pub fax_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Webseite", prefix = "nsi2", default)]
	pub webseite: Option<ErweiterterString>, 
	#[yaserde(rename = "WebseiteZuPruefen", prefix = "nsi2", default)]
	pub webseite_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ImHandelsregisterEingetragen", prefix = "nsi2", default)]
	pub im_handelsregister_eingetragen: Option<bool>, 
	#[yaserde(rename = "ImHandelsregisterEingetragenZuPruefen", prefix = "nsi2", default)]
	pub im_handelsregister_eingetragen_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "RegistergerichtId", prefix = "nsi2", default)]
	pub registergericht_id: Option<KatalogwertId>, 
	#[yaserde(rename = "RegistergerichtIdZuPruefen", prefix = "nsi2", default)]
	pub registergericht_id_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "RegisternummerPraefix", prefix = "nsi2", default)]
	pub registernummer_praefix: Option<RegisterNrPraefixEnum>, 
	#[yaserde(rename = "RegisternummerPraefixZuPruefen", prefix = "nsi2", default)]
	pub registernummer_praefix_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Registernummer", prefix = "nsi2", default)]
	pub registernummer: Option<String>, 
	#[yaserde(rename = "RegisternummerZuPruefen", prefix = "nsi2", default)]
	pub registernummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "RegistergerichtAusland", prefix = "nsi2", default)]
	pub registergericht_ausland: Option<String>, 
	#[yaserde(rename = "RegistergerichtAuslandZuPruefen", prefix = "nsi2", default)]
	pub registergericht_ausland_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "RegisternummerAusland", prefix = "nsi2", default)]
	pub registernummer_ausland: Option<String>, 
	#[yaserde(rename = "RegisternummerAuslandZuPruefen", prefix = "nsi2", default)]
	pub registernummer_ausland_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "AcerCode", prefix = "nsi2", default)]
	pub acer_code: Option<ErweiterterString>, 
	#[yaserde(rename = "AcerCodeZuPruefen", prefix = "nsi2", default)]
	pub acer_code_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Umsatzsteueridentifikationsnummer", prefix = "nsi2", default)]
	pub umsatzsteueridentifikationsnummer: Option<ErweiterterString>, 
	#[yaserde(rename = "UmsatzsteueridentifikationsnummerZuPruefen", prefix = "nsi2", default)]
	pub umsatzsteueridentifikationsnummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "HauptwirtdschaftszweigGruppe", prefix = "nsi2", default)]
	pub hauptwirtdschaftszweig_gruppe: Option<NaceGruppeEnum>, 
	#[yaserde(rename = "HauptwirtdschaftszweigGruppeZuPruefen", prefix = "nsi2", default)]
	pub hauptwirtdschaftszweig_gruppe_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "Kmu", prefix = "nsi2", default)]
	pub kmu: Option<bool>, 
	#[yaserde(rename = "KmuZuPruefen", prefix = "nsi2", default)]
	pub kmu_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "EinkommenAusSelbstaendigerArbeit", prefix = "nsi2", default)]
	pub einkommen_aus_selbstaendiger_arbeit: Option<bool>, 
	#[yaserde(rename = "EinkommenAusSelbstaendigerArbeitZuPruefen", prefix = "nsi2", default)]
	pub einkommen_aus_selbstaendiger_arbeit_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitBiomasseAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitBiomasseAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetKorrekturVorschlagEinheitWasserAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetKorrekturVorschlagEinheitWasserAntwort {
	#[yaserde(flatten, default)]
	pub get_korrektur_vorschlag_stromerzeugungseinheit_antwort_basis: GetKorrekturVorschlagStromerzeugungseinheitAntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "nameKraftwerk", prefix = "nsi2", default)]
	pub name_kraftwerk: Option<String>, 
	#[yaserde(rename = "nameKraftwerkZuPruefen", prefix = "nsi2", default)]
	pub name_kraftwerk_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumWiederaufnahmeBetrieb", prefix = "nsi2", default)]
	pub datum_wiederaufnahme_betrieb: Option<String>, 
	#[yaserde(rename = "DatumWiederaufnahmeBetriebZuPruefen", prefix = "nsi2", default)]
	pub datum_wiederaufnahme_betrieb_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "artDerWasserkraftanlage", prefix = "nsi2", default)]
	pub art_der_wasserkraftanlage: Option<ArtDerWasserkraftanlageEnum>, 
	#[yaserde(rename = "artDerWasserkraftanlageZuPruefen", prefix = "nsi2", default)]
	pub art_der_wasserkraftanlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "minderungStromerzeugung", prefix = "nsi2", default)]
	pub minderung_stromerzeugung: Option<bool>, 
	#[yaserde(rename = "minderungStromerzeugungZuPruefen", prefix = "nsi2", default)]
	pub minderung_stromerzeugung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "bestandteilGrenzkraftwerk", prefix = "nsi2", default)]
	pub bestandteil_grenzkraftwerk: Option<bool>, 
	#[yaserde(rename = "bestandteilGrenzkraftwerkZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_grenzkraftwerk_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "nettonennleistungDeutschland", prefix = "nsi2", default)]
	pub nettonennleistung_deutschland: Option<f64>, 
	#[yaserde(rename = "nettonennleistungDeutschlandZuPruefen", prefix = "nsi2", default)]
	pub nettonennleistung_deutschland_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "artDesZuflusses", prefix = "nsi2", default)]
	pub art_des_zuflusses: Option<ZuflussartEnum>, 
	#[yaserde(rename = "artDesZuflussesZuPruefen", prefix = "nsi2", default)]
	pub art_des_zuflusses_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "BestandteilEEGAnlage", prefix = "nsi2", default)]
	pub bestandteil_eeg_anlage: Option<bool>, 
	#[yaserde(rename = "BestandteilEEGAnlageZuPruefen", prefix = "nsi2", default)]
	pub bestandteil_eeg_anlage_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegMastrNummer", prefix = "nsi2", default)]
	pub eeg_mastr_nummer: Option<EegMastrNummerId>, 
	#[yaserde(rename = "eegMastrNummerZuPruefen", prefix = "nsi2", default)]
	pub eeg_mastr_nummer_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAnlagenschluessel", prefix = "nsi2", default)]
	pub eeg_anlagenschluessel: ErweiterterString, 
	#[yaserde(rename = "eegAnlagenschluesselZuPruefen", prefix = "nsi2", default)]
	pub eeg_anlagenschluessel_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegAnlagenkennzifferAnlagenregister", prefix = "nsi2", default)]
	pub eeg_anlagenkennziffer_anlagenregister: ErweiterterString, 
	#[yaserde(rename = "eegAnlagenkennzifferAnlagenregisterZuPruefen", prefix = "nsi2", default)]
	pub eeg_anlagenkennziffer_anlagenregister_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInstallierteLeistung", prefix = "nsi2", default)]
	pub eeg_installierte_leistung: Option<f64>, 
	#[yaserde(rename = "eegInstallierteLeistungZuPruefen", prefix = "nsi2", default)]
	pub eeg_installierte_leistung_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "eegInbetriebnahmedatum", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "eegInbetriebnahmedatumZuPruefen", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "ReserveartNachDemEnWG", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg: Option<ReserveartEnum>, 
	#[yaserde(rename = "ReserveartNachDemEnWGZuPruefen", prefix = "nsi2", default)]
	pub reserveart_nach_dem_en_wg_zu_pruefen: Option<bool>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserve", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve: Option<String>, 
	#[yaserde(rename = "DatumUeberfuehrungInReserveZuPruefen", prefix = "nsi2", default)]
	pub datum_ueberfuehrung_in_reserve_zu_pruefen: Option<bool>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SetKorrekturVorschlagEinheitSolarAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SetKorrekturVorschlagEinheitSolarAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "korrekturVorschlagId", prefix = "nsi2", default)]
	pub korrektur_vorschlag_id: i32, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeBasisParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetGefilterteListeBasisParameter {
	#[yaserde(flatten, default)]
	pub authentifizierte_anfrage_mit_marktakteur_basis: AuthentifizierteAnfrageMitMarktakteurBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "startAb", prefix = "nsi2", default)]
	pub start_ab: Option<i32>, 
	#[yaserde(rename = "datumAb", prefix = "nsi2", default)]
	pub datum_ab: Option<String>, 
	#[yaserde(rename = "limit", prefix = "nsi2", default)]
	pub limit: Option<i32>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeMarktakteureParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetGefilterteListeMarktakteureParameter {
	#[yaserde(flatten, default)]
	pub get_gefilterte_liste_basis_parameter: GetGefilterteListeBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "name", prefix = "nsi2", default)]
	pub name: Option<String>, 
	#[yaserde(rename = "postleitzahl", prefix = "nsi2", default)]
	pub postleitzahl: Option<String>, 
	#[yaserde(rename = "ort", prefix = "nsi2", default)]
	pub ort: Option<String>, 
	#[yaserde(rename = "bundesland", prefix = "nsi2", default)]
	pub bundesland: Option<BundeslaenderEinheitenEnum>, 
	#[yaserde(rename = "marktfunktion", prefix = "nsi2", default)]
	pub marktfunktion: Option<MarktfunktionEnum>, 
	#[yaserde(rename = "Marktrollen", prefix = "nsi2", default)]
	pub marktrollen: Vec<MarktrollenEnum>, 
	#[yaserde(rename = "MarktrolleMastrNummerIds", prefix = "nsi2", default)]
	pub marktrolle_mastr_nummer_ids: Vec<MarktrolleMastrNummerId>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeMarktakteureAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetGefilterteListeMarktakteureAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "Marktakteure", prefix = "nsi2", default)]
	pub marktakteure: Vec<Marktakteur>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeStromErzeugerParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetGefilterteListeStromErzeugerParameter {
	#[yaserde(flatten, default)]
	pub get_gefilterte_liste_basis_parameter: GetGefilterteListeBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "einheitBetriebsstatus", prefix = "nsi2", default)]
	pub einheit_betriebsstatus: Option<AnlagenBetriebsStatusEnum>, 
	#[yaserde(rename = "name", prefix = "nsi2", default)]
	pub name: Option<String>, 
	#[yaserde(rename = "energietraeger", prefix = "nsi2", default)]
	pub energietraeger: Option<EnergietraegerEnum>, 
	#[yaserde(rename = "postleitzahl", prefix = "nsi2", default)]
	pub postleitzahl: Option<String>, 
	#[yaserde(rename = "ort", prefix = "nsi2", default)]
	pub ort: Option<String>, 
	#[yaserde(rename = "Landkreis", prefix = "nsi2", default)]
	pub landkreis: Option<String>, 
	#[yaserde(rename = "Gemeinde", prefix = "nsi2", default)]
	pub gemeinde: Option<String>, 
	#[yaserde(rename = "Gemeindeschluessel", prefix = "nsi2", default)]
	pub gemeindeschluessel: Option<String>, 
	#[yaserde(rename = "einheitBundesland", prefix = "nsi2", default)]
	pub einheit_bundesland: Option<BundeslaenderEinheitenEnum>, 
	#[yaserde(rename = "SolarLage", prefix = "nsi2", default)]
	pub solar_lage: Option<SolarLageEnum>, 
	#[yaserde(rename = "bruttoleistung", prefix = "nsi2", default)]
	pub bruttoleistung: Option<f64>, 
	#[yaserde(rename = "bruttoleistungKleiner", prefix = "nsi2", default)]
	pub bruttoleistung_kleiner: Option<f64>, 
	#[yaserde(rename = "bruttoleistungGroesser", prefix = "nsi2", default)]
	pub bruttoleistung_groesser: Option<f64>, 
	#[yaserde(rename = "nettoleistung", prefix = "nsi2", default)]
	pub nettoleistung: Option<f64>, 
	#[yaserde(rename = "nettoleistungKleiner", prefix = "nsi2", default)]
	pub nettoleistung_kleiner: Option<f64>, 
	#[yaserde(rename = "nettoleistungGroesser", prefix = "nsi2", default)]
	pub nettoleistung_groesser: Option<f64>, 
	#[yaserde(rename = "hauptbrennstoff", prefix = "nsi2", default)]
	pub hauptbrennstoff: Option<BrennstoffLageEnum>, 
	#[yaserde(rename = "inbetriebnahmedatum", prefix = "nsi2", default)]
	pub inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "inbetriebnahmedatumKleiner", prefix = "nsi2", default)]
	pub inbetriebnahmedatum_kleiner: Option<String>, 
	#[yaserde(rename = "inbetriebnahmedatumGroesser", prefix = "nsi2", default)]
	pub inbetriebnahmedatum_groesser: Option<String>, 
	#[yaserde(rename = "technologie", prefix = "nsi2", default)]
	pub technologie: Option<TechnologieVerbrennungsanlageEnum>, 
	#[yaserde(rename = "lokationNetzbetreiber", prefix = "nsi2", default)]
	pub lokation_netzbetreiber: Option<MarktakteurMastrNummerId>, 
	#[yaserde(rename = "lokationSpannungsebene", prefix = "nsi2", default)]
	pub lokation_spannungsebene: Option<SpannungsebeneEnum>, 
	#[yaserde(rename = "eegInbetriebnahmedatum", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "eegInbetriebnahmedatumKleiner", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum_kleiner: Option<String>, 
	#[yaserde(rename = "eegInbetriebnahmedatumGroesser", prefix = "nsi2", default)]
	pub eeg_inbetriebnahmedatum_groesser: Option<String>, 
	#[yaserde(rename = "zuschlagsnummer", prefix = "nsi2", default)]
	pub zuschlagsnummer: Option<String>, 
	#[yaserde(rename = "speicherNutzbareSpeicherkapazität", prefix = "nsi2", default)]
	pub speicher_nutzbare_speicherkapazit_ät: Option<f64>, 
	#[yaserde(rename = "speicherNutzbareSpeicherkapazitätKleiner", prefix = "nsi2", default)]
	pub speicher_nutzbare_speicherkapazit_ät_kleiner: Option<f64>, 
	#[yaserde(rename = "speicherNutzbareSpeicherkapazitätGroesser", prefix = "nsi2", default)]
	pub speicher_nutzbare_speicherkapazit_ät_groesser: Option<f64>, 
	#[yaserde(rename = "Registrierungsdatum", prefix = "nsi2", default)]
	pub registrierungsdatum: Option<String>, 
	#[yaserde(rename = "RegistrierungsdatumKleiner", prefix = "nsi2", default)]
	pub registrierungsdatum_kleiner: Option<String>, 
	#[yaserde(rename = "RegistrierungsdatumGroesser", prefix = "nsi2", default)]
	pub registrierungsdatum_groesser: Option<String>, 
	#[yaserde(rename = "netzRegelzone", prefix = "nsi2", default)]
	pub netz_regelzone: Option<RegelzoneEnum>, 
	#[yaserde(rename = "AnlagenbetreiberMastrNummer", prefix = "nsi2", default)]
	pub anlagenbetreiber_mastr_nummer: Option<MarktakteurMastrNummerId>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeStromErzeugerAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetGefilterteListeStromErzeugerAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "Einheiten", prefix = "nsi2", default)]
	pub einheiten: Vec<Einheit>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeStromVerbraucherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetGefilterteListeStromVerbraucherParameter {
	#[yaserde(flatten, default)]
	pub get_gefilterte_liste_basis_parameter: GetGefilterteListeBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "einheitBetriebsstatus", prefix = "nsi2", default)]
	pub einheit_betriebsstatus: Option<AnlagenBetriebsStatusEnum>, 
	#[yaserde(rename = "name", prefix = "nsi2", default)]
	pub name: Option<String>, 
	#[yaserde(rename = "postleitzahl", prefix = "nsi2", default)]
	pub postleitzahl: Option<String>, 
	#[yaserde(rename = "ort", prefix = "nsi2", default)]
	pub ort: Option<String>, 
	#[yaserde(rename = "Landkreis", prefix = "nsi2", default)]
	pub landkreis: Option<String>, 
	#[yaserde(rename = "Gemeinde", prefix = "nsi2", default)]
	pub gemeinde: Option<String>, 
	#[yaserde(rename = "Gemeindeschluessel", prefix = "nsi2", default)]
	pub gemeindeschluessel: Option<String>, 
	#[yaserde(rename = "einheitBundesland", prefix = "nsi2", default)]
	pub einheit_bundesland: Option<BundeslaenderEinheitenEnum>, 
	#[yaserde(rename = "anzahlStromverbraucherGroesser50Mw", prefix = "nsi2", default)]
	pub anzahl_stromverbraucher_groesser_50_mw: Option<i32>, 
	#[yaserde(rename = "anzahlStromverbraucherGroesser50MwKleiner", prefix = "nsi2", default)]
	pub anzahl_stromverbraucher_groesser_50_mw_kleiner: Option<i32>, 
	#[yaserde(rename = "anzahlStromverbraucherGroesser50MwGroesser", prefix = "nsi2", default)]
	pub anzahl_stromverbraucher_groesser_50_mw_groesser: Option<i32>, 
	#[yaserde(rename = "inbetriebnahmedatum", prefix = "nsi2", default)]
	pub inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "inbetriebnahmedatumKleiner", prefix = "nsi2", default)]
	pub inbetriebnahmedatum_kleiner: Option<String>, 
	#[yaserde(rename = "inbetriebnahmedatumGroesser", prefix = "nsi2", default)]
	pub inbetriebnahmedatum_groesser: Option<String>, 
	#[yaserde(rename = "lokationNetzbetreiber", prefix = "nsi2", default)]
	pub lokation_netzbetreiber: Option<MarktakteurMastrNummerId>, 
	#[yaserde(rename = "lokationSpannungsebene", prefix = "nsi2", default)]
	pub lokation_spannungsebene: Option<SpannungsebeneEnum>, 
	#[yaserde(rename = "Registrierungsdatum", prefix = "nsi2", default)]
	pub registrierungsdatum: Option<String>, 
	#[yaserde(rename = "RegistrierungsdatumKleiner", prefix = "nsi2", default)]
	pub registrierungsdatum_kleiner: Option<String>, 
	#[yaserde(rename = "RegistrierungsdatumGroesser", prefix = "nsi2", default)]
	pub registrierungsdatum_groesser: Option<String>, 
	#[yaserde(rename = "netzRegelzone", prefix = "nsi2", default)]
	pub netz_regelzone: Option<RegelzoneEnum>, 
	#[yaserde(rename = "AnlagenbetreiberMastrNummer", prefix = "nsi2", default)]
	pub anlagenbetreiber_mastr_nummer: Option<MarktakteurMastrNummerId>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeStromVerbraucherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetGefilterteListeStromVerbraucherAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "Einheiten", prefix = "nsi2", default)]
	pub einheiten: Vec<Einheit>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeGasErzeugerParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetGefilterteListeGasErzeugerParameter {
	#[yaserde(flatten, default)]
	pub get_gefilterte_liste_basis_parameter: GetGefilterteListeBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "einheitBetriebsstatus", prefix = "nsi2", default)]
	pub einheit_betriebsstatus: Option<AnlagenBetriebsStatusEnum>, 
	#[yaserde(rename = "name", prefix = "nsi2", default)]
	pub name: Option<String>, 
	#[yaserde(rename = "postleitzahl", prefix = "nsi2", default)]
	pub postleitzahl: Option<String>, 
	#[yaserde(rename = "ort", prefix = "nsi2", default)]
	pub ort: Option<String>, 
	#[yaserde(rename = "Landkreis", prefix = "nsi2", default)]
	pub landkreis: Option<String>, 
	#[yaserde(rename = "Gemeinde", prefix = "nsi2", default)]
	pub gemeinde: Option<String>, 
	#[yaserde(rename = "Gemeindeschluessel", prefix = "nsi2", default)]
	pub gemeindeschluessel: Option<String>, 
	#[yaserde(rename = "einheitBundesland", prefix = "nsi2", default)]
	pub einheit_bundesland: Option<BundeslaenderEinheitenEnum>, 
	#[yaserde(rename = "erzeugungsleistung", prefix = "nsi2", default)]
	pub erzeugungsleistung: Option<f64>, 
	#[yaserde(rename = "erzeugungsleistungKleiner", prefix = "nsi2", default)]
	pub erzeugungsleistung_kleiner: Option<f64>, 
	#[yaserde(rename = "erzeugungsleistungGroesser", prefix = "nsi2", default)]
	pub erzeugungsleistung_groesser: Option<f64>, 
	#[yaserde(rename = "inbetriebnahmedatum", prefix = "nsi2", default)]
	pub inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "inbetriebnahmedatumKleiner", prefix = "nsi2", default)]
	pub inbetriebnahmedatum_kleiner: Option<String>, 
	#[yaserde(rename = "inbetriebnahmedatumGroesser", prefix = "nsi2", default)]
	pub inbetriebnahmedatum_groesser: Option<String>, 
	#[yaserde(rename = "technologie", prefix = "nsi2", default)]
	pub technologie: Option<TechnologieGasErzeugungEnum>, 
	#[yaserde(rename = "lokationNetzbetreiber", prefix = "nsi2", default)]
	pub lokation_netzbetreiber: Option<MarktakteurMastrNummerId>, 
	#[yaserde(rename = "Registrierungsdatum", prefix = "nsi2", default)]
	pub registrierungsdatum: Option<String>, 
	#[yaserde(rename = "RegistrierungsdatumKleiner", prefix = "nsi2", default)]
	pub registrierungsdatum_kleiner: Option<String>, 
	#[yaserde(rename = "RegistrierungsdatumGroesser", prefix = "nsi2", default)]
	pub registrierungsdatum_groesser: Option<String>, 
	#[yaserde(rename = "AnlagenbetreiberMastrNummer", prefix = "nsi2", default)]
	pub anlagenbetreiber_mastr_nummer: Option<MarktakteurMastrNummerId>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeGasErzeugerAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetGefilterteListeGasErzeugerAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "Einheiten", prefix = "nsi2", default)]
	pub einheiten: Vec<Einheit>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeGasVerbraucherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetGefilterteListeGasVerbraucherParameter {
	#[yaserde(flatten, default)]
	pub get_gefilterte_liste_basis_parameter: GetGefilterteListeBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "einheitBetriebsstatus", prefix = "nsi2", default)]
	pub einheit_betriebsstatus: Option<AnlagenBetriebsStatusEnum>, 
	#[yaserde(rename = "name", prefix = "nsi2", default)]
	pub name: Option<String>, 
	#[yaserde(rename = "postleitzahl", prefix = "nsi2", default)]
	pub postleitzahl: Option<String>, 
	#[yaserde(rename = "ort", prefix = "nsi2", default)]
	pub ort: Option<String>, 
	#[yaserde(rename = "Landkreis", prefix = "nsi2", default)]
	pub landkreis: Option<String>, 
	#[yaserde(rename = "Gemeinde", prefix = "nsi2", default)]
	pub gemeinde: Option<String>, 
	#[yaserde(rename = "Gemeindeschluessel", prefix = "nsi2", default)]
	pub gemeindeschluessel: Option<String>, 
	#[yaserde(rename = "einheitBundesland", prefix = "nsi2", default)]
	pub einheit_bundesland: Option<BundeslaenderEinheitenEnum>, 
	#[yaserde(rename = "bezugsleistung", prefix = "nsi2", default)]
	pub bezugsleistung: Option<f64>, 
	#[yaserde(rename = "bezugsleistungKleiner", prefix = "nsi2", default)]
	pub bezugsleistung_kleiner: Option<f64>, 
	#[yaserde(rename = "bezugsleistungGroesser", prefix = "nsi2", default)]
	pub bezugsleistung_groesser: Option<f64>, 
	#[yaserde(rename = "inbetriebnahmedatum", prefix = "nsi2", default)]
	pub inbetriebnahmedatum: Option<String>, 
	#[yaserde(rename = "inbetriebnahmedatumKleiner", prefix = "nsi2", default)]
	pub inbetriebnahmedatum_kleiner: Option<String>, 
	#[yaserde(rename = "inbetriebnahmedatumGroesser", prefix = "nsi2", default)]
	pub inbetriebnahmedatum_groesser: Option<String>, 
	#[yaserde(rename = "gasverbrauchseinheitDientDerStromerzeugung", prefix = "nsi2", default)]
	pub gasverbrauchseinheit_dient_der_stromerzeugung: Option<bool>, 
	#[yaserde(rename = "lokationNetzbetreiber", prefix = "nsi2", default)]
	pub lokation_netzbetreiber: Option<MarktakteurMastrNummerId>, 
	#[yaserde(rename = "Registrierungsdatum", prefix = "nsi2", default)]
	pub registrierungsdatum: Option<String>, 
	#[yaserde(rename = "RegistrierungsdatumKleiner", prefix = "nsi2", default)]
	pub registrierungsdatum_kleiner: Option<String>, 
	#[yaserde(rename = "RegistrierungsdatumGroesser", prefix = "nsi2", default)]
	pub registrierungsdatum_groesser: Option<String>, 
	#[yaserde(rename = "AnlagenbetreiberMastrNummer", prefix = "nsi2", default)]
	pub anlagenbetreiber_mastr_nummer: Option<MarktakteurMastrNummerId>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeGasVerbraucherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetGefilterteListeGasVerbraucherAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "Einheiten", prefix = "nsi2", default)]
	pub einheiten: Vec<Einheit>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeLokationenStromErzeugerParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetGefilterteListeLokationenStromErzeugerParameter {
	#[yaserde(flatten, default)]
	pub get_gefilterte_liste_basis_parameter: GetGefilterteListeBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "NameDerTechnischenLokation", prefix = "nsi2", default)]
	pub name_der_technischen_lokation: Option<String>, 
	#[yaserde(rename = "netzanschlusspunktAnzahl", prefix = "nsi2", default)]
	pub netzanschlusspunkt_anzahl: Option<i32>, 
	#[yaserde(rename = "netzanschlusspunktAnzahlKleiner", prefix = "nsi2", default)]
	pub netzanschlusspunkt_anzahl_kleiner: Option<i32>, 
	#[yaserde(rename = "netzanschlusspunktAnzahlGroesser", prefix = "nsi2", default)]
	pub netzanschlusspunkt_anzahl_groesser: Option<i32>, 
	#[yaserde(rename = "einheitEnergietraeger", prefix = "nsi2", default)]
	pub einheit_energietraeger: Option<EnergietraegerEnum>, 
	#[yaserde(rename = "einheitPostleitzahl", prefix = "nsi2", default)]
	pub einheit_postleitzahl: Option<String>, 
	#[yaserde(rename = "einheitOrt", prefix = "nsi2", default)]
	pub einheit_ort: Option<String>, 
	#[yaserde(rename = "einheitBundesland", prefix = "nsi2", default)]
	pub einheit_bundesland: Option<BundeslaenderEinheitenEnum>, 
	#[yaserde(rename = "netzanschlusspunktNetzbetreiberMastrNummer", prefix = "nsi2", default)]
	pub netzanschlusspunkt_netzbetreiber_mastr_nummer: Option<MarktakteurMastrNummerId>, 
	#[yaserde(rename = "netzanschlusspunktSpannungsebene", prefix = "nsi2", default)]
	pub netzanschlusspunkt_spannungsebene: Option<SpannungsebeneEnum>, 
	#[yaserde(rename = "netzRegelzone", prefix = "nsi2", default)]
	pub netz_regelzone: Option<RegelzoneEnum>, 
	#[yaserde(rename = "Yeic", prefix = "nsi2", default)]
	pub yeic: Option<String>, 
	#[yaserde(rename = "Bilanzierungsgebiet", prefix = "nsi2", default)]
	pub bilanzierungsgebiet: Option<String>, 
	#[yaserde(rename = "netzanschlusspunktMesslokation", prefix = "nsi2", default)]
	pub netzanschlusspunkt_messlokation: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeLokationenStromErzeugerAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetGefilterteListeLokationenStromErzeugerAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "Lokationen", prefix = "nsi2", default)]
	pub lokationen: Vec<Lokation>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeLokationenStromVerbraucherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetGefilterteListeLokationenStromVerbraucherParameter {
	#[yaserde(flatten, default)]
	pub get_gefilterte_liste_basis_parameter: GetGefilterteListeBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "NameDerTechnischenLokation", prefix = "nsi2", default)]
	pub name_der_technischen_lokation: Option<String>, 
	#[yaserde(rename = "einheitAnzahlUeber50Mw", prefix = "nsi2", default)]
	pub einheit_anzahl_ueber_50_mw: Option<i32>, 
	#[yaserde(rename = "einheitAnzahlUeber50MwKleiner", prefix = "nsi2", default)]
	pub einheit_anzahl_ueber_50_mw_kleiner: Option<i32>, 
	#[yaserde(rename = "einheitAnzahlUeber50MwGroesser", prefix = "nsi2", default)]
	pub einheit_anzahl_ueber_50_mw_groesser: Option<i32>, 
	#[yaserde(rename = "einheitEnergietraeger", prefix = "nsi2", default)]
	pub einheit_energietraeger: Option<EnergietraegerEnum>, 
	#[yaserde(rename = "einheitPostleitzahl", prefix = "nsi2", default)]
	pub einheit_postleitzahl: Option<String>, 
	#[yaserde(rename = "einheitOrt", prefix = "nsi2", default)]
	pub einheit_ort: Option<String>, 
	#[yaserde(rename = "einheitBundesland", prefix = "nsi2", default)]
	pub einheit_bundesland: Option<BundeslaenderEinheitenEnum>, 
	#[yaserde(rename = "netzanschlusspunktNetzbetreiberMastrNummer", prefix = "nsi2", default)]
	pub netzanschlusspunkt_netzbetreiber_mastr_nummer: Option<MarktakteurMastrNummerId>, 
	#[yaserde(rename = "netzanschlusspunktSpannungsebene", prefix = "nsi2", default)]
	pub netzanschlusspunkt_spannungsebene: Option<SpannungsebeneEnum>, 
	#[yaserde(rename = "netzRegelzone", prefix = "nsi2", default)]
	pub netz_regelzone: Option<RegelzoneEnum>, 
	#[yaserde(rename = "Yeic", prefix = "nsi2", default)]
	pub yeic: Option<String>, 
	#[yaserde(rename = "Bilanzierungsgebiet", prefix = "nsi2", default)]
	pub bilanzierungsgebiet: Option<String>, 
	#[yaserde(rename = "netzanschlusspunktMesslokation", prefix = "nsi2", default)]
	pub netzanschlusspunkt_messlokation: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeLokationenStromVerbraucherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetGefilterteListeLokationenStromVerbraucherAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "Lokationen", prefix = "nsi2", default)]
	pub lokationen: Vec<Lokation>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeLokationenGasErzeugerParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetGefilterteListeLokationenGasErzeugerParameter {
	#[yaserde(flatten, default)]
	pub get_gefilterte_liste_basis_parameter: GetGefilterteListeBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "NameDerTechnischenLokation", prefix = "nsi2", default)]
	pub name_der_technischen_lokation: Option<String>, 
	#[yaserde(rename = "einheitTechnologie", prefix = "nsi2", default)]
	pub einheit_technologie: Option<TechnologieGasErzeugungEnum>, 
	#[yaserde(rename = "einheitSummeErzeugerleistung", prefix = "nsi2", default)]
	pub einheit_summe_erzeugerleistung: Option<f64>, 
	#[yaserde(rename = "einheitSummeErzeugerleistungKleiner", prefix = "nsi2", default)]
	pub einheit_summe_erzeugerleistung_kleiner: Option<f64>, 
	#[yaserde(rename = "einheitSummeErzeugerleistungGroesser", prefix = "nsi2", default)]
	pub einheit_summe_erzeugerleistung_groesser: Option<f64>, 
	#[yaserde(rename = "einheitPostleitzahl", prefix = "nsi2", default)]
	pub einheit_postleitzahl: Option<String>, 
	#[yaserde(rename = "einheitOrt", prefix = "nsi2", default)]
	pub einheit_ort: Option<String>, 
	#[yaserde(rename = "einheitBundesland", prefix = "nsi2", default)]
	pub einheit_bundesland: Option<BundeslaenderEinheitenEnum>, 
	#[yaserde(rename = "netzanschlusspunktNetzbetreiberMastrNummer", prefix = "nsi2", default)]
	pub netzanschlusspunkt_netzbetreiber_mastr_nummer: Option<MarktakteurMastrNummerId>, 
	#[yaserde(rename = "netzanschlusspunktGasqualitaet", prefix = "nsi2", default)]
	pub netzanschlusspunkt_gasqualitaet: Option<GasqualitaetEnum>, 
	#[yaserde(rename = "netzanschlusspunktBezeichnung", prefix = "nsi2", default)]
	pub netzanschlusspunkt_bezeichnung: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeLokationenGasErzeugerAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetGefilterteListeLokationenGasErzeugerAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "Lokationen", prefix = "nsi2", default)]
	pub lokationen: Vec<Lokation>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeLokationenGasVerbraucherParameter",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetGefilterteListeLokationenGasVerbraucherParameter {
	#[yaserde(flatten, default)]
	pub get_gefilterte_liste_basis_parameter: GetGefilterteListeBasisParameter, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "NameDerTechnischenLokation", prefix = "nsi2", default)]
	pub name_der_technischen_lokation: Option<String>, 
	#[yaserde(rename = "einheitSummeMaximaleBezugsleistung", prefix = "nsi2", default)]
	pub einheit_summe_maximale_bezugsleistung: Option<f64>, 
	#[yaserde(rename = "einheitSummeMaximaleBezugsleistungKleiner", prefix = "nsi2", default)]
	pub einheit_summe_maximale_bezugsleistung_kleiner: Option<f64>, 
	#[yaserde(rename = "einheitSummeMaximaleBezugsleistungGroesser", prefix = "nsi2", default)]
	pub einheit_summe_maximale_bezugsleistung_groesser: Option<f64>, 
	#[yaserde(rename = "einheitPostleitzahl", prefix = "nsi2", default)]
	pub einheit_postleitzahl: Option<String>, 
	#[yaserde(rename = "einheitOrt", prefix = "nsi2", default)]
	pub einheit_ort: Option<String>, 
	#[yaserde(rename = "einheitBundesland", prefix = "nsi2", default)]
	pub einheit_bundesland: Option<BundeslaenderEinheitenEnum>, 
	#[yaserde(rename = "netzanschlusspunktNetzbetreiberMastrNummer", prefix = "nsi2", default)]
	pub netzanschlusspunkt_netzbetreiber_mastr_nummer: Option<MarktakteurMastrNummerId>, 
	#[yaserde(rename = "netzanschlusspunktGasqualitaet", prefix = "nsi2", default)]
	pub netzanschlusspunkt_gasqualitaet: Option<GasqualitaetEnum>, 
	#[yaserde(rename = "netzanschlusspunktBezeichnung", prefix = "nsi2", default)]
	pub netzanschlusspunkt_bezeichnung: Option<String>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GetGefilterteListeLokationenGasVerbraucherAntwort",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GetGefilterteListeLokationenGasVerbraucherAntwort {
	#[yaserde(flatten, default)]
	pub antwort_basis: AntwortBasis, 
#[yaserde(prefix = "xsi", rename="type", attribute)]
pub xsi_type: String,
	#[yaserde(rename = "Lokationen", prefix = "nsi2", default)]
	pub lokationen: Vec<Lokation>, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "LaenderEinheitenEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct LaenderEinheitenEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "LandEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct LandEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "RegelzoneEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct RegelzoneEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "AnlageErzeugungseinheitenEigenerzeugungEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct AnlageErzeugungseinheitenEigenerzeugungEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "AnlagenartEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct AnlagenartEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "AnlagenartSolarAusrichtungEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct AnlagenartSolarAusrichtungEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "AnlagenartSolarNeigungswinkelEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct AnlagenartSolarNeigungswinkelEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "AnlagenBetriebsStatusEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct AnlagenBetriebsStatusEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "AnlagenSystemStatusEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct AnlagenSystemStatusEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "AnlagentypEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct AnlagentypEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "NetzbetreiberzuordnungsStatusEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct NetzbetreiberzuordnungsStatusEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "TicketStatusEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct TicketStatusEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "AnlagenTypStatusEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct AnlagenTypStatusEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "AnlagenUebertragungStatusEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct AnlagenUebertragungStatusEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "ArtDerAenderungEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct ArtDerAenderungEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "ReserveartEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct ReserveartEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "ArtDerWasserkraftanlageEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct ArtDerWasserkraftanlageEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "BatterieTechnologieEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct BatterieTechnologieEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "BenutzerRollenGruppenEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct BenutzerRollenGruppenEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "BenutzerStatusEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct BenutzerStatusEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "BiomasseArtEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct BiomasseArtEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "BiomasseBrennstoffEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct BiomasseBrennstoffEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "BrennstoffeVerbrennungsanlagenEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct BrennstoffeVerbrennungsanlagenEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "BrennstoffLageEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct BrennstoffLageEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "BrennstoffSonstigeEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct BrennstoffSonstigeEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "BundeslaenderEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct BundeslaenderEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "BundeslaenderEinheitenEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct BundeslaenderEinheitenEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "ClusterNordseeEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct ClusterNordseeEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "ClusterOstseeEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct ClusterOstseeEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "EegTypEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct EegTypEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "EinheitenGruppierungsTypEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct EinheitenGruppierungsTypEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "EinheitSparteEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct EinheitSparteEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "EinheitArtEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct EinheitArtEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "EinheitTypEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct EinheitTypEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "EinsatzortEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct EinsatzortEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "EinspeisungsartEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct EinspeisungsartEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "EnergietraegerEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct EnergietraegerEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "ErtuechtigungsmassnahmeWasserkraftEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct ErtuechtigungsmassnahmeWasserkraftEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GasartDerErzeugungEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GasartDerErzeugungEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GasqualitaetEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GasqualitaetEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GasSpeicherartEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GasSpeicherartEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "GenehmigungsartEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct GenehmigungsartEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "LeistungsAenderungEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct LeistungsAenderungEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "LeistungsaenderungsAnlagenartEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct LeistungsaenderungsAnlagenartEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "LeistungsaenderungsartEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct LeistungsaenderungsartEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "KorrekturBetriebsStatusEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct KorrekturBetriebsStatusEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "KlaerungsGrundEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct KlaerungsGrundEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "LokationTypEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct LokationTypEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "MarktakteurStatusEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct MarktakteurStatusEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "MarktfunktionEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct MarktfunktionEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "MarktfunktionStatusEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct MarktfunktionStatusEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "MarktrollenEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct MarktrollenEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "MastrZugangStatusEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct MastrZugangStatusEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "NaceGruppeEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct NaceGruppeEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "NaceAbteilungEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct NaceAbteilungEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "NaceAbschnittEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct NaceAbschnittEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "StartgrundNetzbetreiberpruefung",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct StartgrundNetzbetreiberpruefung {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "AbbruchgrundNetzbetreiberpruefung",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct AbbruchgrundNetzbetreiberpruefung {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "NetzbetreiberpruefungsKategorieEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct NetzbetreiberpruefungsKategorieEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "FristverlaengerungGrundEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct FristverlaengerungGrundEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "FristverlaengerungBearbeitungsStatus",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct FristverlaengerungBearbeitungsStatus {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "NetzbetreiberpruefungsStatusEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct NetzbetreiberpruefungsStatusEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "NummernkreisTypenEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct NummernkreisTypenEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "NutzungsbereichEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct NutzungsbereichEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "PersonenartEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct PersonenartEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "PumpspeichertechnologieEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct PumpspeichertechnologieEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "RegisterNrPraefixEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct RegisterNrPraefixEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "RollenEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct RollenEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SalutationEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SalutationEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SeelageEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SeelageEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SolarFlaechenartEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SolarFlaechenartEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SolarLageEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SolarLageEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SolarLeistungsbegrenzungEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SolarLeistungsbegrenzungEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SpannungsebeneEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SpannungsebeneEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SparteEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SparteEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SpeicherTypEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SpeicherTypEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "StandortangabeEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct StandortangabeEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "SystemkopplungEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct SystemkopplungEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "TechnologieGasErzeugungEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct TechnologieGasErzeugungEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "TechnologieKernkraftEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct TechnologieKernkraftEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "TechnologieSpeicherEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct TechnologieSpeicherEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "TechnologieVerbrennungsanlageEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct TechnologieVerbrennungsanlageEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "TicketProzessKategorieEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct TicketProzessKategorieEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "TitelEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct TitelEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "VerbrennungArtEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct VerbrennungArtEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "VerbrennungBrennstoffEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct VerbrennungBrennstoffEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "WeitereBrennstoffeEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct WeitereBrennstoffeEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "WechselrichterEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct WechselrichterEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "WindanlageTechnologieEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct WindanlageTechnologieEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "WindLageEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct WindLageEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
#[derive(Debug, Default, YaSerialize, YaDeserialize, Clone)]
#[yaserde(
	rename = "ZuflussartEnum",
	namespace = "nsi2: https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle",
	prefix = "nsi2",
)]
pub struct ZuflussartEnum {
	#[yaserde(text, default)]
	pub body: String, 
}
pub type SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberRequest = SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberParameter;

pub type SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberResponse = SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberAntwort;

pub type SetMastrqsKorrekturVorschlagEinheitWindRequest = SetMastrqsKorrekturVorschlagEinheitWindParameter;

pub type SetMastrqsKorrekturVorschlagEinheitWindResponse = SetMastrqsKorrekturVorschlagEinheitWindAntwort;

pub type SetMastrqsKorrekturVorschlagEinheitSolarRequest = SetMastrqsKorrekturVorschlagEinheitSolarParameter;

pub type SetMastrqsKorrekturVorschlagEinheitSolarResponse = SetMastrqsKorrekturVorschlagEinheitSolarAntwort;

pub type SetMastrqsKorrekturVorschlagEinheitBiomasseRequest = SetMastrqsKorrekturVorschlagEinheitBiomasseParameter;

pub type SetMastrqsKorrekturVorschlagEinheitBiomasseResponse = SetMastrqsKorrekturVorschlagEinheitBiomasseAntwort;

pub type SetMastrqsKorrekturVorschlagEinheitWasserRequest = SetMastrqsKorrekturVorschlagEinheitWasserParameter;

pub type SetMastrqsKorrekturVorschlagEinheitWasserResponse = SetMastrqsKorrekturVorschlagEinheitWasserAntwort;

pub type SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest = SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungParameter;

pub type SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse = SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungAntwort;

pub type SetMastrqsKorrekturVorschlagEinheitVerbrennungRequest = SetMastrqsKorrekturVorschlagEinheitVerbrennungParameter;

pub type SetMastrqsKorrekturVorschlagEinheitVerbrennungResponse = SetMastrqsKorrekturVorschlagEinheitVerbrennungAntwort;

pub type SetMastrqsKorrekturVorschlagEinheitGasSpeicherRequest = SetMastrqsKorrekturVorschlagEinheitGasSpeicherParameter;

pub type SetMastrqsKorrekturVorschlagEinheitGasSpeicherResponse = SetMastrqsKorrekturVorschlagEinheitGasSpeicherAntwort;

pub type SetMastrqsKorrekturVorschlagEinheitStromVerbraucherRequest = SetMastrqsKorrekturVorschlagEinheitStromVerbraucherParameter;

pub type SetMastrqsKorrekturVorschlagEinheitStromVerbraucherResponse = SetMastrqsKorrekturVorschlagEinheitStromVerbraucherAntwort;

pub type SetMastrqsKorrekturVorschlagEinheitGasErzeugerRequest = SetMastrqsKorrekturVorschlagEinheitGasErzeugerParameter;

pub type SetMastrqsKorrekturVorschlagEinheitGasErzeugerResponse = SetMastrqsKorrekturVorschlagEinheitGasErzeugerAntwort;

pub type SetMastrqsKorrekturVorschlagEinheitGasVerbraucherRequest = SetMastrqsKorrekturVorschlagEinheitGasVerbraucherParameter;

pub type SetMastrqsKorrekturVorschlagEinheitGasVerbraucherResponse = SetMastrqsKorrekturVorschlagEinheitGasVerbraucherAntwort;

pub type SetMastrqsKorrekturVorschlagEinheitStromSpeicherRequest = SetMastrqsKorrekturVorschlagEinheitStromSpeicherParameter;

pub type SetMastrqsKorrekturVorschlagEinheitStromSpeicherResponse = SetMastrqsKorrekturVorschlagEinheitStromSpeicherAntwort;

pub type MastrqsTicketBearbeiterZuweisenRequest = MastrqsTicketBearbeiterZuweisenParameter;

pub type MastrqsTicketBearbeiterZuweisenResponse = MastrqsTicketBearbeiterZuweisenAntwort;

pub type MastrqsStichwoerterAendernRequest = MastrqsStichwoerterAendernParameter;

pub type MastrqsStichwoerterAendernResponse = MastrqsStichwoerterAendernAntwort;

pub type MastrqsKorrekturvorschlagStornierenRequest = MastrqsKorrekturvorschlagStornierenParameter;

pub type MastrqsKorrekturvorschlagStornierenResponse = MastrqsKorrekturvorschlagStornierenAntwort;

pub type GetKorrekturVorschlagRequest = GetKorrekturVorschlagParameter;

pub type GetKorrekturVorschlagResponse = GetKorrekturVorschlagAntwort;

pub type GetLokaleUhrzeitRequest = GetLokaleUhrzeitParameter;

pub type GetLokaleUhrzeitResponse = GetLokaleUhrzeitAntwort;

pub type GetLokaleUhrzeitMitAuthentifizierungRequest = GetLokaleUhrzeitMitAuthentifizierungParameter;

pub type GetLokaleUhrzeitMitAuthentifizierungResponse = GetLokaleUhrzeitMitAuthentifizierungAntwort;

pub type GetListeKatalogkategorienRequest = GetListeKatalogkategorienParameter;

pub type GetListeKatalogkategorienResponse = GetListeKatalogkategorienAntwort;

pub type GetKatalogwerteRequest = GetKatalogwerteParameter;

pub type GetKatalogwerteResponse = GetKatalogwerteAntwort;

pub type GetBilanzierungsgebieteRequest = GetBilanzierungsgebieteParameter;

pub type GetBilanzierungsgebieteResponse = GetBilanzierungsgebieteAntwort;

pub type GetAktuellerStandTageskontingentRequest = GetAktuellerStandTageskontingentParameter;

pub type GetAktuellerStandTageskontingentResponse = GetAktuellerStandTageskontingentAntwort;

pub type GetListeAlleMarktakteureRequest = GetListeAlleMarktakteureParameter;

pub type GetListeAlleMarktakteureResponse = GetListeAlleMarktakteureAntwort;

pub type GetListeFreigegebeneMarktakteureRequest = GetListeFreigegebeneMarktakteureParameter;

pub type GetListeFreigegebeneMarktakteureResponse = GetListeFreigegebeneMarktakteureAntwort;

pub type GetMarktakteurRequest = GetMarktakteurParameter;

pub type GetMarktakteurResponse = GetMarktakteurAntwort;

pub type GetGefilterteListeMarktakteureRequest = GetGefilterteListeMarktakteureParameter;

pub type GetGefilterteListeMarktakteureResponse = GetGefilterteListeMarktakteureAntwort;

pub type GetMeineMarktakteureRequest = GetMeineMarktakteureParameter;

pub type GetMeineMarktakteureResponse = GetMeineMarktakteureAntwort;

pub type GetListeGeloeschteUndDeaktivierteMarktakteureRequest = GetListeGeloeschteUndDeaktivierteMarktakteureParameter;

pub type GetListeGeloeschteUndDeaktivierteMarktakteureResponse = GetListeGeloeschteUndDeaktivierteMarktakteureAntwort;

pub type GetListeMeineNetzbetreiberpruefungenRequest = GetListeMeineNetzbetreiberpruefungenParameter;

pub type GetListeMeineNetzbetreiberpruefungenResponse = GetListeMeineNetzbetreiberpruefungenAntwort;

pub type ErneuteNetzbetreiberpruefungStartenRequest = ErneuteNetzbetreiberpruefungStartenParameter;

pub type ErneuteNetzbetreiberpruefungStartenResponse = ErneuteNetzbetreiberpruefungStartenAntwort;

pub type VerschiebeEinheitZuAndererLokationRequest = VerschiebeEinheitZuAndererLokationParameter;

pub type VerschiebeEinheitZuAndererLokationResponse = VerschiebeEinheitZuAndererLokationAntwort;

pub type VerschiebeEinheitZuNeuerLokationRequest = VerschiebeEinheitZuNeuerLokationParameter;

pub type VerschiebeEinheitZuNeuerLokationResponse = VerschiebeEinheitZuNeuerLokationAntwort;

pub type SetNetzbetreiberpruefungAbgeschlossenRequest = SetNetzbetreiberpruefungAbgeschlossenParameter;

pub type SetNetzbetreiberpruefungAbgeschlossenResponse = SetNetzbetreiberpruefungAbgeschlossenAntwort;

pub type SetDatenkorrekturErforderlichRequest = SetDatenkorrekturErforderlichParameter;

pub type SetDatenkorrekturErforderlichResponse = SetDatenkorrekturErforderlichAntwort;

pub type SetNetzbetreiberNichtZustaendigRequest = SetNetzbetreiberNichtZustaendigParameter;

pub type SetNetzbetreiberNichtZustaendigResponse = SetNetzbetreiberNichtZustaendigAntwort;

pub type SetKlaerungErforderlichRequest = SetKlaerungErforderlichParameter;

pub type SetKlaerungErforderlichResponse = SetKlaerungErforderlichAntwort;

pub type SetKorrekturBetriebsstatusRequest = SetKorrekturBetriebsstatusParameter;

pub type SetKorrekturBetriebsstatusResponse = SetKorrekturBetriebsstatusAntwort;

pub type GetKorrekturVorschlagBetriebsstatusRequest = GetKorrekturVorschlagBetriebsstatusParameter;

pub type GetKorrekturVorschlagBetriebsstatusResponse = GetKorrekturVorschlagBetriebsstatusAntwort;

pub type GetWiedervorlageVorschlagBetriebsstatusRequest = GetWiedervorlageVorschlagBetriebsstatusParameter;

pub type GetWiedervorlageVorschlagBetriebsstatusResponse = GetWiedervorlageVorschlagBetriebsstatusAntwort;

pub type SetKorrekturBetriebsstatusAbgeschlossenRequest = SetKorrekturBetriebsstatusAbgeschlossenParameter;

pub type SetKorrekturBetriebsstatusAbgeschlossenResponse = SetKorrekturBetriebsstatusAbgeschlossenAntwort;

pub type SetEegAnlagenschluesselRequest = SetEegAnlagenschluesselParameter;

pub type SetEegAnlagenschluesselResponse = SetEegAnlagenschluesselAntwort;

pub type SetStilllegungAbgelehntRequest = SetStilllegungAbgelehntParameter;

pub type SetStilllegungAbgelehntResponse = SetStilllegungAbgelehntAntwort;

pub type SetAntragAufFristverlaengerungRequest = SetAntragAufFristverlaengerungParameter;

pub type SetAntragAufFristverlaengerungResponse = SetAntragAufFristverlaengerungAntwort;

pub type RuecknahmeFristverlaengerungRequest = RuecknahmeFristverlaengerungParameter;

pub type RuecknahmeFristverlaengerungResponse = RuecknahmeFristverlaengerungAntwort;

pub type SetKorrekturVorschlagEinheitWindRequest = SetKorrekturVorschlagEinheitWindParameter;

pub type SetKorrekturVorschlagEinheitWindResponse = SetKorrekturVorschlagEinheitWindAntwort;

pub type SetKorrekturVorschlagEinheitAnlagenbetreiberRequest = SetKorrekturVorschlagEinheitAnlagenbetreiberParameter;

pub type SetKorrekturVorschlagEinheitAnlagenbetreiberResponse = SetKorrekturVorschlagEinheitAnlagenbetreiberAntwort;

pub type SetKorrekturVorschlagEinheitSolarRequest = SetKorrekturVorschlagEinheitSolarParameter;

pub type SetKorrekturVorschlagEinheitSolarResponse = SetKorrekturVorschlagEinheitSolarAntwort;

pub type SetKorrekturVorschlagEinheitBiomasseRequest = SetKorrekturVorschlagEinheitBiomasseParameter;

pub type SetKorrekturVorschlagEinheitBiomasseResponse = SetKorrekturVorschlagEinheitBiomasseAntwort;

pub type SetKorrekturVorschlagEinheitWasserRequest = SetKorrekturVorschlagEinheitWasserParameter;

pub type SetKorrekturVorschlagEinheitWasserResponse = SetKorrekturVorschlagEinheitWasserAntwort;

pub type SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest = SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungParameter;

pub type SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse = SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungAntwort;

pub type SetKorrekturVorschlagEinheitVerbrennungRequest = SetKorrekturVorschlagEinheitVerbrennungParameter;

pub type SetKorrekturVorschlagEinheitVerbrennungResponse = SetKorrekturVorschlagEinheitVerbrennungAntwort;

pub type SetKorrekturVorschlagEinheitGasSpeicherRequest = SetKorrekturVorschlagEinheitGasSpeicherParameter;

pub type SetKorrekturVorschlagEinheitGasSpeicherResponse = SetKorrekturVorschlagEinheitGasSpeicherAntwort;

pub type SetKorrekturVorschlagEinheitStromVerbraucherRequest = SetKorrekturVorschlagEinheitStromVerbraucherParameter;

pub type SetKorrekturVorschlagEinheitStromVerbraucherResponse = SetKorrekturVorschlagEinheitStromVerbraucherAntwort;

pub type SetKorrekturVorschlagEinheitGasErzeugerRequest = SetKorrekturVorschlagEinheitGasErzeugerParameter;

pub type SetKorrekturVorschlagEinheitGasErzeugerResponse = SetKorrekturVorschlagEinheitGasErzeugerAntwort;

pub type SetKorrekturVorschlagEinheitGasVerbraucherRequest = SetKorrekturVorschlagEinheitGasVerbraucherParameter;

pub type SetKorrekturVorschlagEinheitGasVerbraucherResponse = SetKorrekturVorschlagEinheitGasVerbraucherAntwort;

pub type SetKorrekturVorschlagEinheitStromSpeicherRequest = SetKorrekturVorschlagEinheitStromSpeicherParameter;

pub type SetKorrekturVorschlagEinheitStromSpeicherResponse = SetKorrekturVorschlagEinheitStromSpeicherAntwort;

pub type GetKorrekturVorschlagEinheitWindRequest = GetKorrekturVorschlagEinheitWindParameter;

pub type GetKorrekturVorschlagEinheitWindResponse = GetKorrekturVorschlagEinheitWindAntwort;

pub type GetKorrekturVorschlagEinheitAnlagenbetreiberRequest = GetKorrekturVorschlagEinheitAnlagenbetreiberParameter;

pub type GetKorrekturVorschlagEinheitAnlagenbetreiberResponse = GetKorrekturVorschlagEinheitAnlagenbetreiberAntwort;

pub type GetKorrekturVorschlagEinheitSolarRequest = GetKorrekturVorschlagEinheitSolarParameter;

pub type GetKorrekturVorschlagEinheitSolarResponse = GetKorrekturVorschlagEinheitSolarAntwort;

pub type GetKorrekturVorschlagEinheitBiomasseRequest = GetKorrekturVorschlagEinheitBiomasseParameter;

pub type GetKorrekturVorschlagEinheitBiomasseResponse = GetKorrekturVorschlagEinheitBiomasseAntwort;

pub type GetKorrekturVorschlagEinheitWasserRequest = GetKorrekturVorschlagEinheitWasserParameter;

pub type GetKorrekturVorschlagEinheitWasserResponse = GetKorrekturVorschlagEinheitWasserAntwort;

pub type GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest = GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungParameter;

pub type GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse = GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungAntwort;

pub type GetKorrekturVorschlagEinheitVerbrennungRequest = GetKorrekturVorschlagEinheitVerbrennungParameter;

pub type GetKorrekturVorschlagEinheitVerbrennungResponse = GetKorrekturVorschlagEinheitVerbrennungAntwort;

pub type GetKorrekturVorschlagEinheitGasSpeicherRequest = GetKorrekturVorschlagEinheitGasSpeicherParameter;

pub type GetKorrekturVorschlagEinheitGasSpeicherResponse = GetKorrekturVorschlagEinheitGasSpeicherAntwort;

pub type GetKorrekturVorschlagEinheitStromVerbraucherRequest = GetKorrekturVorschlagEinheitStromVerbraucherParameter;

pub type GetKorrekturVorschlagEinheitStromVerbraucherResponse = GetKorrekturVorschlagEinheitStromVerbraucherAntwort;

pub type GetKorrekturVorschlagEinheitGasErzeugerRequest = GetKorrekturVorschlagEinheitGasErzeugerParameter;

pub type GetKorrekturVorschlagEinheitGasErzeugerResponse = GetKorrekturVorschlagEinheitGasErzeugerAntwort;

pub type GetKorrekturVorschlagEinheitGasVerbraucherRequest = GetKorrekturVorschlagEinheitGasVerbraucherParameter;

pub type GetKorrekturVorschlagEinheitGasVerbraucherResponse = GetKorrekturVorschlagEinheitGasVerbraucherAntwort;

pub type GetKorrekturVorschlagEinheitStromSpeicherRequest = GetKorrekturVorschlagEinheitStromSpeicherParameter;

pub type GetKorrekturVorschlagEinheitStromSpeicherResponse = GetKorrekturVorschlagEinheitStromSpeicherAntwort;

pub type DeleteKorrekturvorschlagRequest = DeleteKorrekturvorschlagParameter;

pub type DeleteKorrekturvorschlagResponse = DeleteKorrekturvorschlagAntwort;

pub type GetListeLetzteAktualisierungRequest = GetListeLetzteAktualisierungParameter;

pub type GetListeLetzteAktualisierungResponse = GetListeLetzteAktualisierungAntwort;

pub type GetListeAlleEinheitenRequest = GetListeAlleEinheitenParameter;

pub type GetListeAlleEinheitenResponse = GetListeAlleEinheitenAntwort;

pub type GetListeFreigegebeneEinheitenRequest = GetListeFreigegebeneEinheitenParameter;

pub type GetListeFreigegebeneEinheitenResponse = GetListeFreigegebeneEinheitenAntwort;

pub type GetMeineEinheitenRequest = GetMeineEinheitenParameter;

pub type GetMeineEinheitenResponse = GetMeineEinheitenAntwort;

pub type GetListeEinheitenInMeinemNetzRequest = GetListeEinheitenInMeinemNetzParameter;

pub type GetListeEinheitenInMeinemNetzResponse = GetListeEinheitenInMeinemNetzAntwort;

pub type GetListeGeloeschteUndDeaktivierteEinheitenRequest = GetListeGeloeschteUndDeaktivierteEinheitenParameter;

pub type GetListeGeloeschteUndDeaktivierteEinheitenResponse = GetListeGeloeschteUndDeaktivierteEinheitenAntwort;

pub type GetListeEinheitenAenderungNetzbetreiberzuordnungRequest = GetListeEinheitenAenderungNetzbetreiberzuordnungParameter;

pub type GetListeEinheitenAenderungNetzbetreiberzuordnungResponse = GetListeEinheitenAenderungNetzbetreiberzuordnungAntwort;

pub type GetEinheitWindRequest = GetEinheitWindParameter;

pub type GetEinheitWindResponse = GetEinheitWindAntwort;

pub type GetEinheitSolarRequest = GetEinheitSolarParameter;

pub type GetEinheitSolarResponse = GetEinheitSolarAntwort;

pub type GetEinheitBiomasseRequest = GetEinheitBiomasseParameter;

pub type GetEinheitBiomasseResponse = GetEinheitBiomasseAntwort;

pub type GetEinheitWasserRequest = GetEinheitWasserParameter;

pub type GetEinheitWasserResponse = GetEinheitWasserAntwort;

pub type GetEinheitGeothermieGrubengasDruckentspannungRequest = GetEinheitGeothermieGrubengasDruckentspannungParameter;

pub type GetEinheitGeothermieGrubengasDruckentspannungResponse = GetEinheitGeothermieGrubengasDruckentspannungAntwort;

pub type GetEinheitVerbrennungRequest = GetEinheitVerbrennungParameter;

pub type GetEinheitVerbrennungResponse = GetEinheitVerbrennungAntwort;

pub type GetEinheitKernkraftRequest = GetEinheitKernkraftParameter;

pub type GetEinheitKernkraftResponse = GetEinheitKernkraftAntwort;

pub type GetEinheitStromSpeicherRequest = GetEinheitStromSpeicherParameter;

pub type GetEinheitStromSpeicherResponse = GetEinheitStromSpeicherAntwort;

pub type GetEinheitStromVerbraucherRequest = GetEinheitStromVerbraucherParameter;

pub type GetEinheitStromVerbraucherResponse = GetEinheitStromVerbraucherAntwort;

pub type GetEinheitGasErzeugerRequest = GetEinheitGasErzeugerParameter;

pub type GetEinheitGasErzeugerResponse = GetEinheitGasErzeugerAntwort;

pub type GetEinheitGasSpeicherRequest = GetEinheitGasSpeicherParameter;

pub type GetEinheitGasSpeicherResponse = GetEinheitGasSpeicherAntwort;

pub type GetEinheitGasVerbraucherRequest = GetEinheitGasVerbraucherParameter;

pub type GetEinheitGasVerbraucherResponse = GetEinheitGasVerbraucherAntwort;

pub type GetEinheitGenehmigungRequest = GetEinheitGenehmigungParameter;

pub type GetEinheitGenehmigungResponse = GetEinheitGenehmigungAntwort;

pub type GetStromSpeicherRequest = GetStromSpeicherParameter;

pub type GetStromSpeicherResponse = GetStromSpeicherAntwort;

pub type GetGasSpeicherRequest = GetGasSpeicherParameter;

pub type GetGasSpeicherResponse = GetGasSpeicherAntwort;

pub type GetAnlageEegWindRequest = GetAnlageEegWindParameter;

pub type GetAnlageEegWindResponse = GetAnlageEegWindAntwort;

pub type GetAnlageEegSolarRequest = GetAnlageEegSolarParameter;

pub type GetAnlageEegSolarResponse = GetAnlageEegSolarAntwort;

pub type GetAnlageEegBiomasseRequest = GetAnlageEegBiomasseParameter;

pub type GetAnlageEegBiomasseResponse = GetAnlageEegBiomasseAntwort;

pub type GetAnlageEegWasserRequest = GetAnlageEegWasserParameter;

pub type GetAnlageEegWasserResponse = GetAnlageEegWasserAntwort;

pub type GetAnlageEegSpeicherRequest = GetAnlageEegSpeicherParameter;

pub type GetAnlageEegSpeicherResponse = GetAnlageEegSpeicherAntwort;

pub type GetAnlageEegGeothermieGrubengasDruckentspannungRequest = GetAnlageEegGeothermieGrubengasDruckentspannungParameter;

pub type GetAnlageEegGeothermieGrubengasDruckentspannungResponse = GetAnlageEegGeothermieGrubengasDruckentspannungAntwort;

pub type GetAnlageKwkRequest = GetAnlageKwkParameter;

pub type GetAnlageKwkResponse = GetAnlageKwkAntwort;

pub type GetListeAlleLokationenRequest = GetListeAlleLokationenParameter;

pub type GetListeAlleLokationenResponse = GetListeAlleLokationenAntwort;

pub type GetListeFreigegebeneLokationenRequest = GetListeFreigegebeneLokationenParameter;

pub type GetListeFreigegebeneLokationenResponse = GetListeFreigegebeneLokationenAntwort;

pub type GetLokationStromErzeugerRequest = GetLokationStromErzeugerParameter;

pub type GetLokationStromErzeugerResponse = GetLokationStromErzeugerAntwort;

pub type GetLokationStromVerbraucherRequest = GetLokationStromVerbraucherParameter;

pub type GetLokationStromVerbraucherResponse = GetLokationStromVerbraucherAntwort;

pub type GetLokationGasErzeugerRequest = GetLokationGasErzeugerParameter;

pub type GetLokationGasErzeugerResponse = GetLokationGasErzeugerAntwort;

pub type GetLokationGasVerbraucherRequest = GetLokationGasVerbraucherParameter;

pub type GetLokationGasVerbraucherResponse = GetLokationGasVerbraucherAntwort;

pub type GetGefilterteListeStromErzeugerRequest = GetGefilterteListeStromErzeugerParameter;

pub type GetGefilterteListeStromErzeugerResponse = GetGefilterteListeStromErzeugerAntwort;

pub type GetGefilterteListeStromVerbraucherRequest = GetGefilterteListeStromVerbraucherParameter;

pub type GetGefilterteListeStromVerbraucherResponse = GetGefilterteListeStromVerbraucherAntwort;

pub type GetGefilterteListeGasErzeugerRequest = GetGefilterteListeGasErzeugerParameter;

pub type GetGefilterteListeGasErzeugerResponse = GetGefilterteListeGasErzeugerAntwort;

pub type GetGefilterteListeGasVerbraucherRequest = GetGefilterteListeGasVerbraucherParameter;

pub type GetGefilterteListeGasVerbraucherResponse = GetGefilterteListeGasVerbraucherAntwort;

pub type GetGefilterteListeLokationenStromErzeugerRequest = GetGefilterteListeLokationenStromErzeugerParameter;

pub type GetGefilterteListeLokationenStromErzeugerResponse = GetGefilterteListeLokationenStromErzeugerAntwort;

pub type GetGefilterteListeLokationenStromVerbraucherRequest = GetGefilterteListeLokationenStromVerbraucherParameter;

pub type GetGefilterteListeLokationenStromVerbraucherResponse = GetGefilterteListeLokationenStromVerbraucherAntwort;

pub type GetGefilterteListeLokationenGasErzeugerRequest = GetGefilterteListeLokationenGasErzeugerParameter;

pub type GetGefilterteListeLokationenGasErzeugerResponse = GetGefilterteListeLokationenGasErzeugerAntwort;

pub type GetGefilterteListeLokationenGasVerbraucherRequest = GetGefilterteListeLokationenGasVerbraucherParameter;

pub type GetGefilterteListeLokationenGasVerbraucherResponse = GetGefilterteListeLokationenGasVerbraucherAntwort;

pub type SetNetzanschlusspunktStromErzeugerRequest = SetNetzanschlusspunktStromErzeugerParameter;

pub type SetNetzanschlusspunktStromErzeugerResponse = SetNetzanschlusspunktStromErzeugerAntwort;

pub type SetNetzanschlusspunktStromVerbraucherRequest = SetNetzanschlusspunktStromVerbraucherParameter;

pub type SetNetzanschlusspunktStromVerbraucherResponse = SetNetzanschlusspunktStromVerbraucherAntwort;

pub type SetNetzanschlusspunktGasErzeugerRequest = SetNetzanschlusspunktGasErzeugerParameter;

pub type SetNetzanschlusspunktGasErzeugerResponse = SetNetzanschlusspunktGasErzeugerAntwort;

pub type SetNetzanschlusspunktGasVerbraucherRequest = SetNetzanschlusspunktGasVerbraucherParameter;

pub type SetNetzanschlusspunktGasVerbraucherResponse = SetNetzanschlusspunktGasVerbraucherAntwort;

pub type DeleteNetzanschlusspunktRequest = DeleteNetzanschlusspunktParameter;

pub type DeleteNetzanschlusspunktResponse = DeleteNetzanschlusspunktAntwort;

pub type GetListeMeineNetzanschlusspunkteRequest = GetListeMeineNetzanschlusspunkteParameter;

pub type GetListeMeineNetzanschlusspunkteResponse = GetListeMeineNetzanschlusspunkteAntwort;

pub type GetListeAlleNetzanschlusspunkteRequest = GetListeAlleNetzanschlusspunkteParameter;

pub type GetListeAlleNetzanschlusspunkteResponse = GetListeAlleNetzanschlusspunkteAntwort;

}

pub mod ports {
use yaserde::{YaSerialize, YaDeserialize};
            use yaserde::de::from_str;
            use async_trait::async_trait;
            use yaserde::ser::to_string;
            use super::*;
            pub type GetLokaleUhrzeitRequest = messages::GetLokaleUhrzeitRequest;

pub type GetLokaleUhrzeitResponse = messages::GetLokaleUhrzeitResponse;

pub type GetLokaleUhrzeitMitAuthentifizierungRequest = messages::GetLokaleUhrzeitMitAuthentifizierungRequest;

pub type GetLokaleUhrzeitMitAuthentifizierungResponse = messages::GetLokaleUhrzeitMitAuthentifizierungResponse;

pub type GetListeKatalogkategorienRequest = messages::GetListeKatalogkategorienRequest;

pub type GetListeKatalogkategorienResponse = messages::GetListeKatalogkategorienResponse;

pub type GetKatalogwerteRequest = messages::GetKatalogwerteRequest;

pub type GetKatalogwerteResponse = messages::GetKatalogwerteResponse;

pub type GetBilanzierungsgebieteRequest = messages::GetBilanzierungsgebieteRequest;

pub type GetBilanzierungsgebieteResponse = messages::GetBilanzierungsgebieteResponse;

pub type GetAktuellerStandTageskontingentRequest = messages::GetAktuellerStandTageskontingentRequest;

pub type GetAktuellerStandTageskontingentResponse = messages::GetAktuellerStandTageskontingentResponse;

#[async_trait]
pub trait AllgemeineFunktionen {
	async fn get_lokale_uhrzeit (&self, get_lokale_uhrzeit_request: GetLokaleUhrzeitRequest) -> Result<GetLokaleUhrzeitResponse,Option<SoapFault>>;
	async fn get_lokale_uhrzeit_mit_authentifizierung (&self, get_lokale_uhrzeit_mit_authentifizierung_request: GetLokaleUhrzeitMitAuthentifizierungRequest) -> Result<GetLokaleUhrzeitMitAuthentifizierungResponse,Option<SoapFault>>;
	async fn get_liste_katalogkategorien (&self, get_liste_katalogkategorien_request: GetListeKatalogkategorienRequest) -> Result<GetListeKatalogkategorienResponse,Option<SoapFault>>;
	async fn get_katalogwerte (&self, get_katalogwerte_request: GetKatalogwerteRequest) -> Result<GetKatalogwerteResponse,Option<SoapFault>>;
	async fn get_bilanzierungsgebiete (&self, get_bilanzierungsgebiete_request: GetBilanzierungsgebieteRequest) -> Result<GetBilanzierungsgebieteResponse,Option<SoapFault>>;
	async fn get_aktueller_stand_tageskontingent (&self, get_aktueller_stand_tageskontingent_request: GetAktuellerStandTageskontingentRequest) -> Result<GetAktuellerStandTageskontingentResponse,Option<SoapFault>>;
}
pub type GetGefilterteListeMarktakteureRequest = messages::GetGefilterteListeMarktakteureRequest;

pub type GetGefilterteListeMarktakteureResponse = messages::GetGefilterteListeMarktakteureResponse;

pub type GetListeAlleMarktakteureRequest = messages::GetListeAlleMarktakteureRequest;

pub type GetListeAlleMarktakteureResponse = messages::GetListeAlleMarktakteureResponse;

pub type GetListeFreigegebeneMarktakteureRequest = messages::GetListeFreigegebeneMarktakteureRequest;

pub type GetListeFreigegebeneMarktakteureResponse = messages::GetListeFreigegebeneMarktakteureResponse;

pub type GetMarktakteurRequest = messages::GetMarktakteurRequest;

pub type GetMarktakteurResponse = messages::GetMarktakteurResponse;

pub type GetMeineMarktakteureRequest = messages::GetMeineMarktakteureRequest;

pub type GetMeineMarktakteureResponse = messages::GetMeineMarktakteureResponse;

pub type GetListeGeloeschteUndDeaktivierteMarktakteureRequest = messages::GetListeGeloeschteUndDeaktivierteMarktakteureRequest;

pub type GetListeGeloeschteUndDeaktivierteMarktakteureResponse = messages::GetListeGeloeschteUndDeaktivierteMarktakteureResponse;

#[async_trait]
pub trait Akteur {
	async fn get_gefilterte_liste_marktakteure (&self, get_gefilterte_liste_marktakteure_request: GetGefilterteListeMarktakteureRequest) -> Result<GetGefilterteListeMarktakteureResponse,Option<SoapFault>>;
	async fn get_liste_alle_marktakteure (&self, get_liste_alle_marktakteure_request: GetListeAlleMarktakteureRequest) -> Result<GetListeAlleMarktakteureResponse,Option<SoapFault>>;
	async fn get_liste_freigegebene_marktakteure (&self, get_liste_freigegebene_marktakteure_request: GetListeFreigegebeneMarktakteureRequest) -> Result<GetListeFreigegebeneMarktakteureResponse,Option<SoapFault>>;
	async fn get_marktakteur (&self, get_marktakteur_request: GetMarktakteurRequest) -> Result<GetMarktakteurResponse,Option<SoapFault>>;
	async fn get_meine_marktakteure (&self, get_meine_marktakteure_request: GetMeineMarktakteureRequest) -> Result<GetMeineMarktakteureResponse,Option<SoapFault>>;
	async fn get_liste_geloeschte_und_deaktivierte_marktakteure (&self, get_liste_geloeschte_und_deaktivierte_marktakteure_request: GetListeGeloeschteUndDeaktivierteMarktakteureRequest) -> Result<GetListeGeloeschteUndDeaktivierteMarktakteureResponse,Option<SoapFault>>;
}
pub type GetListeLetzteAktualisierungRequest = messages::GetListeLetzteAktualisierungRequest;

pub type GetListeLetzteAktualisierungResponse = messages::GetListeLetzteAktualisierungResponse;

pub type GetListeAlleEinheitenRequest = messages::GetListeAlleEinheitenRequest;

pub type GetListeAlleEinheitenResponse = messages::GetListeAlleEinheitenResponse;

pub type GetListeFreigegebeneEinheitenRequest = messages::GetListeFreigegebeneEinheitenRequest;

pub type GetListeFreigegebeneEinheitenResponse = messages::GetListeFreigegebeneEinheitenResponse;

pub type GetMeineEinheitenRequest = messages::GetMeineEinheitenRequest;

pub type GetMeineEinheitenResponse = messages::GetMeineEinheitenResponse;

pub type GetListeEinheitenInMeinemNetzRequest = messages::GetListeEinheitenInMeinemNetzRequest;

pub type GetListeEinheitenInMeinemNetzResponse = messages::GetListeEinheitenInMeinemNetzResponse;

pub type GetListeGeloeschteUndDeaktivierteEinheitenRequest = messages::GetListeGeloeschteUndDeaktivierteEinheitenRequest;

pub type GetListeGeloeschteUndDeaktivierteEinheitenResponse = messages::GetListeGeloeschteUndDeaktivierteEinheitenResponse;

pub type GetListeEinheitenAenderungNetzbetreiberzuordnungRequest = messages::GetListeEinheitenAenderungNetzbetreiberzuordnungRequest;

pub type GetListeEinheitenAenderungNetzbetreiberzuordnungResponse = messages::GetListeEinheitenAenderungNetzbetreiberzuordnungResponse;

pub type GetEinheitWindRequest = messages::GetEinheitWindRequest;

pub type GetEinheitWindResponse = messages::GetEinheitWindResponse;

pub type GetEinheitSolarRequest = messages::GetEinheitSolarRequest;

pub type GetEinheitSolarResponse = messages::GetEinheitSolarResponse;

pub type GetEinheitBiomasseRequest = messages::GetEinheitBiomasseRequest;

pub type GetEinheitBiomasseResponse = messages::GetEinheitBiomasseResponse;

pub type GetEinheitWasserRequest = messages::GetEinheitWasserRequest;

pub type GetEinheitWasserResponse = messages::GetEinheitWasserResponse;

pub type GetEinheitGeothermieGrubengasDruckentspannungRequest = messages::GetEinheitGeothermieGrubengasDruckentspannungRequest;

pub type GetEinheitGeothermieGrubengasDruckentspannungResponse = messages::GetEinheitGeothermieGrubengasDruckentspannungResponse;

pub type GetEinheitVerbrennungRequest = messages::GetEinheitVerbrennungRequest;

pub type GetEinheitVerbrennungResponse = messages::GetEinheitVerbrennungResponse;

pub type GetEinheitKernkraftRequest = messages::GetEinheitKernkraftRequest;

pub type GetEinheitKernkraftResponse = messages::GetEinheitKernkraftResponse;

pub type GetEinheitStromSpeicherRequest = messages::GetEinheitStromSpeicherRequest;

pub type GetEinheitStromSpeicherResponse = messages::GetEinheitStromSpeicherResponse;

pub type GetEinheitStromVerbraucherRequest = messages::GetEinheitStromVerbraucherRequest;

pub type GetEinheitStromVerbraucherResponse = messages::GetEinheitStromVerbraucherResponse;

pub type GetEinheitGasErzeugerRequest = messages::GetEinheitGasErzeugerRequest;

pub type GetEinheitGasErzeugerResponse = messages::GetEinheitGasErzeugerResponse;

pub type GetEinheitGasSpeicherRequest = messages::GetEinheitGasSpeicherRequest;

pub type GetEinheitGasSpeicherResponse = messages::GetEinheitGasSpeicherResponse;

pub type GetEinheitGasVerbraucherRequest = messages::GetEinheitGasVerbraucherRequest;

pub type GetEinheitGasVerbraucherResponse = messages::GetEinheitGasVerbraucherResponse;

pub type GetEinheitGenehmigungRequest = messages::GetEinheitGenehmigungRequest;

pub type GetEinheitGenehmigungResponse = messages::GetEinheitGenehmigungResponse;

pub type GetStromSpeicherRequest = messages::GetStromSpeicherRequest;

pub type GetStromSpeicherResponse = messages::GetStromSpeicherResponse;

pub type GetGasSpeicherRequest = messages::GetGasSpeicherRequest;

pub type GetGasSpeicherResponse = messages::GetGasSpeicherResponse;

pub type GetAnlageEegWindRequest = messages::GetAnlageEegWindRequest;

pub type GetAnlageEegWindResponse = messages::GetAnlageEegWindResponse;

pub type GetAnlageEegSolarRequest = messages::GetAnlageEegSolarRequest;

pub type GetAnlageEegSolarResponse = messages::GetAnlageEegSolarResponse;

pub type GetAnlageEegBiomasseRequest = messages::GetAnlageEegBiomasseRequest;

pub type GetAnlageEegBiomasseResponse = messages::GetAnlageEegBiomasseResponse;

pub type GetAnlageEegWasserRequest = messages::GetAnlageEegWasserRequest;

pub type GetAnlageEegWasserResponse = messages::GetAnlageEegWasserResponse;

pub type GetAnlageEegSpeicherRequest = messages::GetAnlageEegSpeicherRequest;

pub type GetAnlageEegSpeicherResponse = messages::GetAnlageEegSpeicherResponse;

pub type GetAnlageEegGeothermieGrubengasDruckentspannungRequest = messages::GetAnlageEegGeothermieGrubengasDruckentspannungRequest;

pub type GetAnlageEegGeothermieGrubengasDruckentspannungResponse = messages::GetAnlageEegGeothermieGrubengasDruckentspannungResponse;

pub type GetAnlageKwkRequest = messages::GetAnlageKwkRequest;

pub type GetAnlageKwkResponse = messages::GetAnlageKwkResponse;

pub type GetListeAlleLokationenRequest = messages::GetListeAlleLokationenRequest;

pub type GetListeAlleLokationenResponse = messages::GetListeAlleLokationenResponse;

pub type GetListeFreigegebeneLokationenRequest = messages::GetListeFreigegebeneLokationenRequest;

pub type GetListeFreigegebeneLokationenResponse = messages::GetListeFreigegebeneLokationenResponse;

pub type GetLokationStromErzeugerRequest = messages::GetLokationStromErzeugerRequest;

pub type GetLokationStromErzeugerResponse = messages::GetLokationStromErzeugerResponse;

pub type GetLokationStromVerbraucherRequest = messages::GetLokationStromVerbraucherRequest;

pub type GetLokationStromVerbraucherResponse = messages::GetLokationStromVerbraucherResponse;

pub type GetLokationGasErzeugerRequest = messages::GetLokationGasErzeugerRequest;

pub type GetLokationGasErzeugerResponse = messages::GetLokationGasErzeugerResponse;

pub type GetLokationGasVerbraucherRequest = messages::GetLokationGasVerbraucherRequest;

pub type GetLokationGasVerbraucherResponse = messages::GetLokationGasVerbraucherResponse;

pub type GetGefilterteListeStromErzeugerRequest = messages::GetGefilterteListeStromErzeugerRequest;

pub type GetGefilterteListeStromErzeugerResponse = messages::GetGefilterteListeStromErzeugerResponse;

pub type GetGefilterteListeStromVerbraucherRequest = messages::GetGefilterteListeStromVerbraucherRequest;

pub type GetGefilterteListeStromVerbraucherResponse = messages::GetGefilterteListeStromVerbraucherResponse;

pub type GetGefilterteListeGasErzeugerRequest = messages::GetGefilterteListeGasErzeugerRequest;

pub type GetGefilterteListeGasErzeugerResponse = messages::GetGefilterteListeGasErzeugerResponse;

pub type GetGefilterteListeGasVerbraucherRequest = messages::GetGefilterteListeGasVerbraucherRequest;

pub type GetGefilterteListeGasVerbraucherResponse = messages::GetGefilterteListeGasVerbraucherResponse;

pub type GetGefilterteListeLokationenStromErzeugerRequest = messages::GetGefilterteListeLokationenStromErzeugerRequest;

pub type GetGefilterteListeLokationenStromErzeugerResponse = messages::GetGefilterteListeLokationenStromErzeugerResponse;

pub type GetGefilterteListeLokationenStromVerbraucherRequest = messages::GetGefilterteListeLokationenStromVerbraucherRequest;

pub type GetGefilterteListeLokationenStromVerbraucherResponse = messages::GetGefilterteListeLokationenStromVerbraucherResponse;

pub type GetGefilterteListeLokationenGasErzeugerRequest = messages::GetGefilterteListeLokationenGasErzeugerRequest;

pub type GetGefilterteListeLokationenGasErzeugerResponse = messages::GetGefilterteListeLokationenGasErzeugerResponse;

pub type GetGefilterteListeLokationenGasVerbraucherRequest = messages::GetGefilterteListeLokationenGasVerbraucherRequest;

pub type GetGefilterteListeLokationenGasVerbraucherResponse = messages::GetGefilterteListeLokationenGasVerbraucherResponse;

#[async_trait]
pub trait Anlage {
	async fn get_liste_letzte_aktualisierung (&self, get_liste_letzte_aktualisierung_request: GetListeLetzteAktualisierungRequest) -> Result<GetListeLetzteAktualisierungResponse,Option<SoapFault>>;
	async fn get_liste_alle_einheiten (&self, get_liste_alle_einheiten_request: GetListeAlleEinheitenRequest) -> Result<GetListeAlleEinheitenResponse,Option<SoapFault>>;
	async fn get_liste_freigegebene_einheiten (&self, get_liste_freigegebene_einheiten_request: GetListeFreigegebeneEinheitenRequest) -> Result<GetListeFreigegebeneEinheitenResponse,Option<SoapFault>>;
	async fn get_meine_einheiten (&self, get_meine_einheiten_request: GetMeineEinheitenRequest) -> Result<GetMeineEinheitenResponse,Option<SoapFault>>;
	async fn get_liste_einheiten_in_meinem_netz (&self, get_liste_einheiten_in_meinem_netz_request: GetListeEinheitenInMeinemNetzRequest) -> Result<GetListeEinheitenInMeinemNetzResponse,Option<SoapFault>>;
	async fn get_liste_geloeschte_und_deaktivierte_einheiten (&self, get_liste_geloeschte_und_deaktivierte_einheiten_request: GetListeGeloeschteUndDeaktivierteEinheitenRequest) -> Result<GetListeGeloeschteUndDeaktivierteEinheitenResponse,Option<SoapFault>>;
	async fn get_liste_einheiten_aenderung_netzbetreiberzuordnung (&self, get_liste_einheiten_aenderung_netzbetreiberzuordnung_request: GetListeEinheitenAenderungNetzbetreiberzuordnungRequest) -> Result<GetListeEinheitenAenderungNetzbetreiberzuordnungResponse,Option<SoapFault>>;
	async fn get_einheit_wind (&self, get_einheit_wind_request: GetEinheitWindRequest) -> Result<GetEinheitWindResponse,Option<SoapFault>>;
	async fn get_einheit_solar (&self, get_einheit_solar_request: GetEinheitSolarRequest) -> Result<GetEinheitSolarResponse,Option<SoapFault>>;
	async fn get_einheit_biomasse (&self, get_einheit_biomasse_request: GetEinheitBiomasseRequest) -> Result<GetEinheitBiomasseResponse,Option<SoapFault>>;
	async fn get_einheit_wasser (&self, get_einheit_wasser_request: GetEinheitWasserRequest) -> Result<GetEinheitWasserResponse,Option<SoapFault>>;
	async fn get_einheit_geothermie_grubengas_druckentspannung (&self, get_einheit_geothermie_grubengas_druckentspannung_request: GetEinheitGeothermieGrubengasDruckentspannungRequest) -> Result<GetEinheitGeothermieGrubengasDruckentspannungResponse,Option<SoapFault>>;
	async fn get_einheit_verbrennung (&self, get_einheit_verbrennung_request: GetEinheitVerbrennungRequest) -> Result<GetEinheitVerbrennungResponse,Option<SoapFault>>;
	async fn get_einheit_kernkraft (&self, get_einheit_kernkraft_request: GetEinheitKernkraftRequest) -> Result<GetEinheitKernkraftResponse,Option<SoapFault>>;
	async fn get_einheit_strom_speicher (&self, get_einheit_strom_speicher_request: GetEinheitStromSpeicherRequest) -> Result<GetEinheitStromSpeicherResponse,Option<SoapFault>>;
	async fn get_einheit_strom_verbraucher (&self, get_einheit_strom_verbraucher_request: GetEinheitStromVerbraucherRequest) -> Result<GetEinheitStromVerbraucherResponse,Option<SoapFault>>;
	async fn get_einheit_gas_erzeuger (&self, get_einheit_gas_erzeuger_request: GetEinheitGasErzeugerRequest) -> Result<GetEinheitGasErzeugerResponse,Option<SoapFault>>;
	async fn get_einheit_gas_speicher (&self, get_einheit_gas_speicher_request: GetEinheitGasSpeicherRequest) -> Result<GetEinheitGasSpeicherResponse,Option<SoapFault>>;
	async fn get_einheit_gas_verbraucher (&self, get_einheit_gas_verbraucher_request: GetEinheitGasVerbraucherRequest) -> Result<GetEinheitGasVerbraucherResponse,Option<SoapFault>>;
	async fn get_einheit_genehmigung (&self, get_einheit_genehmigung_request: GetEinheitGenehmigungRequest) -> Result<GetEinheitGenehmigungResponse,Option<SoapFault>>;
	async fn get_strom_speicher (&self, get_strom_speicher_request: GetStromSpeicherRequest) -> Result<GetStromSpeicherResponse,Option<SoapFault>>;
	async fn get_gas_speicher (&self, get_gas_speicher_request: GetGasSpeicherRequest) -> Result<GetGasSpeicherResponse,Option<SoapFault>>;
	async fn get_anlage_eeg_wind (&self, get_anlage_eeg_wind_request: GetAnlageEegWindRequest) -> Result<GetAnlageEegWindResponse,Option<SoapFault>>;
	async fn get_anlage_eeg_solar (&self, get_anlage_eeg_solar_request: GetAnlageEegSolarRequest) -> Result<GetAnlageEegSolarResponse,Option<SoapFault>>;
	async fn get_anlage_eeg_biomasse (&self, get_anlage_eeg_biomasse_request: GetAnlageEegBiomasseRequest) -> Result<GetAnlageEegBiomasseResponse,Option<SoapFault>>;
	async fn get_anlage_eeg_wasser (&self, get_anlage_eeg_wasser_request: GetAnlageEegWasserRequest) -> Result<GetAnlageEegWasserResponse,Option<SoapFault>>;
	async fn get_anlage_eeg_speicher (&self, get_anlage_eeg_speicher_request: GetAnlageEegSpeicherRequest) -> Result<GetAnlageEegSpeicherResponse,Option<SoapFault>>;
	async fn get_anlage_eeg_geothermie_grubengas_druckentspannung (&self, get_anlage_eeg_geothermie_grubengas_druckentspannung_request: GetAnlageEegGeothermieGrubengasDruckentspannungRequest) -> Result<GetAnlageEegGeothermieGrubengasDruckentspannungResponse,Option<SoapFault>>;
	async fn get_anlage_kwk (&self, get_anlage_kwk_request: GetAnlageKwkRequest) -> Result<GetAnlageKwkResponse,Option<SoapFault>>;
	async fn get_liste_alle_lokationen (&self, get_liste_alle_lokationen_request: GetListeAlleLokationenRequest) -> Result<GetListeAlleLokationenResponse,Option<SoapFault>>;
	async fn get_liste_freigegebene_lokationen (&self, get_liste_freigegebene_lokationen_request: GetListeFreigegebeneLokationenRequest) -> Result<GetListeFreigegebeneLokationenResponse,Option<SoapFault>>;
	async fn get_lokation_strom_erzeuger (&self, get_lokation_strom_erzeuger_request: GetLokationStromErzeugerRequest) -> Result<GetLokationStromErzeugerResponse,Option<SoapFault>>;
	async fn get_lokation_strom_verbraucher (&self, get_lokation_strom_verbraucher_request: GetLokationStromVerbraucherRequest) -> Result<GetLokationStromVerbraucherResponse,Option<SoapFault>>;
	async fn get_lokation_gas_erzeuger (&self, get_lokation_gas_erzeuger_request: GetLokationGasErzeugerRequest) -> Result<GetLokationGasErzeugerResponse,Option<SoapFault>>;
	async fn get_lokation_gas_verbraucher (&self, get_lokation_gas_verbraucher_request: GetLokationGasVerbraucherRequest) -> Result<GetLokationGasVerbraucherResponse,Option<SoapFault>>;
	async fn get_gefilterte_liste_strom_erzeuger (&self, get_gefilterte_liste_strom_erzeuger_request: GetGefilterteListeStromErzeugerRequest) -> Result<GetGefilterteListeStromErzeugerResponse,Option<SoapFault>>;
	async fn get_gefilterte_liste_strom_verbraucher (&self, get_gefilterte_liste_strom_verbraucher_request: GetGefilterteListeStromVerbraucherRequest) -> Result<GetGefilterteListeStromVerbraucherResponse,Option<SoapFault>>;
	async fn get_gefilterte_liste_gas_erzeuger (&self, get_gefilterte_liste_gas_erzeuger_request: GetGefilterteListeGasErzeugerRequest) -> Result<GetGefilterteListeGasErzeugerResponse,Option<SoapFault>>;
	async fn get_gefilterte_liste_gas_verbraucher (&self, get_gefilterte_liste_gas_verbraucher_request: GetGefilterteListeGasVerbraucherRequest) -> Result<GetGefilterteListeGasVerbraucherResponse,Option<SoapFault>>;
	async fn get_gefilterte_liste_lokationen_strom_erzeuger (&self, get_gefilterte_liste_lokationen_strom_erzeuger_request: GetGefilterteListeLokationenStromErzeugerRequest) -> Result<GetGefilterteListeLokationenStromErzeugerResponse,Option<SoapFault>>;
	async fn get_gefilterte_liste_lokationen_strom_verbraucher (&self, get_gefilterte_liste_lokationen_strom_verbraucher_request: GetGefilterteListeLokationenStromVerbraucherRequest) -> Result<GetGefilterteListeLokationenStromVerbraucherResponse,Option<SoapFault>>;
	async fn get_gefilterte_liste_lokationen_gas_erzeuger (&self, get_gefilterte_liste_lokationen_gas_erzeuger_request: GetGefilterteListeLokationenGasErzeugerRequest) -> Result<GetGefilterteListeLokationenGasErzeugerResponse,Option<SoapFault>>;
	async fn get_gefilterte_liste_lokationen_gas_verbraucher (&self, get_gefilterte_liste_lokationen_gas_verbraucher_request: GetGefilterteListeLokationenGasVerbraucherRequest) -> Result<GetGefilterteListeLokationenGasVerbraucherResponse,Option<SoapFault>>;
}
pub type GetListeMeineNetzbetreiberpruefungenRequest = messages::GetListeMeineNetzbetreiberpruefungenRequest;

pub type GetListeMeineNetzbetreiberpruefungenResponse = messages::GetListeMeineNetzbetreiberpruefungenResponse;

pub type ErneuteNetzbetreiberpruefungStartenRequest = messages::ErneuteNetzbetreiberpruefungStartenRequest;

pub type ErneuteNetzbetreiberpruefungStartenResponse = messages::ErneuteNetzbetreiberpruefungStartenResponse;

pub type VerschiebeEinheitZuAndererLokationRequest = messages::VerschiebeEinheitZuAndererLokationRequest;

pub type VerschiebeEinheitZuAndererLokationResponse = messages::VerschiebeEinheitZuAndererLokationResponse;

pub type VerschiebeEinheitZuNeuerLokationRequest = messages::VerschiebeEinheitZuNeuerLokationRequest;

pub type VerschiebeEinheitZuNeuerLokationResponse = messages::VerschiebeEinheitZuNeuerLokationResponse;

pub type SetNetzbetreiberpruefungAbgeschlossenRequest = messages::SetNetzbetreiberpruefungAbgeschlossenRequest;

pub type SetNetzbetreiberpruefungAbgeschlossenResponse = messages::SetNetzbetreiberpruefungAbgeschlossenResponse;

pub type SetDatenkorrekturErforderlichRequest = messages::SetDatenkorrekturErforderlichRequest;

pub type SetDatenkorrekturErforderlichResponse = messages::SetDatenkorrekturErforderlichResponse;

pub type SetNetzbetreiberNichtZustaendigRequest = messages::SetNetzbetreiberNichtZustaendigRequest;

pub type SetNetzbetreiberNichtZustaendigResponse = messages::SetNetzbetreiberNichtZustaendigResponse;

pub type SetKlaerungErforderlichRequest = messages::SetKlaerungErforderlichRequest;

pub type SetKlaerungErforderlichResponse = messages::SetKlaerungErforderlichResponse;

pub type SetKorrekturBetriebsstatusRequest = messages::SetKorrekturBetriebsstatusRequest;

pub type SetKorrekturBetriebsstatusResponse = messages::SetKorrekturBetriebsstatusResponse;

pub type GetKorrekturVorschlagBetriebsstatusRequest = messages::GetKorrekturVorschlagBetriebsstatusRequest;

pub type GetKorrekturVorschlagBetriebsstatusResponse = messages::GetKorrekturVorschlagBetriebsstatusResponse;

pub type GetWiedervorlageVorschlagBetriebsstatusRequest = messages::GetWiedervorlageVorschlagBetriebsstatusRequest;

pub type GetWiedervorlageVorschlagBetriebsstatusResponse = messages::GetWiedervorlageVorschlagBetriebsstatusResponse;

pub type SetKorrekturBetriebsstatusAbgeschlossenRequest = messages::SetKorrekturBetriebsstatusAbgeschlossenRequest;

pub type SetKorrekturBetriebsstatusAbgeschlossenResponse = messages::SetKorrekturBetriebsstatusAbgeschlossenResponse;

pub type SetEegAnlagenschluesselRequest = messages::SetEegAnlagenschluesselRequest;

pub type SetEegAnlagenschluesselResponse = messages::SetEegAnlagenschluesselResponse;

pub type SetStilllegungAbgelehntRequest = messages::SetStilllegungAbgelehntRequest;

pub type SetStilllegungAbgelehntResponse = messages::SetStilllegungAbgelehntResponse;

pub type SetAntragAufFristverlaengerungRequest = messages::SetAntragAufFristverlaengerungRequest;

pub type SetAntragAufFristverlaengerungResponse = messages::SetAntragAufFristverlaengerungResponse;

pub type RuecknahmeFristverlaengerungRequest = messages::RuecknahmeFristverlaengerungRequest;

pub type RuecknahmeFristverlaengerungResponse = messages::RuecknahmeFristverlaengerungResponse;

pub type SetKorrekturVorschlagEinheitWindRequest = messages::SetKorrekturVorschlagEinheitWindRequest;

pub type SetKorrekturVorschlagEinheitWindResponse = messages::SetKorrekturVorschlagEinheitWindResponse;

pub type SetKorrekturVorschlagEinheitAnlagenbetreiberRequest = messages::SetKorrekturVorschlagEinheitAnlagenbetreiberRequest;

pub type SetKorrekturVorschlagEinheitAnlagenbetreiberResponse = messages::SetKorrekturVorschlagEinheitAnlagenbetreiberResponse;

pub type SetKorrekturVorschlagEinheitSolarRequest = messages::SetKorrekturVorschlagEinheitSolarRequest;

pub type SetKorrekturVorschlagEinheitSolarResponse = messages::SetKorrekturVorschlagEinheitSolarResponse;

pub type SetKorrekturVorschlagEinheitBiomasseRequest = messages::SetKorrekturVorschlagEinheitBiomasseRequest;

pub type SetKorrekturVorschlagEinheitBiomasseResponse = messages::SetKorrekturVorschlagEinheitBiomasseResponse;

pub type SetKorrekturVorschlagEinheitWasserRequest = messages::SetKorrekturVorschlagEinheitWasserRequest;

pub type SetKorrekturVorschlagEinheitWasserResponse = messages::SetKorrekturVorschlagEinheitWasserResponse;

pub type SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest = messages::SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest;

pub type SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse = messages::SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse;

pub type SetKorrekturVorschlagEinheitVerbrennungRequest = messages::SetKorrekturVorschlagEinheitVerbrennungRequest;

pub type SetKorrekturVorschlagEinheitVerbrennungResponse = messages::SetKorrekturVorschlagEinheitVerbrennungResponse;

pub type SetKorrekturVorschlagEinheitGasSpeicherRequest = messages::SetKorrekturVorschlagEinheitGasSpeicherRequest;

pub type SetKorrekturVorschlagEinheitGasSpeicherResponse = messages::SetKorrekturVorschlagEinheitGasSpeicherResponse;

pub type SetKorrekturVorschlagEinheitStromVerbraucherRequest = messages::SetKorrekturVorschlagEinheitStromVerbraucherRequest;

pub type SetKorrekturVorschlagEinheitStromVerbraucherResponse = messages::SetKorrekturVorschlagEinheitStromVerbraucherResponse;

pub type SetKorrekturVorschlagEinheitGasErzeugerRequest = messages::SetKorrekturVorschlagEinheitGasErzeugerRequest;

pub type SetKorrekturVorschlagEinheitGasErzeugerResponse = messages::SetKorrekturVorschlagEinheitGasErzeugerResponse;

pub type SetKorrekturVorschlagEinheitGasVerbraucherRequest = messages::SetKorrekturVorschlagEinheitGasVerbraucherRequest;

pub type SetKorrekturVorschlagEinheitGasVerbraucherResponse = messages::SetKorrekturVorschlagEinheitGasVerbraucherResponse;

pub type SetKorrekturVorschlagEinheitStromSpeicherRequest = messages::SetKorrekturVorschlagEinheitStromSpeicherRequest;

pub type SetKorrekturVorschlagEinheitStromSpeicherResponse = messages::SetKorrekturVorschlagEinheitStromSpeicherResponse;

pub type GetKorrekturVorschlagEinheitWindRequest = messages::GetKorrekturVorschlagEinheitWindRequest;

pub type GetKorrekturVorschlagEinheitWindResponse = messages::GetKorrekturVorschlagEinheitWindResponse;

pub type GetKorrekturVorschlagEinheitAnlagenbetreiberRequest = messages::GetKorrekturVorschlagEinheitAnlagenbetreiberRequest;

pub type GetKorrekturVorschlagEinheitAnlagenbetreiberResponse = messages::GetKorrekturVorschlagEinheitAnlagenbetreiberResponse;

pub type GetKorrekturVorschlagEinheitSolarRequest = messages::GetKorrekturVorschlagEinheitSolarRequest;

pub type GetKorrekturVorschlagEinheitSolarResponse = messages::GetKorrekturVorschlagEinheitSolarResponse;

pub type GetKorrekturVorschlagEinheitBiomasseRequest = messages::GetKorrekturVorschlagEinheitBiomasseRequest;

pub type GetKorrekturVorschlagEinheitBiomasseResponse = messages::GetKorrekturVorschlagEinheitBiomasseResponse;

pub type GetKorrekturVorschlagEinheitWasserRequest = messages::GetKorrekturVorschlagEinheitWasserRequest;

pub type GetKorrekturVorschlagEinheitWasserResponse = messages::GetKorrekturVorschlagEinheitWasserResponse;

pub type GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest = messages::GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest;

pub type GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse = messages::GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse;

pub type GetKorrekturVorschlagEinheitVerbrennungRequest = messages::GetKorrekturVorschlagEinheitVerbrennungRequest;

pub type GetKorrekturVorschlagEinheitVerbrennungResponse = messages::GetKorrekturVorschlagEinheitVerbrennungResponse;

pub type GetKorrekturVorschlagEinheitGasSpeicherRequest = messages::GetKorrekturVorschlagEinheitGasSpeicherRequest;

pub type GetKorrekturVorschlagEinheitGasSpeicherResponse = messages::GetKorrekturVorschlagEinheitGasSpeicherResponse;

pub type GetKorrekturVorschlagEinheitStromVerbraucherRequest = messages::GetKorrekturVorschlagEinheitStromVerbraucherRequest;

pub type GetKorrekturVorschlagEinheitStromVerbraucherResponse = messages::GetKorrekturVorschlagEinheitStromVerbraucherResponse;

pub type GetKorrekturVorschlagEinheitGasErzeugerRequest = messages::GetKorrekturVorschlagEinheitGasErzeugerRequest;

pub type GetKorrekturVorschlagEinheitGasErzeugerResponse = messages::GetKorrekturVorschlagEinheitGasErzeugerResponse;

pub type GetKorrekturVorschlagEinheitGasVerbraucherRequest = messages::GetKorrekturVorschlagEinheitGasVerbraucherRequest;

pub type GetKorrekturVorschlagEinheitGasVerbraucherResponse = messages::GetKorrekturVorschlagEinheitGasVerbraucherResponse;

pub type GetKorrekturVorschlagEinheitStromSpeicherRequest = messages::GetKorrekturVorschlagEinheitStromSpeicherRequest;

pub type GetKorrekturVorschlagEinheitStromSpeicherResponse = messages::GetKorrekturVorschlagEinheitStromSpeicherResponse;

pub type DeleteKorrekturvorschlagRequest = messages::DeleteKorrekturvorschlagRequest;

pub type DeleteKorrekturvorschlagResponse = messages::DeleteKorrekturvorschlagResponse;

#[async_trait]
pub trait Netzbetreiberpruefung {
	async fn get_liste_meine_netzbetreiberpruefungen (&self, get_liste_meine_netzbetreiberpruefungen_request: GetListeMeineNetzbetreiberpruefungenRequest) -> Result<GetListeMeineNetzbetreiberpruefungenResponse,Option<SoapFault>>;
	async fn erneute_netzbetreiberpruefung_starten (&self, erneute_netzbetreiberpruefung_starten_request: ErneuteNetzbetreiberpruefungStartenRequest) -> Result<ErneuteNetzbetreiberpruefungStartenResponse,Option<SoapFault>>;
	async fn verschiebe_einheit_zu_anderer_lokation (&self, verschiebe_einheit_zu_anderer_lokation_request: VerschiebeEinheitZuAndererLokationRequest) -> Result<VerschiebeEinheitZuAndererLokationResponse,Option<SoapFault>>;
	async fn verschiebe_einheit_zu_neuer_lokation (&self, verschiebe_einheit_zu_neuer_lokation_request: VerschiebeEinheitZuNeuerLokationRequest) -> Result<VerschiebeEinheitZuNeuerLokationResponse,Option<SoapFault>>;
	async fn set_netzbetreiberpruefung_abgeschlossen (&self, set_netzbetreiberpruefung_abgeschlossen_request: SetNetzbetreiberpruefungAbgeschlossenRequest) -> Result<SetNetzbetreiberpruefungAbgeschlossenResponse,Option<SoapFault>>;
	async fn set_datenkorrektur_erforderlich (&self, set_datenkorrektur_erforderlich_request: SetDatenkorrekturErforderlichRequest) -> Result<SetDatenkorrekturErforderlichResponse,Option<SoapFault>>;
	async fn set_netzbetreiber_nicht_zustaendig (&self, set_netzbetreiber_nicht_zustaendig_request: SetNetzbetreiberNichtZustaendigRequest) -> Result<SetNetzbetreiberNichtZustaendigResponse,Option<SoapFault>>;
	async fn set_klaerung_erforderlich (&self, set_klaerung_erforderlich_request: SetKlaerungErforderlichRequest) -> Result<SetKlaerungErforderlichResponse,Option<SoapFault>>;
	async fn set_korrektur_betriebsstatus (&self, set_korrektur_betriebsstatus_request: SetKorrekturBetriebsstatusRequest) -> Result<SetKorrekturBetriebsstatusResponse,Option<SoapFault>>;
	async fn get_korrektur_vorschlag_betriebsstatus (&self, get_korrektur_vorschlag_betriebsstatus_request: GetKorrekturVorschlagBetriebsstatusRequest) -> Result<GetKorrekturVorschlagBetriebsstatusResponse,Option<SoapFault>>;
	async fn get_wiedervorlage_vorschlag_betriebsstatus (&self, get_wiedervorlage_vorschlag_betriebsstatus_request: GetWiedervorlageVorschlagBetriebsstatusRequest) -> Result<GetWiedervorlageVorschlagBetriebsstatusResponse,Option<SoapFault>>;
	async fn set_korrektur_betriebsstatus_abgeschlossen (&self, set_korrektur_betriebsstatus_abgeschlossen_request: SetKorrekturBetriebsstatusAbgeschlossenRequest) -> Result<SetKorrekturBetriebsstatusAbgeschlossenResponse,Option<SoapFault>>;
	async fn set_eeg_anlagenschluessel (&self, set_eeg_anlagenschluessel_request: SetEegAnlagenschluesselRequest) -> Result<SetEegAnlagenschluesselResponse,Option<SoapFault>>;
	async fn set_stilllegung_abgelehnt (&self, set_stilllegung_abgelehnt_request: SetStilllegungAbgelehntRequest) -> Result<SetStilllegungAbgelehntResponse,Option<SoapFault>>;
	async fn set_antrag_auf_fristverlaengerung (&self, set_antrag_auf_fristverlaengerung_request: SetAntragAufFristverlaengerungRequest) -> Result<SetAntragAufFristverlaengerungResponse,Option<SoapFault>>;
	async fn ruecknahme_fristverlaengerung (&self, ruecknahme_fristverlaengerung_request: RuecknahmeFristverlaengerungRequest) -> Result<RuecknahmeFristverlaengerungResponse,Option<SoapFault>>;
	async fn set_korrektur_vorschlag_einheit_wind (&self, set_korrektur_vorschlag_einheit_wind_request: SetKorrekturVorschlagEinheitWindRequest) -> Result<SetKorrekturVorschlagEinheitWindResponse,Option<SoapFault>>;
	async fn set_korrektur_vorschlag_einheit_anlagenbetreiber (&self, set_korrektur_vorschlag_einheit_anlagenbetreiber_request: SetKorrekturVorschlagEinheitAnlagenbetreiberRequest) -> Result<SetKorrekturVorschlagEinheitAnlagenbetreiberResponse,Option<SoapFault>>;
	async fn set_korrektur_vorschlag_einheit_solar (&self, set_korrektur_vorschlag_einheit_solar_request: SetKorrekturVorschlagEinheitSolarRequest) -> Result<SetKorrekturVorschlagEinheitSolarResponse,Option<SoapFault>>;
	async fn set_korrektur_vorschlag_einheit_biomasse (&self, set_korrektur_vorschlag_einheit_biomasse_request: SetKorrekturVorschlagEinheitBiomasseRequest) -> Result<SetKorrekturVorschlagEinheitBiomasseResponse,Option<SoapFault>>;
	async fn set_korrektur_vorschlag_einheit_wasser (&self, set_korrektur_vorschlag_einheit_wasser_request: SetKorrekturVorschlagEinheitWasserRequest) -> Result<SetKorrekturVorschlagEinheitWasserResponse,Option<SoapFault>>;
	async fn set_korrektur_vorschlag_einheit_geothermie_grubengas_druckentspannung (&self, set_korrektur_vorschlag_einheit_geothermie_grubengas_druckentspannung_request: SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest) -> Result<SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse,Option<SoapFault>>;
	async fn set_korrektur_vorschlag_einheit_verbrennung (&self, set_korrektur_vorschlag_einheit_verbrennung_request: SetKorrekturVorschlagEinheitVerbrennungRequest) -> Result<SetKorrekturVorschlagEinheitVerbrennungResponse,Option<SoapFault>>;
	async fn set_korrektur_vorschlag_einheit_gas_speicher (&self, set_korrektur_vorschlag_einheit_gas_speicher_request: SetKorrekturVorschlagEinheitGasSpeicherRequest) -> Result<SetKorrekturVorschlagEinheitGasSpeicherResponse,Option<SoapFault>>;
	async fn set_korrektur_vorschlag_einheit_strom_verbraucher (&self, set_korrektur_vorschlag_einheit_strom_verbraucher_request: SetKorrekturVorschlagEinheitStromVerbraucherRequest) -> Result<SetKorrekturVorschlagEinheitStromVerbraucherResponse,Option<SoapFault>>;
	async fn set_korrektur_vorschlag_einheit_gas_erzeuger (&self, set_korrektur_vorschlag_einheit_gas_erzeuger_request: SetKorrekturVorschlagEinheitGasErzeugerRequest) -> Result<SetKorrekturVorschlagEinheitGasErzeugerResponse,Option<SoapFault>>;
	async fn set_korrektur_vorschlag_einheit_gas_verbraucher (&self, set_korrektur_vorschlag_einheit_gas_verbraucher_request: SetKorrekturVorschlagEinheitGasVerbraucherRequest) -> Result<SetKorrekturVorschlagEinheitGasVerbraucherResponse,Option<SoapFault>>;
	async fn set_korrektur_vorschlag_einheit_strom_speicher (&self, set_korrektur_vorschlag_einheit_strom_speicher_request: SetKorrekturVorschlagEinheitStromSpeicherRequest) -> Result<SetKorrekturVorschlagEinheitStromSpeicherResponse,Option<SoapFault>>;
	async fn get_korrektur_vorschlag_einheit_wind (&self, get_korrektur_vorschlag_einheit_wind_request: GetKorrekturVorschlagEinheitWindRequest) -> Result<GetKorrekturVorschlagEinheitWindResponse,Option<SoapFault>>;
	async fn get_korrektur_vorschlag_einheit_anlagenbetreiber (&self, get_korrektur_vorschlag_einheit_anlagenbetreiber_request: GetKorrekturVorschlagEinheitAnlagenbetreiberRequest) -> Result<GetKorrekturVorschlagEinheitAnlagenbetreiberResponse,Option<SoapFault>>;
	async fn get_korrektur_vorschlag_einheit_solar (&self, get_korrektur_vorschlag_einheit_solar_request: GetKorrekturVorschlagEinheitSolarRequest) -> Result<GetKorrekturVorschlagEinheitSolarResponse,Option<SoapFault>>;
	async fn get_korrektur_vorschlag_einheit_biomasse (&self, get_korrektur_vorschlag_einheit_biomasse_request: GetKorrekturVorschlagEinheitBiomasseRequest) -> Result<GetKorrekturVorschlagEinheitBiomasseResponse,Option<SoapFault>>;
	async fn get_korrektur_vorschlag_einheit_wasser (&self, get_korrektur_vorschlag_einheit_wasser_request: GetKorrekturVorschlagEinheitWasserRequest) -> Result<GetKorrekturVorschlagEinheitWasserResponse,Option<SoapFault>>;
	async fn get_korrektur_vorschlag_einheit_geothermie_grubengas_druckentspannung (&self, get_korrektur_vorschlag_einheit_geothermie_grubengas_druckentspannung_request: GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest) -> Result<GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse,Option<SoapFault>>;
	async fn get_korrektur_vorschlag_einheit_verbrennung (&self, get_korrektur_vorschlag_einheit_verbrennung_request: GetKorrekturVorschlagEinheitVerbrennungRequest) -> Result<GetKorrekturVorschlagEinheitVerbrennungResponse,Option<SoapFault>>;
	async fn get_korrektur_vorschlag_einheit_gas_speicher (&self, get_korrektur_vorschlag_einheit_gas_speicher_request: GetKorrekturVorschlagEinheitGasSpeicherRequest) -> Result<GetKorrekturVorschlagEinheitGasSpeicherResponse,Option<SoapFault>>;
	async fn get_korrektur_vorschlag_einheit_strom_verbraucher (&self, get_korrektur_vorschlag_einheit_strom_verbraucher_request: GetKorrekturVorschlagEinheitStromVerbraucherRequest) -> Result<GetKorrekturVorschlagEinheitStromVerbraucherResponse,Option<SoapFault>>;
	async fn get_korrektur_vorschlag_einheit_gas_erzeuger (&self, get_korrektur_vorschlag_einheit_gas_erzeuger_request: GetKorrekturVorschlagEinheitGasErzeugerRequest) -> Result<GetKorrekturVorschlagEinheitGasErzeugerResponse,Option<SoapFault>>;
	async fn get_korrektur_vorschlag_einheit_gas_verbraucher (&self, get_korrektur_vorschlag_einheit_gas_verbraucher_request: GetKorrekturVorschlagEinheitGasVerbraucherRequest) -> Result<GetKorrekturVorschlagEinheitGasVerbraucherResponse,Option<SoapFault>>;
	async fn get_korrektur_vorschlag_einheit_strom_speicher (&self, get_korrektur_vorschlag_einheit_strom_speicher_request: GetKorrekturVorschlagEinheitStromSpeicherRequest) -> Result<GetKorrekturVorschlagEinheitStromSpeicherResponse,Option<SoapFault>>;
	async fn delete_korrekturvorschlag (&self, delete_korrekturvorschlag_request: DeleteKorrekturvorschlagRequest) -> Result<DeleteKorrekturvorschlagResponse,Option<SoapFault>>;
}
pub type SetNetzanschlusspunktStromErzeugerRequest = messages::SetNetzanschlusspunktStromErzeugerRequest;

pub type SetNetzanschlusspunktStromErzeugerResponse = messages::SetNetzanschlusspunktStromErzeugerResponse;

pub type SetNetzanschlusspunktStromVerbraucherRequest = messages::SetNetzanschlusspunktStromVerbraucherRequest;

pub type SetNetzanschlusspunktStromVerbraucherResponse = messages::SetNetzanschlusspunktStromVerbraucherResponse;

pub type SetNetzanschlusspunktGasErzeugerRequest = messages::SetNetzanschlusspunktGasErzeugerRequest;

pub type SetNetzanschlusspunktGasErzeugerResponse = messages::SetNetzanschlusspunktGasErzeugerResponse;

pub type SetNetzanschlusspunktGasVerbraucherRequest = messages::SetNetzanschlusspunktGasVerbraucherRequest;

pub type SetNetzanschlusspunktGasVerbraucherResponse = messages::SetNetzanschlusspunktGasVerbraucherResponse;

pub type DeleteNetzanschlusspunktRequest = messages::DeleteNetzanschlusspunktRequest;

pub type DeleteNetzanschlusspunktResponse = messages::DeleteNetzanschlusspunktResponse;

pub type GetListeMeineNetzanschlusspunkteRequest = messages::GetListeMeineNetzanschlusspunkteRequest;

pub type GetListeMeineNetzanschlusspunkteResponse = messages::GetListeMeineNetzanschlusspunkteResponse;

pub type GetListeAlleNetzanschlusspunkteRequest = messages::GetListeAlleNetzanschlusspunkteRequest;

pub type GetListeAlleNetzanschlusspunkteResponse = messages::GetListeAlleNetzanschlusspunkteResponse;

#[async_trait]
pub trait Netzanschlusspunkt {
	async fn set_netzanschlusspunkt_strom_erzeuger (&self, set_netzanschlusspunkt_strom_erzeuger_request: SetNetzanschlusspunktStromErzeugerRequest) -> Result<SetNetzanschlusspunktStromErzeugerResponse,Option<SoapFault>>;
	async fn set_netzanschlusspunkt_strom_verbraucher (&self, set_netzanschlusspunkt_strom_verbraucher_request: SetNetzanschlusspunktStromVerbraucherRequest) -> Result<SetNetzanschlusspunktStromVerbraucherResponse,Option<SoapFault>>;
	async fn set_netzanschlusspunkt_gas_erzeuger (&self, set_netzanschlusspunkt_gas_erzeuger_request: SetNetzanschlusspunktGasErzeugerRequest) -> Result<SetNetzanschlusspunktGasErzeugerResponse,Option<SoapFault>>;
	async fn set_netzanschlusspunkt_gas_verbraucher (&self, set_netzanschlusspunkt_gas_verbraucher_request: SetNetzanschlusspunktGasVerbraucherRequest) -> Result<SetNetzanschlusspunktGasVerbraucherResponse,Option<SoapFault>>;
	async fn delete_netzanschlusspunkt (&self, delete_netzanschlusspunkt_request: DeleteNetzanschlusspunktRequest) -> Result<DeleteNetzanschlusspunktResponse,Option<SoapFault>>;
	async fn get_liste_meine_netzanschlusspunkte (&self, get_liste_meine_netzanschlusspunkte_request: GetListeMeineNetzanschlusspunkteRequest) -> Result<GetListeMeineNetzanschlusspunkteResponse,Option<SoapFault>>;
	async fn get_liste_alle_netzanschlusspunkte (&self, get_liste_alle_netzanschlusspunkte_request: GetListeAlleNetzanschlusspunkteRequest) -> Result<GetListeAlleNetzanschlusspunkteResponse,Option<SoapFault>>;
}
pub type SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberRequest = messages::SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberRequest;

pub type SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberResponse = messages::SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberResponse;

pub type SetMastrqsKorrekturVorschlagEinheitWindRequest = messages::SetMastrqsKorrekturVorschlagEinheitWindRequest;

pub type SetMastrqsKorrekturVorschlagEinheitWindResponse = messages::SetMastrqsKorrekturVorschlagEinheitWindResponse;

pub type SetMastrqsKorrekturVorschlagEinheitSolarRequest = messages::SetMastrqsKorrekturVorschlagEinheitSolarRequest;

pub type SetMastrqsKorrekturVorschlagEinheitSolarResponse = messages::SetMastrqsKorrekturVorschlagEinheitSolarResponse;

pub type SetMastrqsKorrekturVorschlagEinheitBiomasseRequest = messages::SetMastrqsKorrekturVorschlagEinheitBiomasseRequest;

pub type SetMastrqsKorrekturVorschlagEinheitBiomasseResponse = messages::SetMastrqsKorrekturVorschlagEinheitBiomasseResponse;

pub type SetMastrqsKorrekturVorschlagEinheitWasserRequest = messages::SetMastrqsKorrekturVorschlagEinheitWasserRequest;

pub type SetMastrqsKorrekturVorschlagEinheitWasserResponse = messages::SetMastrqsKorrekturVorschlagEinheitWasserResponse;

pub type SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest = messages::SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest;

pub type SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse = messages::SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse;

pub type SetMastrqsKorrekturVorschlagEinheitVerbrennungRequest = messages::SetMastrqsKorrekturVorschlagEinheitVerbrennungRequest;

pub type SetMastrqsKorrekturVorschlagEinheitVerbrennungResponse = messages::SetMastrqsKorrekturVorschlagEinheitVerbrennungResponse;

pub type SetMastrqsKorrekturVorschlagEinheitGasSpeicherRequest = messages::SetMastrqsKorrekturVorschlagEinheitGasSpeicherRequest;

pub type SetMastrqsKorrekturVorschlagEinheitGasSpeicherResponse = messages::SetMastrqsKorrekturVorschlagEinheitGasSpeicherResponse;

pub type SetMastrqsKorrekturVorschlagEinheitStromVerbraucherRequest = messages::SetMastrqsKorrekturVorschlagEinheitStromVerbraucherRequest;

pub type SetMastrqsKorrekturVorschlagEinheitStromVerbraucherResponse = messages::SetMastrqsKorrekturVorschlagEinheitStromVerbraucherResponse;

pub type SetMastrqsKorrekturVorschlagEinheitGasErzeugerRequest = messages::SetMastrqsKorrekturVorschlagEinheitGasErzeugerRequest;

pub type SetMastrqsKorrekturVorschlagEinheitGasErzeugerResponse = messages::SetMastrqsKorrekturVorschlagEinheitGasErzeugerResponse;

pub type SetMastrqsKorrekturVorschlagEinheitGasVerbraucherRequest = messages::SetMastrqsKorrekturVorschlagEinheitGasVerbraucherRequest;

pub type SetMastrqsKorrekturVorschlagEinheitGasVerbraucherResponse = messages::SetMastrqsKorrekturVorschlagEinheitGasVerbraucherResponse;

pub type SetMastrqsKorrekturVorschlagEinheitStromSpeicherRequest = messages::SetMastrqsKorrekturVorschlagEinheitStromSpeicherRequest;

pub type SetMastrqsKorrekturVorschlagEinheitStromSpeicherResponse = messages::SetMastrqsKorrekturVorschlagEinheitStromSpeicherResponse;

pub type MastrqsTicketBearbeiterZuweisenRequest = messages::MastrqsTicketBearbeiterZuweisenRequest;

pub type MastrqsTicketBearbeiterZuweisenResponse = messages::MastrqsTicketBearbeiterZuweisenResponse;

pub type MastrqsStichwoerterAendernRequest = messages::MastrqsStichwoerterAendernRequest;

pub type MastrqsStichwoerterAendernResponse = messages::MastrqsStichwoerterAendernResponse;

pub type MastrqsKorrekturvorschlagStornierenRequest = messages::MastrqsKorrekturvorschlagStornierenRequest;

pub type MastrqsKorrekturvorschlagStornierenResponse = messages::MastrqsKorrekturvorschlagStornierenResponse;

pub type GetKorrekturVorschlagRequest = messages::GetKorrekturVorschlagRequest;

pub type GetKorrekturVorschlagResponse = messages::GetKorrekturVorschlagResponse;

#[async_trait]
pub trait Mastrqs {
	async fn set_mastrqs_korrektur_vorschlag_einheit_anlagenbetreiber (&self, set_mastrqs_korrektur_vorschlag_einheit_anlagenbetreiber_request: SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberRequest) -> Result<SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberResponse,Option<SoapFault>>;
	async fn set_mastrqs_korrektur_vorschlag_einheit_wind (&self, set_mastrqs_korrektur_vorschlag_einheit_wind_request: SetMastrqsKorrekturVorschlagEinheitWindRequest) -> Result<SetMastrqsKorrekturVorschlagEinheitWindResponse,Option<SoapFault>>;
	async fn set_mastrqs_korrektur_vorschlag_einheit_solar (&self, set_mastrqs_korrektur_vorschlag_einheit_solar_request: SetMastrqsKorrekturVorschlagEinheitSolarRequest) -> Result<SetMastrqsKorrekturVorschlagEinheitSolarResponse,Option<SoapFault>>;
	async fn set_mastrqs_korrektur_vorschlag_einheit_biomasse (&self, set_mastrqs_korrektur_vorschlag_einheit_biomasse_request: SetMastrqsKorrekturVorschlagEinheitBiomasseRequest) -> Result<SetMastrqsKorrekturVorschlagEinheitBiomasseResponse,Option<SoapFault>>;
	async fn set_mastrqs_korrektur_vorschlag_einheit_wasser (&self, set_mastrqs_korrektur_vorschlag_einheit_wasser_request: SetMastrqsKorrekturVorschlagEinheitWasserRequest) -> Result<SetMastrqsKorrekturVorschlagEinheitWasserResponse,Option<SoapFault>>;
	async fn set_mastrqs_korrektur_vorschlag_einheit_geothermie_grubengas_druckentspannung (&self, set_mastrqs_korrektur_vorschlag_einheit_geothermie_grubengas_druckentspannung_request: SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest) -> Result<SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse,Option<SoapFault>>;
	async fn set_mastrqs_korrektur_vorschlag_einheit_verbrennung (&self, set_mastrqs_korrektur_vorschlag_einheit_verbrennung_request: SetMastrqsKorrekturVorschlagEinheitVerbrennungRequest) -> Result<SetMastrqsKorrekturVorschlagEinheitVerbrennungResponse,Option<SoapFault>>;
	async fn set_mastrqs_korrektur_vorschlag_einheit_gas_speicher (&self, set_mastrqs_korrektur_vorschlag_einheit_gas_speicher_request: SetMastrqsKorrekturVorschlagEinheitGasSpeicherRequest) -> Result<SetMastrqsKorrekturVorschlagEinheitGasSpeicherResponse,Option<SoapFault>>;
	async fn set_mastrqs_korrektur_vorschlag_einheit_strom_verbraucher (&self, set_mastrqs_korrektur_vorschlag_einheit_strom_verbraucher_request: SetMastrqsKorrekturVorschlagEinheitStromVerbraucherRequest) -> Result<SetMastrqsKorrekturVorschlagEinheitStromVerbraucherResponse,Option<SoapFault>>;
	async fn set_mastrqs_korrektur_vorschlag_einheit_gas_erzeuger (&self, set_mastrqs_korrektur_vorschlag_einheit_gas_erzeuger_request: SetMastrqsKorrekturVorschlagEinheitGasErzeugerRequest) -> Result<SetMastrqsKorrekturVorschlagEinheitGasErzeugerResponse,Option<SoapFault>>;
	async fn set_mastrqs_korrektur_vorschlag_einheit_gas_verbraucher (&self, set_mastrqs_korrektur_vorschlag_einheit_gas_verbraucher_request: SetMastrqsKorrekturVorschlagEinheitGasVerbraucherRequest) -> Result<SetMastrqsKorrekturVorschlagEinheitGasVerbraucherResponse,Option<SoapFault>>;
	async fn set_mastrqs_korrektur_vorschlag_einheit_strom_speicher (&self, set_mastrqs_korrektur_vorschlag_einheit_strom_speicher_request: SetMastrqsKorrekturVorschlagEinheitStromSpeicherRequest) -> Result<SetMastrqsKorrekturVorschlagEinheitStromSpeicherResponse,Option<SoapFault>>;
	async fn mastrqs_ticket_bearbeiter_zuweisen (&self, mastrqs_ticket_bearbeiter_zuweisen_request: MastrqsTicketBearbeiterZuweisenRequest) -> Result<MastrqsTicketBearbeiterZuweisenResponse,Option<SoapFault>>;
	async fn mastrqs_stichwoerter_aendern (&self, mastrqs_stichwoerter_aendern_request: MastrqsStichwoerterAendernRequest) -> Result<MastrqsStichwoerterAendernResponse,Option<SoapFault>>;
	async fn mastrqs_korrekturvorschlag_stornieren (&self, mastrqs_korrekturvorschlag_stornieren_request: MastrqsKorrekturvorschlagStornierenRequest) -> Result<MastrqsKorrekturvorschlagStornierenResponse,Option<SoapFault>>;
	async fn get_korrektur_vorschlag (&self, get_korrektur_vorschlag_request: GetKorrekturVorschlagRequest) -> Result<GetKorrekturVorschlagResponse,Option<SoapFault>>;
}
}

pub mod bindings {
use yaserde::{YaSerialize, YaDeserialize};
            use yaserde::de::from_str;
            use async_trait::async_trait;
            use yaserde::ser::to_string;
            use super::*;
            
            impl Allgemein {
                async fn send_soap_request<T: YaSerialize>(&self, request: &T, action: &str) -> SoapResponse {
                    let body = to_string(request).expect("failed to generate xml");
                    debug!("SOAP Request: {}", body);
                    let mut req = self
                        .client
                        .post(&self.url)
                        .body(body)
                        .header("Content-Type", "text/xml")
                        .header("Soapaction", action);
                    if let Some(credentials) = &self.credentials {
                        req = req.basic_auth(
                            credentials.0.to_string(),
                            Option::Some(credentials.1.to_string()),
                        );
                    }
                    let res = req.send().await?;
                    let status = res.status();
                    debug!("SOAP Status: {}", status);
                    let txt = res.text().await.unwrap_or_default();
                    debug!("SOAP Response: {}", txt);
                    Ok((status, txt))
                }
            }
            #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetLokaleUhrzeitRequest {
                        #[yaserde(rename = "GetLokaleUhrzeit", default)]
                        pub body: ports::GetLokaleUhrzeitRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetLokaleUhrzeitRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetLokaleUhrzeitRequest,
        }
        
        impl GetLokaleUhrzeitRequestSoapEnvelope {
            pub fn new(body: SoapGetLokaleUhrzeitRequest) -> Self {
                GetLokaleUhrzeitRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetLokaleUhrzeitResponse {
                    #[yaserde(rename = "GetLokaleUhrzeitResponse", default)]
                    pub body: ports::GetLokaleUhrzeitResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetLokaleUhrzeitResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetLokaleUhrzeitResponse,
        }
        
        impl GetLokaleUhrzeitResponseSoapEnvelope {
            pub fn new(body: SoapGetLokaleUhrzeitResponse) -> Self {
                GetLokaleUhrzeitResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetLokaleUhrzeitMitAuthentifizierungRequest {
                        #[yaserde(rename = "GetLokaleUhrzeitMitAuthentifizierung", default)]
                        pub body: ports::GetLokaleUhrzeitMitAuthentifizierungRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetLokaleUhrzeitMitAuthentifizierungRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetLokaleUhrzeitMitAuthentifizierungRequest,
        }
        
        impl GetLokaleUhrzeitMitAuthentifizierungRequestSoapEnvelope {
            pub fn new(body: SoapGetLokaleUhrzeitMitAuthentifizierungRequest) -> Self {
                GetLokaleUhrzeitMitAuthentifizierungRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetLokaleUhrzeitMitAuthentifizierungResponse {
                    #[yaserde(rename = "GetLokaleUhrzeitMitAuthentifizierungResponse", default)]
                    pub body: ports::GetLokaleUhrzeitMitAuthentifizierungResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetLokaleUhrzeitMitAuthentifizierungResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetLokaleUhrzeitMitAuthentifizierungResponse,
        }
        
        impl GetLokaleUhrzeitMitAuthentifizierungResponseSoapEnvelope {
            pub fn new(body: SoapGetLokaleUhrzeitMitAuthentifizierungResponse) -> Self {
                GetLokaleUhrzeitMitAuthentifizierungResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeKatalogkategorienRequest {
                        #[yaserde(rename = "GetListeKatalogkategorien", default)]
                        pub body: ports::GetListeKatalogkategorienRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeKatalogkategorienRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeKatalogkategorienRequest,
        }
        
        impl GetListeKatalogkategorienRequestSoapEnvelope {
            pub fn new(body: SoapGetListeKatalogkategorienRequest) -> Self {
                GetListeKatalogkategorienRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeKatalogkategorienResponse {
                    #[yaserde(rename = "GetListeKatalogkategorienResponse", default)]
                    pub body: ports::GetListeKatalogkategorienResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeKatalogkategorienResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeKatalogkategorienResponse,
        }
        
        impl GetListeKatalogkategorienResponseSoapEnvelope {
            pub fn new(body: SoapGetListeKatalogkategorienResponse) -> Self {
                GetListeKatalogkategorienResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKatalogwerteRequest {
                        #[yaserde(rename = "GetKatalogwerte", default)]
                        pub body: ports::GetKatalogwerteRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKatalogwerteRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKatalogwerteRequest,
        }
        
        impl GetKatalogwerteRequestSoapEnvelope {
            pub fn new(body: SoapGetKatalogwerteRequest) -> Self {
                GetKatalogwerteRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKatalogwerteResponse {
                    #[yaserde(rename = "GetKatalogwerteResponse", default)]
                    pub body: ports::GetKatalogwerteResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKatalogwerteResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKatalogwerteResponse,
        }
        
        impl GetKatalogwerteResponseSoapEnvelope {
            pub fn new(body: SoapGetKatalogwerteResponse) -> Self {
                GetKatalogwerteResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetBilanzierungsgebieteRequest {
                        #[yaserde(rename = "GetBilanzierungsgebiete", default)]
                        pub body: ports::GetBilanzierungsgebieteRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetBilanzierungsgebieteRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetBilanzierungsgebieteRequest,
        }
        
        impl GetBilanzierungsgebieteRequestSoapEnvelope {
            pub fn new(body: SoapGetBilanzierungsgebieteRequest) -> Self {
                GetBilanzierungsgebieteRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetBilanzierungsgebieteResponse {
                    #[yaserde(rename = "GetBilanzierungsgebieteResponse", default)]
                    pub body: ports::GetBilanzierungsgebieteResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetBilanzierungsgebieteResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetBilanzierungsgebieteResponse,
        }
        
        impl GetBilanzierungsgebieteResponseSoapEnvelope {
            pub fn new(body: SoapGetBilanzierungsgebieteResponse) -> Self {
                GetBilanzierungsgebieteResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetAktuellerStandTageskontingentRequest {
                        #[yaserde(rename = "GetAktuellerStandTageskontingent", default)]
                        pub body: ports::GetAktuellerStandTageskontingentRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetAktuellerStandTageskontingentRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetAktuellerStandTageskontingentRequest,
        }
        
        impl GetAktuellerStandTageskontingentRequestSoapEnvelope {
            pub fn new(body: SoapGetAktuellerStandTageskontingentRequest) -> Self {
                GetAktuellerStandTageskontingentRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetAktuellerStandTageskontingentResponse {
                    #[yaserde(rename = "GetAktuellerStandTageskontingentResponse", default)]
                    pub body: ports::GetAktuellerStandTageskontingentResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetAktuellerStandTageskontingentResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetAktuellerStandTageskontingentResponse,
        }
        
        impl GetAktuellerStandTageskontingentResponseSoapEnvelope {
            pub fn new(body: SoapGetAktuellerStandTageskontingentResponse) -> Self {
                GetAktuellerStandTageskontingentResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                impl Default for Allgemein {
                fn default() -> Self {
                    Allgemein {
                        client: reqwest::Client::new(),
                        url: "https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string(),
                        credentials: Option::None,
                     }
                }
            }
            impl Allgemein {
                pub fn new(url: &str, credentials: Option<(String,String)>) -> Self {
                    Allgemein {
                        client: reqwest::Client::new(),
                        url: url.to_string(),
                        credentials,
                    }
                }
        }
        pub struct Allgemein {
                client: reqwest::Client,
                url: String,
                credentials: Option<(String,String)>
                }
                #[async_trait]
	impl ports::AllgemeineFunktionen for Allgemein {
	async fn get_lokale_uhrzeit (&self, get_lokale_uhrzeit_request: ports::GetLokaleUhrzeitRequest) -> Result<ports::GetLokaleUhrzeitResponse, Option<SoapFault>> {

        let __request = GetLokaleUhrzeitRequestSoapEnvelope::new(SoapGetLokaleUhrzeitRequest {
            body: get_lokale_uhrzeit_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetLokaleUhrzeit")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetLokaleUhrzeitResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_lokale_uhrzeit_mit_authentifizierung (&self, get_lokale_uhrzeit_mit_authentifizierung_request: ports::GetLokaleUhrzeitMitAuthentifizierungRequest) -> Result<ports::GetLokaleUhrzeitMitAuthentifizierungResponse, Option<SoapFault>> {

        let __request = GetLokaleUhrzeitMitAuthentifizierungRequestSoapEnvelope::new(SoapGetLokaleUhrzeitMitAuthentifizierungRequest {
            body: get_lokale_uhrzeit_mit_authentifizierung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetLokaleUhrzeitMitAuthentifizierung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetLokaleUhrzeitMitAuthentifizierungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_liste_katalogkategorien (&self, get_liste_katalogkategorien_request: ports::GetListeKatalogkategorienRequest) -> Result<ports::GetListeKatalogkategorienResponse, Option<SoapFault>> {

        let __request = GetListeKatalogkategorienRequestSoapEnvelope::new(SoapGetListeKatalogkategorienRequest {
            body: get_liste_katalogkategorien_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeKatalogkategorien")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeKatalogkategorienResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_katalogwerte (&self, get_katalogwerte_request: ports::GetKatalogwerteRequest) -> Result<ports::GetKatalogwerteResponse, Option<SoapFault>> {

        let __request = GetKatalogwerteRequestSoapEnvelope::new(SoapGetKatalogwerteRequest {
            body: get_katalogwerte_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKatalogwerte")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKatalogwerteResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_bilanzierungsgebiete (&self, get_bilanzierungsgebiete_request: ports::GetBilanzierungsgebieteRequest) -> Result<ports::GetBilanzierungsgebieteResponse, Option<SoapFault>> {

        let __request = GetBilanzierungsgebieteRequestSoapEnvelope::new(SoapGetBilanzierungsgebieteRequest {
            body: get_bilanzierungsgebiete_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetBilanzierungsgebiete")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetBilanzierungsgebieteResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_aktueller_stand_tageskontingent (&self, get_aktueller_stand_tageskontingent_request: ports::GetAktuellerStandTageskontingentRequest) -> Result<ports::GetAktuellerStandTageskontingentResponse, Option<SoapFault>> {

        let __request = GetAktuellerStandTageskontingentRequestSoapEnvelope::new(SoapGetAktuellerStandTageskontingentRequest {
            body: get_aktueller_stand_tageskontingent_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetAktuellerStandTageskontingent")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetAktuellerStandTageskontingentResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}}

            impl Allgemein12 {
                async fn send_soap_request<T: YaSerialize>(&self, request: &T, action: &str) -> SoapResponse {
                    let body = to_string(request).expect("failed to generate xml");
                    debug!("SOAP Request: {}", body);
                    let mut req = self
                        .client
                        .post(&self.url)
                        .body(body)
                        .header("Content-Type", "text/xml")
                        .header("Soapaction", action);
                    if let Some(credentials) = &self.credentials {
                        req = req.basic_auth(
                            credentials.0.to_string(),
                            Option::Some(credentials.1.to_string()),
                        );
                    }
                    let res = req.send().await?;
                    let status = res.status();
                    debug!("SOAP Status: {}", status);
                    let txt = res.text().await.unwrap_or_default();
                    debug!("SOAP Response: {}", txt);
                    Ok((status, txt))
                }
            }
            impl Default for Allgemein12 {
                fn default() -> Self {
                    Allgemein12 {
                        client: reqwest::Client::new(),
                        url: "https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string(),
                        credentials: Option::None,
                     }
                }
            }
            impl Allgemein12 {
                pub fn new(url: &str, credentials: Option<(String,String)>) -> Self {
                    Allgemein12 {
                        client: reqwest::Client::new(),
                        url: url.to_string(),
                        credentials,
                    }
                }
        }
        pub struct Allgemein12 {
                client: reqwest::Client,
                url: String,
                credentials: Option<(String,String)>
                }
                #[async_trait]
	impl ports::AllgemeineFunktionen for Allgemein12 {
	async fn get_lokale_uhrzeit (&self, get_lokale_uhrzeit_request: ports::GetLokaleUhrzeitRequest) -> Result<ports::GetLokaleUhrzeitResponse, Option<SoapFault>> {

        let __request = GetLokaleUhrzeitRequestSoapEnvelope::new(SoapGetLokaleUhrzeitRequest {
            body: get_lokale_uhrzeit_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetLokaleUhrzeit")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetLokaleUhrzeitResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_lokale_uhrzeit_mit_authentifizierung (&self, get_lokale_uhrzeit_mit_authentifizierung_request: ports::GetLokaleUhrzeitMitAuthentifizierungRequest) -> Result<ports::GetLokaleUhrzeitMitAuthentifizierungResponse, Option<SoapFault>> {

        let __request = GetLokaleUhrzeitMitAuthentifizierungRequestSoapEnvelope::new(SoapGetLokaleUhrzeitMitAuthentifizierungRequest {
            body: get_lokale_uhrzeit_mit_authentifizierung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetLokaleUhrzeitMitAuthentifizierung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetLokaleUhrzeitMitAuthentifizierungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_liste_katalogkategorien (&self, get_liste_katalogkategorien_request: ports::GetListeKatalogkategorienRequest) -> Result<ports::GetListeKatalogkategorienResponse, Option<SoapFault>> {

        let __request = GetListeKatalogkategorienRequestSoapEnvelope::new(SoapGetListeKatalogkategorienRequest {
            body: get_liste_katalogkategorien_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeKatalogkategorien")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeKatalogkategorienResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_katalogwerte (&self, get_katalogwerte_request: ports::GetKatalogwerteRequest) -> Result<ports::GetKatalogwerteResponse, Option<SoapFault>> {

        let __request = GetKatalogwerteRequestSoapEnvelope::new(SoapGetKatalogwerteRequest {
            body: get_katalogwerte_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKatalogwerte")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKatalogwerteResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_bilanzierungsgebiete (&self, get_bilanzierungsgebiete_request: ports::GetBilanzierungsgebieteRequest) -> Result<ports::GetBilanzierungsgebieteResponse, Option<SoapFault>> {

        let __request = GetBilanzierungsgebieteRequestSoapEnvelope::new(SoapGetBilanzierungsgebieteRequest {
            body: get_bilanzierungsgebiete_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetBilanzierungsgebiete")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetBilanzierungsgebieteResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_aktueller_stand_tageskontingent (&self, get_aktueller_stand_tageskontingent_request: ports::GetAktuellerStandTageskontingentRequest) -> Result<ports::GetAktuellerStandTageskontingentResponse, Option<SoapFault>> {

        let __request = GetAktuellerStandTageskontingentRequestSoapEnvelope::new(SoapGetAktuellerStandTageskontingentRequest {
            body: get_aktueller_stand_tageskontingent_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetAktuellerStandTageskontingent")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetAktuellerStandTageskontingentResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}}

            impl Akteur {
                async fn send_soap_request<T: YaSerialize>(&self, request: &T, action: &str) -> SoapResponse {
                    let body = to_string(request).expect("failed to generate xml");
                    debug!("SOAP Request: {}", body);
                    let mut req = self
                        .client
                        .post(&self.url)
                        .body(body)
                        .header("Content-Type", "text/xml")
                        .header("Soapaction", action);
                    if let Some(credentials) = &self.credentials {
                        req = req.basic_auth(
                            credentials.0.to_string(),
                            Option::Some(credentials.1.to_string()),
                        );
                    }
                    let res = req.send().await?;
                    let status = res.status();
                    debug!("SOAP Status: {}", status);
                    let txt = res.text().await.unwrap_or_default();
                    debug!("SOAP Response: {}", txt);
                    Ok((status, txt))
                }
            }
            #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeAlleMarktakteureRequest {
                        #[yaserde(rename = "GetListeAlleMarktakteure", default)]
                        pub body: ports::GetListeAlleMarktakteureRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeAlleMarktakteureRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeAlleMarktakteureRequest,
        }
        
        impl GetListeAlleMarktakteureRequestSoapEnvelope {
            pub fn new(body: SoapGetListeAlleMarktakteureRequest) -> Self {
                GetListeAlleMarktakteureRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeAlleMarktakteureResponse {
                    #[yaserde(rename = "GetListeAlleMarktakteureResponse", default)]
                    pub body: ports::GetListeAlleMarktakteureResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeAlleMarktakteureResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeAlleMarktakteureResponse,
        }
        
        impl GetListeAlleMarktakteureResponseSoapEnvelope {
            pub fn new(body: SoapGetListeAlleMarktakteureResponse) -> Self {
                GetListeAlleMarktakteureResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeFreigegebeneMarktakteureRequest {
                        #[yaserde(rename = "GetListeFreigegebeneMarktakteure", default)]
                        pub body: ports::GetListeFreigegebeneMarktakteureRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeFreigegebeneMarktakteureRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeFreigegebeneMarktakteureRequest,
        }
        
        impl GetListeFreigegebeneMarktakteureRequestSoapEnvelope {
            pub fn new(body: SoapGetListeFreigegebeneMarktakteureRequest) -> Self {
                GetListeFreigegebeneMarktakteureRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeFreigegebeneMarktakteureResponse {
                    #[yaserde(rename = "GetListeFreigegebeneMarktakteureResponse", default)]
                    pub body: ports::GetListeFreigegebeneMarktakteureResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeFreigegebeneMarktakteureResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeFreigegebeneMarktakteureResponse,
        }
        
        impl GetListeFreigegebeneMarktakteureResponseSoapEnvelope {
            pub fn new(body: SoapGetListeFreigegebeneMarktakteureResponse) -> Self {
                GetListeFreigegebeneMarktakteureResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetMarktakteurRequest {
                        #[yaserde(rename = "GetMarktakteur", default)]
                        pub body: ports::GetMarktakteurRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetMarktakteurRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetMarktakteurRequest,
        }
        
        impl GetMarktakteurRequestSoapEnvelope {
            pub fn new(body: SoapGetMarktakteurRequest) -> Self {
                GetMarktakteurRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetMarktakteurResponse {
                    #[yaserde(rename = "GetMarktakteurResponse", default)]
                    pub body: ports::GetMarktakteurResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetMarktakteurResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetMarktakteurResponse,
        }
        
        impl GetMarktakteurResponseSoapEnvelope {
            pub fn new(body: SoapGetMarktakteurResponse) -> Self {
                GetMarktakteurResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetGefilterteListeMarktakteureRequest {
                        #[yaserde(rename = "GetGefilterteListeMarktakteure", default)]
                        pub body: ports::GetGefilterteListeMarktakteureRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetGefilterteListeMarktakteureRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetGefilterteListeMarktakteureRequest,
        }
        
        impl GetGefilterteListeMarktakteureRequestSoapEnvelope {
            pub fn new(body: SoapGetGefilterteListeMarktakteureRequest) -> Self {
                GetGefilterteListeMarktakteureRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetGefilterteListeMarktakteureResponse {
                    #[yaserde(rename = "GetGefilterteListeMarktakteureResponse", default)]
                    pub body: ports::GetGefilterteListeMarktakteureResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetGefilterteListeMarktakteureResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetGefilterteListeMarktakteureResponse,
        }
        
        impl GetGefilterteListeMarktakteureResponseSoapEnvelope {
            pub fn new(body: SoapGetGefilterteListeMarktakteureResponse) -> Self {
                GetGefilterteListeMarktakteureResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetMeineMarktakteureRequest {
                        #[yaserde(rename = "GetMeineMarktakteure", default)]
                        pub body: ports::GetMeineMarktakteureRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetMeineMarktakteureRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetMeineMarktakteureRequest,
        }
        
        impl GetMeineMarktakteureRequestSoapEnvelope {
            pub fn new(body: SoapGetMeineMarktakteureRequest) -> Self {
                GetMeineMarktakteureRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetMeineMarktakteureResponse {
                    #[yaserde(rename = "GetMeineMarktakteureResponse", default)]
                    pub body: ports::GetMeineMarktakteureResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetMeineMarktakteureResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetMeineMarktakteureResponse,
        }
        
        impl GetMeineMarktakteureResponseSoapEnvelope {
            pub fn new(body: SoapGetMeineMarktakteureResponse) -> Self {
                GetMeineMarktakteureResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeGeloeschteUndDeaktivierteMarktakteureRequest {
                        #[yaserde(rename = "GetListeGeloeschteUndDeaktivierteMarktakteure", default)]
                        pub body: ports::GetListeGeloeschteUndDeaktivierteMarktakteureRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeGeloeschteUndDeaktivierteMarktakteureRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeGeloeschteUndDeaktivierteMarktakteureRequest,
        }
        
        impl GetListeGeloeschteUndDeaktivierteMarktakteureRequestSoapEnvelope {
            pub fn new(body: SoapGetListeGeloeschteUndDeaktivierteMarktakteureRequest) -> Self {
                GetListeGeloeschteUndDeaktivierteMarktakteureRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeGeloeschteUndDeaktivierteMarktakteureResponse {
                    #[yaserde(rename = "GetListeGeloeschteUndDeaktivierteMarktakteureResponse", default)]
                    pub body: ports::GetListeGeloeschteUndDeaktivierteMarktakteureResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeGeloeschteUndDeaktivierteMarktakteureResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeGeloeschteUndDeaktivierteMarktakteureResponse,
        }
        
        impl GetListeGeloeschteUndDeaktivierteMarktakteureResponseSoapEnvelope {
            pub fn new(body: SoapGetListeGeloeschteUndDeaktivierteMarktakteureResponse) -> Self {
                GetListeGeloeschteUndDeaktivierteMarktakteureResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                impl Default for Akteur {
                fn default() -> Self {
                    Akteur {
                        client: reqwest::Client::new(),
                        url: "https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string(),
                        credentials: Option::None,
                     }
                }
            }
            impl Akteur {
                pub fn new(url: &str, credentials: Option<(String,String)>) -> Self {
                    Akteur {
                        client: reqwest::Client::new(),
                        url: url.to_string(),
                        credentials,
                    }
                }
        }
        pub struct Akteur {
                client: reqwest::Client,
                url: String,
                credentials: Option<(String,String)>
                }
                #[async_trait]
	impl ports::Akteur for Akteur {
	async fn get_liste_alle_marktakteure (&self, get_liste_alle_marktakteure_request: ports::GetListeAlleMarktakteureRequest) -> Result<ports::GetListeAlleMarktakteureResponse, Option<SoapFault>> {

        let __request = GetListeAlleMarktakteureRequestSoapEnvelope::new(SoapGetListeAlleMarktakteureRequest {
            body: get_liste_alle_marktakteure_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeAlleMarktakteure")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeAlleMarktakteureResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_liste_freigegebene_marktakteure (&self, get_liste_freigegebene_marktakteure_request: ports::GetListeFreigegebeneMarktakteureRequest) -> Result<ports::GetListeFreigegebeneMarktakteureResponse, Option<SoapFault>> {

        let __request = GetListeFreigegebeneMarktakteureRequestSoapEnvelope::new(SoapGetListeFreigegebeneMarktakteureRequest {
            body: get_liste_freigegebene_marktakteure_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeFreigegebeneMarktakteure")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeFreigegebeneMarktakteureResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_marktakteur (&self, get_marktakteur_request: ports::GetMarktakteurRequest) -> Result<ports::GetMarktakteurResponse, Option<SoapFault>> {

        let __request = GetMarktakteurRequestSoapEnvelope::new(SoapGetMarktakteurRequest {
            body: get_marktakteur_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetMarktakteur")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetMarktakteurResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_gefilterte_liste_marktakteure (&self, get_gefilterte_liste_marktakteure_request: ports::GetGefilterteListeMarktakteureRequest) -> Result<ports::GetGefilterteListeMarktakteureResponse, Option<SoapFault>> {

        let __request = GetGefilterteListeMarktakteureRequestSoapEnvelope::new(SoapGetGefilterteListeMarktakteureRequest {
            body: get_gefilterte_liste_marktakteure_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetGefilterteListeMarktakteure")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetGefilterteListeMarktakteureResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_meine_marktakteure (&self, get_meine_marktakteure_request: ports::GetMeineMarktakteureRequest) -> Result<ports::GetMeineMarktakteureResponse, Option<SoapFault>> {

        let __request = GetMeineMarktakteureRequestSoapEnvelope::new(SoapGetMeineMarktakteureRequest {
            body: get_meine_marktakteure_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetMeineMarktakteure")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetMeineMarktakteureResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_liste_geloeschte_und_deaktivierte_marktakteure (&self, get_liste_geloeschte_und_deaktivierte_marktakteure_request: ports::GetListeGeloeschteUndDeaktivierteMarktakteureRequest) -> Result<ports::GetListeGeloeschteUndDeaktivierteMarktakteureResponse, Option<SoapFault>> {

        let __request = GetListeGeloeschteUndDeaktivierteMarktakteureRequestSoapEnvelope::new(SoapGetListeGeloeschteUndDeaktivierteMarktakteureRequest {
            body: get_liste_geloeschte_und_deaktivierte_marktakteure_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeGeloeschteUndDeaktivierteMarktakteure")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeGeloeschteUndDeaktivierteMarktakteureResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}}

            impl Akteur12 {
                async fn send_soap_request<T: YaSerialize>(&self, request: &T, action: &str) -> SoapResponse {
                    let body = to_string(request).expect("failed to generate xml");
                    debug!("SOAP Request: {}", body);
                    let mut req = self
                        .client
                        .post(&self.url)
                        .body(body)
                        .header("Content-Type", "text/xml")
                        .header("Soapaction", action);
                    if let Some(credentials) = &self.credentials {
                        req = req.basic_auth(
                            credentials.0.to_string(),
                            Option::Some(credentials.1.to_string()),
                        );
                    }
                    let res = req.send().await?;
                    let status = res.status();
                    debug!("SOAP Status: {}", status);
                    let txt = res.text().await.unwrap_or_default();
                    debug!("SOAP Response: {}", txt);
                    Ok((status, txt))
                }
            }
            impl Default for Akteur12 {
                fn default() -> Self {
                    Akteur12 {
                        client: reqwest::Client::new(),
                        url: "https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string(),
                        credentials: Option::None,
                     }
                }
            }
            impl Akteur12 {
                pub fn new(url: &str, credentials: Option<(String,String)>) -> Self {
                    Akteur12 {
                        client: reqwest::Client::new(),
                        url: url.to_string(),
                        credentials,
                    }
                }
        }
        pub struct Akteur12 {
                client: reqwest::Client,
                url: String,
                credentials: Option<(String,String)>
                }
                #[async_trait]
	impl ports::Akteur for Akteur12 {
	async fn get_liste_alle_marktakteure (&self, get_liste_alle_marktakteure_request: ports::GetListeAlleMarktakteureRequest) -> Result<ports::GetListeAlleMarktakteureResponse, Option<SoapFault>> {

        let __request = GetListeAlleMarktakteureRequestSoapEnvelope::new(SoapGetListeAlleMarktakteureRequest {
            body: get_liste_alle_marktakteure_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeAlleMarktakteure")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeAlleMarktakteureResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_liste_freigegebene_marktakteure (&self, get_liste_freigegebene_marktakteure_request: ports::GetListeFreigegebeneMarktakteureRequest) -> Result<ports::GetListeFreigegebeneMarktakteureResponse, Option<SoapFault>> {

        let __request = GetListeFreigegebeneMarktakteureRequestSoapEnvelope::new(SoapGetListeFreigegebeneMarktakteureRequest {
            body: get_liste_freigegebene_marktakteure_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeFreigegebeneMarktakteure")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeFreigegebeneMarktakteureResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_marktakteur (&self, get_marktakteur_request: ports::GetMarktakteurRequest) -> Result<ports::GetMarktakteurResponse, Option<SoapFault>> {

        let __request = GetMarktakteurRequestSoapEnvelope::new(SoapGetMarktakteurRequest {
            body: get_marktakteur_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetMarktakteur")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetMarktakteurResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_gefilterte_liste_marktakteure (&self, get_gefilterte_liste_marktakteure_request: ports::GetGefilterteListeMarktakteureRequest) -> Result<ports::GetGefilterteListeMarktakteureResponse, Option<SoapFault>> {

        let __request = GetGefilterteListeMarktakteureRequestSoapEnvelope::new(SoapGetGefilterteListeMarktakteureRequest {
            body: get_gefilterte_liste_marktakteure_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetGefilterteListeMarktakteure")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetGefilterteListeMarktakteureResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_meine_marktakteure (&self, get_meine_marktakteure_request: ports::GetMeineMarktakteureRequest) -> Result<ports::GetMeineMarktakteureResponse, Option<SoapFault>> {

        let __request = GetMeineMarktakteureRequestSoapEnvelope::new(SoapGetMeineMarktakteureRequest {
            body: get_meine_marktakteure_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetMeineMarktakteure")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetMeineMarktakteureResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_liste_geloeschte_und_deaktivierte_marktakteure (&self, get_liste_geloeschte_und_deaktivierte_marktakteure_request: ports::GetListeGeloeschteUndDeaktivierteMarktakteureRequest) -> Result<ports::GetListeGeloeschteUndDeaktivierteMarktakteureResponse, Option<SoapFault>> {

        let __request = GetListeGeloeschteUndDeaktivierteMarktakteureRequestSoapEnvelope::new(SoapGetListeGeloeschteUndDeaktivierteMarktakteureRequest {
            body: get_liste_geloeschte_und_deaktivierte_marktakteure_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeGeloeschteUndDeaktivierteMarktakteure")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeGeloeschteUndDeaktivierteMarktakteureResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}}

            impl Netzbetreiberpruefung {
                async fn send_soap_request<T: YaSerialize>(&self, request: &T, action: &str) -> SoapResponse {
                    let body = to_string(request).expect("failed to generate xml");
                    debug!("SOAP Request: {}", body);
                    let mut req = self
                        .client
                        .post(&self.url)
                        .body(body)
                        .header("Content-Type", "text/xml")
                        .header("Soapaction", action);
                    if let Some(credentials) = &self.credentials {
                        req = req.basic_auth(
                            credentials.0.to_string(),
                            Option::Some(credentials.1.to_string()),
                        );
                    }
                    let res = req.send().await?;
                    let status = res.status();
                    debug!("SOAP Status: {}", status);
                    let txt = res.text().await.unwrap_or_default();
                    debug!("SOAP Response: {}", txt);
                    Ok((status, txt))
                }
            }
            #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeMeineNetzbetreiberpruefungenRequest {
                        #[yaserde(rename = "GetListeMeineNetzbetreiberpruefungen", default)]
                        pub body: ports::GetListeMeineNetzbetreiberpruefungenRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeMeineNetzbetreiberpruefungenRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeMeineNetzbetreiberpruefungenRequest,
        }
        
        impl GetListeMeineNetzbetreiberpruefungenRequestSoapEnvelope {
            pub fn new(body: SoapGetListeMeineNetzbetreiberpruefungenRequest) -> Self {
                GetListeMeineNetzbetreiberpruefungenRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeMeineNetzbetreiberpruefungenResponse {
                    #[yaserde(rename = "GetListeMeineNetzbetreiberpruefungenResponse", default)]
                    pub body: ports::GetListeMeineNetzbetreiberpruefungenResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeMeineNetzbetreiberpruefungenResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeMeineNetzbetreiberpruefungenResponse,
        }
        
        impl GetListeMeineNetzbetreiberpruefungenResponseSoapEnvelope {
            pub fn new(body: SoapGetListeMeineNetzbetreiberpruefungenResponse) -> Self {
                GetListeMeineNetzbetreiberpruefungenResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapErneuteNetzbetreiberpruefungStartenRequest {
                        #[yaserde(rename = "ErneuteNetzbetreiberpruefungStarten", default)]
                        pub body: ports::ErneuteNetzbetreiberpruefungStartenRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct ErneuteNetzbetreiberpruefungStartenRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapErneuteNetzbetreiberpruefungStartenRequest,
        }
        
        impl ErneuteNetzbetreiberpruefungStartenRequestSoapEnvelope {
            pub fn new(body: SoapErneuteNetzbetreiberpruefungStartenRequest) -> Self {
                ErneuteNetzbetreiberpruefungStartenRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapErneuteNetzbetreiberpruefungStartenResponse {
                    #[yaserde(rename = "ErneuteNetzbetreiberpruefungStartenResponse", default)]
                    pub body: ports::ErneuteNetzbetreiberpruefungStartenResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct ErneuteNetzbetreiberpruefungStartenResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapErneuteNetzbetreiberpruefungStartenResponse,
        }
        
        impl ErneuteNetzbetreiberpruefungStartenResponseSoapEnvelope {
            pub fn new(body: SoapErneuteNetzbetreiberpruefungStartenResponse) -> Self {
                ErneuteNetzbetreiberpruefungStartenResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapVerschiebeEinheitZuAndererLokationRequest {
                        #[yaserde(rename = "VerschiebeEinheitZuAndererLokation", default)]
                        pub body: ports::VerschiebeEinheitZuAndererLokationRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct VerschiebeEinheitZuAndererLokationRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapVerschiebeEinheitZuAndererLokationRequest,
        }
        
        impl VerschiebeEinheitZuAndererLokationRequestSoapEnvelope {
            pub fn new(body: SoapVerschiebeEinheitZuAndererLokationRequest) -> Self {
                VerschiebeEinheitZuAndererLokationRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapVerschiebeEinheitZuAndererLokationResponse {
                    #[yaserde(rename = "VerschiebeEinheitZuAndererLokationResponse", default)]
                    pub body: ports::VerschiebeEinheitZuAndererLokationResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct VerschiebeEinheitZuAndererLokationResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapVerschiebeEinheitZuAndererLokationResponse,
        }
        
        impl VerschiebeEinheitZuAndererLokationResponseSoapEnvelope {
            pub fn new(body: SoapVerschiebeEinheitZuAndererLokationResponse) -> Self {
                VerschiebeEinheitZuAndererLokationResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapVerschiebeEinheitZuNeuerLokationRequest {
                        #[yaserde(rename = "VerschiebeEinheitZuNeuerLokation", default)]
                        pub body: ports::VerschiebeEinheitZuNeuerLokationRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct VerschiebeEinheitZuNeuerLokationRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapVerschiebeEinheitZuNeuerLokationRequest,
        }
        
        impl VerschiebeEinheitZuNeuerLokationRequestSoapEnvelope {
            pub fn new(body: SoapVerschiebeEinheitZuNeuerLokationRequest) -> Self {
                VerschiebeEinheitZuNeuerLokationRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapVerschiebeEinheitZuNeuerLokationResponse {
                    #[yaserde(rename = "VerschiebeEinheitZuNeuerLokationResponse", default)]
                    pub body: ports::VerschiebeEinheitZuNeuerLokationResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct VerschiebeEinheitZuNeuerLokationResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapVerschiebeEinheitZuNeuerLokationResponse,
        }
        
        impl VerschiebeEinheitZuNeuerLokationResponseSoapEnvelope {
            pub fn new(body: SoapVerschiebeEinheitZuNeuerLokationResponse) -> Self {
                VerschiebeEinheitZuNeuerLokationResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetNetzbetreiberpruefungAbgeschlossenRequest {
                        #[yaserde(rename = "SetNetzbetreiberpruefungAbgeschlossen", default)]
                        pub body: ports::SetNetzbetreiberpruefungAbgeschlossenRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetNetzbetreiberpruefungAbgeschlossenRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetNetzbetreiberpruefungAbgeschlossenRequest,
        }
        
        impl SetNetzbetreiberpruefungAbgeschlossenRequestSoapEnvelope {
            pub fn new(body: SoapSetNetzbetreiberpruefungAbgeschlossenRequest) -> Self {
                SetNetzbetreiberpruefungAbgeschlossenRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetNetzbetreiberpruefungAbgeschlossenResponse {
                    #[yaserde(rename = "SetNetzbetreiberpruefungAbgeschlossenResponse", default)]
                    pub body: ports::SetNetzbetreiberpruefungAbgeschlossenResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetNetzbetreiberpruefungAbgeschlossenResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetNetzbetreiberpruefungAbgeschlossenResponse,
        }
        
        impl SetNetzbetreiberpruefungAbgeschlossenResponseSoapEnvelope {
            pub fn new(body: SoapSetNetzbetreiberpruefungAbgeschlossenResponse) -> Self {
                SetNetzbetreiberpruefungAbgeschlossenResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetDatenkorrekturErforderlichRequest {
                        #[yaserde(rename = "SetDatenkorrekturErforderlich", default)]
                        pub body: ports::SetDatenkorrekturErforderlichRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetDatenkorrekturErforderlichRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetDatenkorrekturErforderlichRequest,
        }
        
        impl SetDatenkorrekturErforderlichRequestSoapEnvelope {
            pub fn new(body: SoapSetDatenkorrekturErforderlichRequest) -> Self {
                SetDatenkorrekturErforderlichRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetDatenkorrekturErforderlichResponse {
                    #[yaserde(rename = "SetDatenkorrekturErforderlichResponse", default)]
                    pub body: ports::SetDatenkorrekturErforderlichResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetDatenkorrekturErforderlichResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetDatenkorrekturErforderlichResponse,
        }
        
        impl SetDatenkorrekturErforderlichResponseSoapEnvelope {
            pub fn new(body: SoapSetDatenkorrekturErforderlichResponse) -> Self {
                SetDatenkorrekturErforderlichResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetNetzbetreiberNichtZustaendigRequest {
                        #[yaserde(rename = "SetNetzbetreiberNichtZustaendig", default)]
                        pub body: ports::SetNetzbetreiberNichtZustaendigRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetNetzbetreiberNichtZustaendigRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetNetzbetreiberNichtZustaendigRequest,
        }
        
        impl SetNetzbetreiberNichtZustaendigRequestSoapEnvelope {
            pub fn new(body: SoapSetNetzbetreiberNichtZustaendigRequest) -> Self {
                SetNetzbetreiberNichtZustaendigRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetNetzbetreiberNichtZustaendigResponse {
                    #[yaserde(rename = "SetNetzbetreiberNichtZustaendigResponse", default)]
                    pub body: ports::SetNetzbetreiberNichtZustaendigResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetNetzbetreiberNichtZustaendigResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetNetzbetreiberNichtZustaendigResponse,
        }
        
        impl SetNetzbetreiberNichtZustaendigResponseSoapEnvelope {
            pub fn new(body: SoapSetNetzbetreiberNichtZustaendigResponse) -> Self {
                SetNetzbetreiberNichtZustaendigResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetStilllegungAbgelehntRequest {
                        #[yaserde(rename = "SetStilllegungAbgelehnt", default)]
                        pub body: ports::SetStilllegungAbgelehntRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetStilllegungAbgelehntRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetStilllegungAbgelehntRequest,
        }
        
        impl SetStilllegungAbgelehntRequestSoapEnvelope {
            pub fn new(body: SoapSetStilllegungAbgelehntRequest) -> Self {
                SetStilllegungAbgelehntRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetStilllegungAbgelehntResponse {
                    #[yaserde(rename = "SetStilllegungAbgelehntResponse", default)]
                    pub body: ports::SetStilllegungAbgelehntResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetStilllegungAbgelehntResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetStilllegungAbgelehntResponse,
        }
        
        impl SetStilllegungAbgelehntResponseSoapEnvelope {
            pub fn new(body: SoapSetStilllegungAbgelehntResponse) -> Self {
                SetStilllegungAbgelehntResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetAntragAufFristverlaengerungRequest {
                        #[yaserde(rename = "SetAntragAufFristverlaengerung", default)]
                        pub body: ports::SetAntragAufFristverlaengerungRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetAntragAufFristverlaengerungRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetAntragAufFristverlaengerungRequest,
        }
        
        impl SetAntragAufFristverlaengerungRequestSoapEnvelope {
            pub fn new(body: SoapSetAntragAufFristverlaengerungRequest) -> Self {
                SetAntragAufFristverlaengerungRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetAntragAufFristverlaengerungResponse {
                    #[yaserde(rename = "SetAntragAufFristverlaengerungResponse", default)]
                    pub body: ports::SetAntragAufFristverlaengerungResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetAntragAufFristverlaengerungResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetAntragAufFristverlaengerungResponse,
        }
        
        impl SetAntragAufFristverlaengerungResponseSoapEnvelope {
            pub fn new(body: SoapSetAntragAufFristverlaengerungResponse) -> Self {
                SetAntragAufFristverlaengerungResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapRuecknahmeFristverlaengerungRequest {
                        #[yaserde(rename = "RuecknahmeFristverlaengerung", default)]
                        pub body: ports::RuecknahmeFristverlaengerungRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct RuecknahmeFristverlaengerungRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapRuecknahmeFristverlaengerungRequest,
        }
        
        impl RuecknahmeFristverlaengerungRequestSoapEnvelope {
            pub fn new(body: SoapRuecknahmeFristverlaengerungRequest) -> Self {
                RuecknahmeFristverlaengerungRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapRuecknahmeFristverlaengerungResponse {
                    #[yaserde(rename = "RuecknahmeFristverlaengerungResponse", default)]
                    pub body: ports::RuecknahmeFristverlaengerungResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct RuecknahmeFristverlaengerungResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapRuecknahmeFristverlaengerungResponse,
        }
        
        impl RuecknahmeFristverlaengerungResponseSoapEnvelope {
            pub fn new(body: SoapRuecknahmeFristverlaengerungResponse) -> Self {
                RuecknahmeFristverlaengerungResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKlaerungErforderlichRequest {
                        #[yaserde(rename = "SetKlaerungErforderlich", default)]
                        pub body: ports::SetKlaerungErforderlichRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKlaerungErforderlichRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKlaerungErforderlichRequest,
        }
        
        impl SetKlaerungErforderlichRequestSoapEnvelope {
            pub fn new(body: SoapSetKlaerungErforderlichRequest) -> Self {
                SetKlaerungErforderlichRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKlaerungErforderlichResponse {
                    #[yaserde(rename = "SetKlaerungErforderlichResponse", default)]
                    pub body: ports::SetKlaerungErforderlichResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKlaerungErforderlichResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKlaerungErforderlichResponse,
        }
        
        impl SetKlaerungErforderlichResponseSoapEnvelope {
            pub fn new(body: SoapSetKlaerungErforderlichResponse) -> Self {
                SetKlaerungErforderlichResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturBetriebsstatusRequest {
                        #[yaserde(rename = "SetKorrekturBetriebsstatus", default)]
                        pub body: ports::SetKorrekturBetriebsstatusRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturBetriebsstatusRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturBetriebsstatusRequest,
        }
        
        impl SetKorrekturBetriebsstatusRequestSoapEnvelope {
            pub fn new(body: SoapSetKorrekturBetriebsstatusRequest) -> Self {
                SetKorrekturBetriebsstatusRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturBetriebsstatusResponse {
                    #[yaserde(rename = "SetKorrekturBetriebsstatusResponse", default)]
                    pub body: ports::SetKorrekturBetriebsstatusResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturBetriebsstatusResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturBetriebsstatusResponse,
        }
        
        impl SetKorrekturBetriebsstatusResponseSoapEnvelope {
            pub fn new(body: SoapSetKorrekturBetriebsstatusResponse) -> Self {
                SetKorrekturBetriebsstatusResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagBetriebsstatusRequest {
                        #[yaserde(rename = "GetKorrekturVorschlagBetriebsstatus", default)]
                        pub body: ports::GetKorrekturVorschlagBetriebsstatusRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagBetriebsstatusRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagBetriebsstatusRequest,
        }
        
        impl GetKorrekturVorschlagBetriebsstatusRequestSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagBetriebsstatusRequest) -> Self {
                GetKorrekturVorschlagBetriebsstatusRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagBetriebsstatusResponse {
                    #[yaserde(rename = "GetKorrekturVorschlagBetriebsstatusResponse", default)]
                    pub body: ports::GetKorrekturVorschlagBetriebsstatusResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagBetriebsstatusResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagBetriebsstatusResponse,
        }
        
        impl GetKorrekturVorschlagBetriebsstatusResponseSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagBetriebsstatusResponse) -> Self {
                GetKorrekturVorschlagBetriebsstatusResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetWiedervorlageVorschlagBetriebsstatusRequest {
                        #[yaserde(rename = "GetWiedervorlageVorschlagBetriebsstatus", default)]
                        pub body: ports::GetWiedervorlageVorschlagBetriebsstatusRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetWiedervorlageVorschlagBetriebsstatusRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetWiedervorlageVorschlagBetriebsstatusRequest,
        }
        
        impl GetWiedervorlageVorschlagBetriebsstatusRequestSoapEnvelope {
            pub fn new(body: SoapGetWiedervorlageVorschlagBetriebsstatusRequest) -> Self {
                GetWiedervorlageVorschlagBetriebsstatusRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetWiedervorlageVorschlagBetriebsstatusResponse {
                    #[yaserde(rename = "GetWiedervorlageVorschlagBetriebsstatusResponse", default)]
                    pub body: ports::GetWiedervorlageVorschlagBetriebsstatusResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetWiedervorlageVorschlagBetriebsstatusResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetWiedervorlageVorschlagBetriebsstatusResponse,
        }
        
        impl GetWiedervorlageVorschlagBetriebsstatusResponseSoapEnvelope {
            pub fn new(body: SoapGetWiedervorlageVorschlagBetriebsstatusResponse) -> Self {
                GetWiedervorlageVorschlagBetriebsstatusResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturBetriebsstatusAbgeschlossenRequest {
                        #[yaserde(rename = "SetKorrekturBetriebsstatusAbgeschlossen", default)]
                        pub body: ports::SetKorrekturBetriebsstatusAbgeschlossenRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturBetriebsstatusAbgeschlossenRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturBetriebsstatusAbgeschlossenRequest,
        }
        
        impl SetKorrekturBetriebsstatusAbgeschlossenRequestSoapEnvelope {
            pub fn new(body: SoapSetKorrekturBetriebsstatusAbgeschlossenRequest) -> Self {
                SetKorrekturBetriebsstatusAbgeschlossenRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturBetriebsstatusAbgeschlossenResponse {
                    #[yaserde(rename = "SetKorrekturBetriebsstatusAbgeschlossenResponse", default)]
                    pub body: ports::SetKorrekturBetriebsstatusAbgeschlossenResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturBetriebsstatusAbgeschlossenResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturBetriebsstatusAbgeschlossenResponse,
        }
        
        impl SetKorrekturBetriebsstatusAbgeschlossenResponseSoapEnvelope {
            pub fn new(body: SoapSetKorrekturBetriebsstatusAbgeschlossenResponse) -> Self {
                SetKorrekturBetriebsstatusAbgeschlossenResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetEegAnlagenschluesselRequest {
                        #[yaserde(rename = "SetEegAnlagenschluessel", default)]
                        pub body: ports::SetEegAnlagenschluesselRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetEegAnlagenschluesselRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetEegAnlagenschluesselRequest,
        }
        
        impl SetEegAnlagenschluesselRequestSoapEnvelope {
            pub fn new(body: SoapSetEegAnlagenschluesselRequest) -> Self {
                SetEegAnlagenschluesselRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetEegAnlagenschluesselResponse {
                    #[yaserde(rename = "SetEegAnlagenschluesselResponse", default)]
                    pub body: ports::SetEegAnlagenschluesselResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetEegAnlagenschluesselResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetEegAnlagenschluesselResponse,
        }
        
        impl SetEegAnlagenschluesselResponseSoapEnvelope {
            pub fn new(body: SoapSetEegAnlagenschluesselResponse) -> Self {
                SetEegAnlagenschluesselResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturVorschlagEinheitWindRequest {
                        #[yaserde(rename = "SetKorrekturVorschlagEinheitWind", default)]
                        pub body: ports::SetKorrekturVorschlagEinheitWindRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturVorschlagEinheitWindRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturVorschlagEinheitWindRequest,
        }
        
        impl SetKorrekturVorschlagEinheitWindRequestSoapEnvelope {
            pub fn new(body: SoapSetKorrekturVorschlagEinheitWindRequest) -> Self {
                SetKorrekturVorschlagEinheitWindRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturVorschlagEinheitWindResponse {
                    #[yaserde(rename = "SetKorrekturVorschlagEinheitWindResponse", default)]
                    pub body: ports::SetKorrekturVorschlagEinheitWindResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturVorschlagEinheitWindResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturVorschlagEinheitWindResponse,
        }
        
        impl SetKorrekturVorschlagEinheitWindResponseSoapEnvelope {
            pub fn new(body: SoapSetKorrekturVorschlagEinheitWindResponse) -> Self {
                SetKorrekturVorschlagEinheitWindResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturVorschlagEinheitAnlagenbetreiberRequest {
                        #[yaserde(rename = "SetKorrekturVorschlagEinheitAnlagenbetreiber", default)]
                        pub body: ports::SetKorrekturVorschlagEinheitAnlagenbetreiberRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturVorschlagEinheitAnlagenbetreiberRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturVorschlagEinheitAnlagenbetreiberRequest,
        }
        
        impl SetKorrekturVorschlagEinheitAnlagenbetreiberRequestSoapEnvelope {
            pub fn new(body: SoapSetKorrekturVorschlagEinheitAnlagenbetreiberRequest) -> Self {
                SetKorrekturVorschlagEinheitAnlagenbetreiberRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturVorschlagEinheitAnlagenbetreiberResponse {
                    #[yaserde(rename = "SetKorrekturVorschlagEinheitAnlagenbetreiberResponse", default)]
                    pub body: ports::SetKorrekturVorschlagEinheitAnlagenbetreiberResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturVorschlagEinheitAnlagenbetreiberResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturVorschlagEinheitAnlagenbetreiberResponse,
        }
        
        impl SetKorrekturVorschlagEinheitAnlagenbetreiberResponseSoapEnvelope {
            pub fn new(body: SoapSetKorrekturVorschlagEinheitAnlagenbetreiberResponse) -> Self {
                SetKorrekturVorschlagEinheitAnlagenbetreiberResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturVorschlagEinheitSolarRequest {
                        #[yaserde(rename = "SetKorrekturVorschlagEinheitSolar", default)]
                        pub body: ports::SetKorrekturVorschlagEinheitSolarRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturVorschlagEinheitSolarRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturVorschlagEinheitSolarRequest,
        }
        
        impl SetKorrekturVorschlagEinheitSolarRequestSoapEnvelope {
            pub fn new(body: SoapSetKorrekturVorschlagEinheitSolarRequest) -> Self {
                SetKorrekturVorschlagEinheitSolarRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturVorschlagEinheitSolarResponse {
                    #[yaserde(rename = "SetKorrekturVorschlagEinheitSolarResponse", default)]
                    pub body: ports::SetKorrekturVorschlagEinheitSolarResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturVorschlagEinheitSolarResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturVorschlagEinheitSolarResponse,
        }
        
        impl SetKorrekturVorschlagEinheitSolarResponseSoapEnvelope {
            pub fn new(body: SoapSetKorrekturVorschlagEinheitSolarResponse) -> Self {
                SetKorrekturVorschlagEinheitSolarResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturVorschlagEinheitBiomasseRequest {
                        #[yaserde(rename = "SetKorrekturVorschlagEinheitBiomasse", default)]
                        pub body: ports::SetKorrekturVorschlagEinheitBiomasseRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturVorschlagEinheitBiomasseRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturVorschlagEinheitBiomasseRequest,
        }
        
        impl SetKorrekturVorschlagEinheitBiomasseRequestSoapEnvelope {
            pub fn new(body: SoapSetKorrekturVorschlagEinheitBiomasseRequest) -> Self {
                SetKorrekturVorschlagEinheitBiomasseRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturVorschlagEinheitBiomasseResponse {
                    #[yaserde(rename = "SetKorrekturVorschlagEinheitBiomasseResponse", default)]
                    pub body: ports::SetKorrekturVorschlagEinheitBiomasseResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturVorschlagEinheitBiomasseResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturVorschlagEinheitBiomasseResponse,
        }
        
        impl SetKorrekturVorschlagEinheitBiomasseResponseSoapEnvelope {
            pub fn new(body: SoapSetKorrekturVorschlagEinheitBiomasseResponse) -> Self {
                SetKorrekturVorschlagEinheitBiomasseResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturVorschlagEinheitWasserRequest {
                        #[yaserde(rename = "SetKorrekturVorschlagEinheitWasser", default)]
                        pub body: ports::SetKorrekturVorschlagEinheitWasserRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturVorschlagEinheitWasserRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturVorschlagEinheitWasserRequest,
        }
        
        impl SetKorrekturVorschlagEinheitWasserRequestSoapEnvelope {
            pub fn new(body: SoapSetKorrekturVorschlagEinheitWasserRequest) -> Self {
                SetKorrekturVorschlagEinheitWasserRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturVorschlagEinheitWasserResponse {
                    #[yaserde(rename = "SetKorrekturVorschlagEinheitWasserResponse", default)]
                    pub body: ports::SetKorrekturVorschlagEinheitWasserResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturVorschlagEinheitWasserResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturVorschlagEinheitWasserResponse,
        }
        
        impl SetKorrekturVorschlagEinheitWasserResponseSoapEnvelope {
            pub fn new(body: SoapSetKorrekturVorschlagEinheitWasserResponse) -> Self {
                SetKorrekturVorschlagEinheitWasserResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest {
                        #[yaserde(rename = "SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannung", default)]
                        pub body: ports::SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest,
        }
        
        impl SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequestSoapEnvelope {
            pub fn new(body: SoapSetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest) -> Self {
                SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse {
                    #[yaserde(rename = "SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse", default)]
                    pub body: ports::SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse,
        }
        
        impl SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponseSoapEnvelope {
            pub fn new(body: SoapSetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse) -> Self {
                SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturVorschlagEinheitVerbrennungRequest {
                        #[yaserde(rename = "SetKorrekturVorschlagEinheitVerbrennung", default)]
                        pub body: ports::SetKorrekturVorschlagEinheitVerbrennungRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturVorschlagEinheitVerbrennungRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturVorschlagEinheitVerbrennungRequest,
        }
        
        impl SetKorrekturVorschlagEinheitVerbrennungRequestSoapEnvelope {
            pub fn new(body: SoapSetKorrekturVorschlagEinheitVerbrennungRequest) -> Self {
                SetKorrekturVorschlagEinheitVerbrennungRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturVorschlagEinheitVerbrennungResponse {
                    #[yaserde(rename = "SetKorrekturVorschlagEinheitVerbrennungResponse", default)]
                    pub body: ports::SetKorrekturVorschlagEinheitVerbrennungResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturVorschlagEinheitVerbrennungResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturVorschlagEinheitVerbrennungResponse,
        }
        
        impl SetKorrekturVorschlagEinheitVerbrennungResponseSoapEnvelope {
            pub fn new(body: SoapSetKorrekturVorschlagEinheitVerbrennungResponse) -> Self {
                SetKorrekturVorschlagEinheitVerbrennungResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturVorschlagEinheitGasSpeicherRequest {
                        #[yaserde(rename = "SetKorrekturVorschlagEinheitGasSpeicher", default)]
                        pub body: ports::SetKorrekturVorschlagEinheitGasSpeicherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturVorschlagEinheitGasSpeicherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturVorschlagEinheitGasSpeicherRequest,
        }
        
        impl SetKorrekturVorschlagEinheitGasSpeicherRequestSoapEnvelope {
            pub fn new(body: SoapSetKorrekturVorschlagEinheitGasSpeicherRequest) -> Self {
                SetKorrekturVorschlagEinheitGasSpeicherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturVorschlagEinheitGasSpeicherResponse {
                    #[yaserde(rename = "SetKorrekturVorschlagEinheitGasSpeicherResponse", default)]
                    pub body: ports::SetKorrekturVorschlagEinheitGasSpeicherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturVorschlagEinheitGasSpeicherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturVorschlagEinheitGasSpeicherResponse,
        }
        
        impl SetKorrekturVorschlagEinheitGasSpeicherResponseSoapEnvelope {
            pub fn new(body: SoapSetKorrekturVorschlagEinheitGasSpeicherResponse) -> Self {
                SetKorrekturVorschlagEinheitGasSpeicherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturVorschlagEinheitStromVerbraucherRequest {
                        #[yaserde(rename = "SetKorrekturVorschlagEinheitStromVerbraucher", default)]
                        pub body: ports::SetKorrekturVorschlagEinheitStromVerbraucherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturVorschlagEinheitStromVerbraucherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturVorschlagEinheitStromVerbraucherRequest,
        }
        
        impl SetKorrekturVorschlagEinheitStromVerbraucherRequestSoapEnvelope {
            pub fn new(body: SoapSetKorrekturVorschlagEinheitStromVerbraucherRequest) -> Self {
                SetKorrekturVorschlagEinheitStromVerbraucherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturVorschlagEinheitStromVerbraucherResponse {
                    #[yaserde(rename = "SetKorrekturVorschlagEinheitStromVerbraucherResponse", default)]
                    pub body: ports::SetKorrekturVorschlagEinheitStromVerbraucherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturVorschlagEinheitStromVerbraucherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturVorschlagEinheitStromVerbraucherResponse,
        }
        
        impl SetKorrekturVorschlagEinheitStromVerbraucherResponseSoapEnvelope {
            pub fn new(body: SoapSetKorrekturVorschlagEinheitStromVerbraucherResponse) -> Self {
                SetKorrekturVorschlagEinheitStromVerbraucherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturVorschlagEinheitGasErzeugerRequest {
                        #[yaserde(rename = "SetKorrekturVorschlagEinheitGasErzeuger", default)]
                        pub body: ports::SetKorrekturVorschlagEinheitGasErzeugerRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturVorschlagEinheitGasErzeugerRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturVorschlagEinheitGasErzeugerRequest,
        }
        
        impl SetKorrekturVorschlagEinheitGasErzeugerRequestSoapEnvelope {
            pub fn new(body: SoapSetKorrekturVorschlagEinheitGasErzeugerRequest) -> Self {
                SetKorrekturVorschlagEinheitGasErzeugerRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturVorschlagEinheitGasErzeugerResponse {
                    #[yaserde(rename = "SetKorrekturVorschlagEinheitGasErzeugerResponse", default)]
                    pub body: ports::SetKorrekturVorschlagEinheitGasErzeugerResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturVorschlagEinheitGasErzeugerResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturVorschlagEinheitGasErzeugerResponse,
        }
        
        impl SetKorrekturVorschlagEinheitGasErzeugerResponseSoapEnvelope {
            pub fn new(body: SoapSetKorrekturVorschlagEinheitGasErzeugerResponse) -> Self {
                SetKorrekturVorschlagEinheitGasErzeugerResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturVorschlagEinheitGasVerbraucherRequest {
                        #[yaserde(rename = "SetKorrekturVorschlagEinheitGasVerbraucher", default)]
                        pub body: ports::SetKorrekturVorschlagEinheitGasVerbraucherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturVorschlagEinheitGasVerbraucherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturVorschlagEinheitGasVerbraucherRequest,
        }
        
        impl SetKorrekturVorschlagEinheitGasVerbraucherRequestSoapEnvelope {
            pub fn new(body: SoapSetKorrekturVorschlagEinheitGasVerbraucherRequest) -> Self {
                SetKorrekturVorschlagEinheitGasVerbraucherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturVorschlagEinheitGasVerbraucherResponse {
                    #[yaserde(rename = "SetKorrekturVorschlagEinheitGasVerbraucherResponse", default)]
                    pub body: ports::SetKorrekturVorschlagEinheitGasVerbraucherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturVorschlagEinheitGasVerbraucherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturVorschlagEinheitGasVerbraucherResponse,
        }
        
        impl SetKorrekturVorschlagEinheitGasVerbraucherResponseSoapEnvelope {
            pub fn new(body: SoapSetKorrekturVorschlagEinheitGasVerbraucherResponse) -> Self {
                SetKorrekturVorschlagEinheitGasVerbraucherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturVorschlagEinheitStromSpeicherRequest {
                        #[yaserde(rename = "SetKorrekturVorschlagEinheitStromSpeicher", default)]
                        pub body: ports::SetKorrekturVorschlagEinheitStromSpeicherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturVorschlagEinheitStromSpeicherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturVorschlagEinheitStromSpeicherRequest,
        }
        
        impl SetKorrekturVorschlagEinheitStromSpeicherRequestSoapEnvelope {
            pub fn new(body: SoapSetKorrekturVorschlagEinheitStromSpeicherRequest) -> Self {
                SetKorrekturVorschlagEinheitStromSpeicherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetKorrekturVorschlagEinheitStromSpeicherResponse {
                    #[yaserde(rename = "SetKorrekturVorschlagEinheitStromSpeicherResponse", default)]
                    pub body: ports::SetKorrekturVorschlagEinheitStromSpeicherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetKorrekturVorschlagEinheitStromSpeicherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetKorrekturVorschlagEinheitStromSpeicherResponse,
        }
        
        impl SetKorrekturVorschlagEinheitStromSpeicherResponseSoapEnvelope {
            pub fn new(body: SoapSetKorrekturVorschlagEinheitStromSpeicherResponse) -> Self {
                SetKorrekturVorschlagEinheitStromSpeicherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagEinheitWindRequest {
                        #[yaserde(rename = "GetKorrekturVorschlagEinheitWind", default)]
                        pub body: ports::GetKorrekturVorschlagEinheitWindRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagEinheitWindRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagEinheitWindRequest,
        }
        
        impl GetKorrekturVorschlagEinheitWindRequestSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagEinheitWindRequest) -> Self {
                GetKorrekturVorschlagEinheitWindRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagEinheitWindResponse {
                    #[yaserde(rename = "GetKorrekturVorschlagEinheitWindResponse", default)]
                    pub body: ports::GetKorrekturVorschlagEinheitWindResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagEinheitWindResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagEinheitWindResponse,
        }
        
        impl GetKorrekturVorschlagEinheitWindResponseSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagEinheitWindResponse) -> Self {
                GetKorrekturVorschlagEinheitWindResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagEinheitAnlagenbetreiberRequest {
                        #[yaserde(rename = "GetKorrekturVorschlagEinheitAnlagenbetreiber", default)]
                        pub body: ports::GetKorrekturVorschlagEinheitAnlagenbetreiberRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagEinheitAnlagenbetreiberRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagEinheitAnlagenbetreiberRequest,
        }
        
        impl GetKorrekturVorschlagEinheitAnlagenbetreiberRequestSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagEinheitAnlagenbetreiberRequest) -> Self {
                GetKorrekturVorschlagEinheitAnlagenbetreiberRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagEinheitAnlagenbetreiberResponse {
                    #[yaserde(rename = "GetKorrekturVorschlagEinheitAnlagenbetreiberResponse", default)]
                    pub body: ports::GetKorrekturVorschlagEinheitAnlagenbetreiberResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagEinheitAnlagenbetreiberResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagEinheitAnlagenbetreiberResponse,
        }
        
        impl GetKorrekturVorschlagEinheitAnlagenbetreiberResponseSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagEinheitAnlagenbetreiberResponse) -> Self {
                GetKorrekturVorschlagEinheitAnlagenbetreiberResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagEinheitSolarRequest {
                        #[yaserde(rename = "GetKorrekturVorschlagEinheitSolar", default)]
                        pub body: ports::GetKorrekturVorschlagEinheitSolarRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagEinheitSolarRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagEinheitSolarRequest,
        }
        
        impl GetKorrekturVorschlagEinheitSolarRequestSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagEinheitSolarRequest) -> Self {
                GetKorrekturVorschlagEinheitSolarRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagEinheitSolarResponse {
                    #[yaserde(rename = "GetKorrekturVorschlagEinheitSolarResponse", default)]
                    pub body: ports::GetKorrekturVorschlagEinheitSolarResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagEinheitSolarResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagEinheitSolarResponse,
        }
        
        impl GetKorrekturVorschlagEinheitSolarResponseSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagEinheitSolarResponse) -> Self {
                GetKorrekturVorschlagEinheitSolarResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagEinheitBiomasseRequest {
                        #[yaserde(rename = "GetKorrekturVorschlagEinheitBiomasse", default)]
                        pub body: ports::GetKorrekturVorschlagEinheitBiomasseRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagEinheitBiomasseRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagEinheitBiomasseRequest,
        }
        
        impl GetKorrekturVorschlagEinheitBiomasseRequestSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagEinheitBiomasseRequest) -> Self {
                GetKorrekturVorschlagEinheitBiomasseRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagEinheitBiomasseResponse {
                    #[yaserde(rename = "GetKorrekturVorschlagEinheitBiomasseResponse", default)]
                    pub body: ports::GetKorrekturVorschlagEinheitBiomasseResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagEinheitBiomasseResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagEinheitBiomasseResponse,
        }
        
        impl GetKorrekturVorschlagEinheitBiomasseResponseSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagEinheitBiomasseResponse) -> Self {
                GetKorrekturVorschlagEinheitBiomasseResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagEinheitWasserRequest {
                        #[yaserde(rename = "GetKorrekturVorschlagEinheitWasser", default)]
                        pub body: ports::GetKorrekturVorschlagEinheitWasserRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagEinheitWasserRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagEinheitWasserRequest,
        }
        
        impl GetKorrekturVorschlagEinheitWasserRequestSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagEinheitWasserRequest) -> Self {
                GetKorrekturVorschlagEinheitWasserRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagEinheitWasserResponse {
                    #[yaserde(rename = "GetKorrekturVorschlagEinheitWasserResponse", default)]
                    pub body: ports::GetKorrekturVorschlagEinheitWasserResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagEinheitWasserResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagEinheitWasserResponse,
        }
        
        impl GetKorrekturVorschlagEinheitWasserResponseSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagEinheitWasserResponse) -> Self {
                GetKorrekturVorschlagEinheitWasserResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest {
                        #[yaserde(rename = "GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannung", default)]
                        pub body: ports::GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest,
        }
        
        impl GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequestSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest) -> Self {
                GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse {
                    #[yaserde(rename = "GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse", default)]
                    pub body: ports::GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse,
        }
        
        impl GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponseSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse) -> Self {
                GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagEinheitVerbrennungRequest {
                        #[yaserde(rename = "GetKorrekturVorschlagEinheitVerbrennung", default)]
                        pub body: ports::GetKorrekturVorschlagEinheitVerbrennungRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagEinheitVerbrennungRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagEinheitVerbrennungRequest,
        }
        
        impl GetKorrekturVorschlagEinheitVerbrennungRequestSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagEinheitVerbrennungRequest) -> Self {
                GetKorrekturVorschlagEinheitVerbrennungRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagEinheitVerbrennungResponse {
                    #[yaserde(rename = "GetKorrekturVorschlagEinheitVerbrennungResponse", default)]
                    pub body: ports::GetKorrekturVorschlagEinheitVerbrennungResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagEinheitVerbrennungResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagEinheitVerbrennungResponse,
        }
        
        impl GetKorrekturVorschlagEinheitVerbrennungResponseSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagEinheitVerbrennungResponse) -> Self {
                GetKorrekturVorschlagEinheitVerbrennungResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagEinheitStromVerbraucherRequest {
                        #[yaserde(rename = "GetKorrekturVorschlagEinheitStromVerbraucher", default)]
                        pub body: ports::GetKorrekturVorschlagEinheitStromVerbraucherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagEinheitStromVerbraucherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagEinheitStromVerbraucherRequest,
        }
        
        impl GetKorrekturVorschlagEinheitStromVerbraucherRequestSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagEinheitStromVerbraucherRequest) -> Self {
                GetKorrekturVorschlagEinheitStromVerbraucherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagEinheitStromVerbraucherResponse {
                    #[yaserde(rename = "GetKorrekturVorschlagEinheitStromVerbraucherResponse", default)]
                    pub body: ports::GetKorrekturVorschlagEinheitStromVerbraucherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagEinheitStromVerbraucherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagEinheitStromVerbraucherResponse,
        }
        
        impl GetKorrekturVorschlagEinheitStromVerbraucherResponseSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagEinheitStromVerbraucherResponse) -> Self {
                GetKorrekturVorschlagEinheitStromVerbraucherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagEinheitGasErzeugerRequest {
                        #[yaserde(rename = "GetKorrekturVorschlagEinheitGasErzeuger", default)]
                        pub body: ports::GetKorrekturVorschlagEinheitGasErzeugerRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagEinheitGasErzeugerRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagEinheitGasErzeugerRequest,
        }
        
        impl GetKorrekturVorschlagEinheitGasErzeugerRequestSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagEinheitGasErzeugerRequest) -> Self {
                GetKorrekturVorschlagEinheitGasErzeugerRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagEinheitGasErzeugerResponse {
                    #[yaserde(rename = "GetKorrekturVorschlagEinheitGasErzeugerResponse", default)]
                    pub body: ports::GetKorrekturVorschlagEinheitGasErzeugerResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagEinheitGasErzeugerResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagEinheitGasErzeugerResponse,
        }
        
        impl GetKorrekturVorschlagEinheitGasErzeugerResponseSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagEinheitGasErzeugerResponse) -> Self {
                GetKorrekturVorschlagEinheitGasErzeugerResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagEinheitGasVerbraucherRequest {
                        #[yaserde(rename = "GetKorrekturVorschlagEinheitGasVerbraucher", default)]
                        pub body: ports::GetKorrekturVorschlagEinheitGasVerbraucherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagEinheitGasVerbraucherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagEinheitGasVerbraucherRequest,
        }
        
        impl GetKorrekturVorschlagEinheitGasVerbraucherRequestSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagEinheitGasVerbraucherRequest) -> Self {
                GetKorrekturVorschlagEinheitGasVerbraucherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagEinheitGasVerbraucherResponse {
                    #[yaserde(rename = "GetKorrekturVorschlagEinheitGasVerbraucherResponse", default)]
                    pub body: ports::GetKorrekturVorschlagEinheitGasVerbraucherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagEinheitGasVerbraucherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagEinheitGasVerbraucherResponse,
        }
        
        impl GetKorrekturVorschlagEinheitGasVerbraucherResponseSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagEinheitGasVerbraucherResponse) -> Self {
                GetKorrekturVorschlagEinheitGasVerbraucherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagEinheitStromSpeicherRequest {
                        #[yaserde(rename = "GetKorrekturVorschlagEinheitStromSpeicher", default)]
                        pub body: ports::GetKorrekturVorschlagEinheitStromSpeicherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagEinheitStromSpeicherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagEinheitStromSpeicherRequest,
        }
        
        impl GetKorrekturVorschlagEinheitStromSpeicherRequestSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagEinheitStromSpeicherRequest) -> Self {
                GetKorrekturVorschlagEinheitStromSpeicherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagEinheitStromSpeicherResponse {
                    #[yaserde(rename = "GetKorrekturVorschlagEinheitStromSpeicherResponse", default)]
                    pub body: ports::GetKorrekturVorschlagEinheitStromSpeicherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagEinheitStromSpeicherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagEinheitStromSpeicherResponse,
        }
        
        impl GetKorrekturVorschlagEinheitStromSpeicherResponseSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagEinheitStromSpeicherResponse) -> Self {
                GetKorrekturVorschlagEinheitStromSpeicherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagEinheitGasSpeicherRequest {
                        #[yaserde(rename = "GetKorrekturVorschlagEinheitGasSpeicher", default)]
                        pub body: ports::GetKorrekturVorschlagEinheitGasSpeicherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagEinheitGasSpeicherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagEinheitGasSpeicherRequest,
        }
        
        impl GetKorrekturVorschlagEinheitGasSpeicherRequestSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagEinheitGasSpeicherRequest) -> Self {
                GetKorrekturVorschlagEinheitGasSpeicherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagEinheitGasSpeicherResponse {
                    #[yaserde(rename = "GetKorrekturVorschlagEinheitGasSpeicherResponse", default)]
                    pub body: ports::GetKorrekturVorschlagEinheitGasSpeicherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagEinheitGasSpeicherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagEinheitGasSpeicherResponse,
        }
        
        impl GetKorrekturVorschlagEinheitGasSpeicherResponseSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagEinheitGasSpeicherResponse) -> Self {
                GetKorrekturVorschlagEinheitGasSpeicherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapDeleteKorrekturvorschlagRequest {
                        #[yaserde(rename = "DeleteKorrekturvorschlag", default)]
                        pub body: ports::DeleteKorrekturvorschlagRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct DeleteKorrekturvorschlagRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapDeleteKorrekturvorschlagRequest,
        }
        
        impl DeleteKorrekturvorschlagRequestSoapEnvelope {
            pub fn new(body: SoapDeleteKorrekturvorschlagRequest) -> Self {
                DeleteKorrekturvorschlagRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapDeleteKorrekturvorschlagResponse {
                    #[yaserde(rename = "DeleteKorrekturvorschlagResponse", default)]
                    pub body: ports::DeleteKorrekturvorschlagResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct DeleteKorrekturvorschlagResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapDeleteKorrekturvorschlagResponse,
        }
        
        impl DeleteKorrekturvorschlagResponseSoapEnvelope {
            pub fn new(body: SoapDeleteKorrekturvorschlagResponse) -> Self {
                DeleteKorrekturvorschlagResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                impl Default for Netzbetreiberpruefung {
                fn default() -> Self {
                    Netzbetreiberpruefung {
                        client: reqwest::Client::new(),
                        url: "https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string(),
                        credentials: Option::None,
                     }
                }
            }
            impl Netzbetreiberpruefung {
                pub fn new(url: &str, credentials: Option<(String,String)>) -> Self {
                    Netzbetreiberpruefung {
                        client: reqwest::Client::new(),
                        url: url.to_string(),
                        credentials,
                    }
                }
        }
        pub struct Netzbetreiberpruefung {
                client: reqwest::Client,
                url: String,
                credentials: Option<(String,String)>
                }
                #[async_trait]
	impl ports::Netzbetreiberpruefung for Netzbetreiberpruefung {
	async fn get_liste_meine_netzbetreiberpruefungen (&self, get_liste_meine_netzbetreiberpruefungen_request: ports::GetListeMeineNetzbetreiberpruefungenRequest) -> Result<ports::GetListeMeineNetzbetreiberpruefungenResponse, Option<SoapFault>> {

        let __request = GetListeMeineNetzbetreiberpruefungenRequestSoapEnvelope::new(SoapGetListeMeineNetzbetreiberpruefungenRequest {
            body: get_liste_meine_netzbetreiberpruefungen_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeMeineNetzbetreiberpruefungen")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeMeineNetzbetreiberpruefungenResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn erneute_netzbetreiberpruefung_starten (&self, erneute_netzbetreiberpruefung_starten_request: ports::ErneuteNetzbetreiberpruefungStartenRequest) -> Result<ports::ErneuteNetzbetreiberpruefungStartenResponse, Option<SoapFault>> {

        let __request = ErneuteNetzbetreiberpruefungStartenRequestSoapEnvelope::new(SoapErneuteNetzbetreiberpruefungStartenRequest {
            body: erneute_netzbetreiberpruefung_starten_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "ErneuteNetzbetreiberpruefungStarten")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: ErneuteNetzbetreiberpruefungStartenResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn verschiebe_einheit_zu_anderer_lokation (&self, verschiebe_einheit_zu_anderer_lokation_request: ports::VerschiebeEinheitZuAndererLokationRequest) -> Result<ports::VerschiebeEinheitZuAndererLokationResponse, Option<SoapFault>> {

        let __request = VerschiebeEinheitZuAndererLokationRequestSoapEnvelope::new(SoapVerschiebeEinheitZuAndererLokationRequest {
            body: verschiebe_einheit_zu_anderer_lokation_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "VerschiebeEinheitZuAndererLokation")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: VerschiebeEinheitZuAndererLokationResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn verschiebe_einheit_zu_neuer_lokation (&self, verschiebe_einheit_zu_neuer_lokation_request: ports::VerschiebeEinheitZuNeuerLokationRequest) -> Result<ports::VerschiebeEinheitZuNeuerLokationResponse, Option<SoapFault>> {

        let __request = VerschiebeEinheitZuNeuerLokationRequestSoapEnvelope::new(SoapVerschiebeEinheitZuNeuerLokationRequest {
            body: verschiebe_einheit_zu_neuer_lokation_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "VerschiebeEinheitZuNeuerLokation")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: VerschiebeEinheitZuNeuerLokationResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_netzbetreiberpruefung_abgeschlossen (&self, set_netzbetreiberpruefung_abgeschlossen_request: ports::SetNetzbetreiberpruefungAbgeschlossenRequest) -> Result<ports::SetNetzbetreiberpruefungAbgeschlossenResponse, Option<SoapFault>> {

        let __request = SetNetzbetreiberpruefungAbgeschlossenRequestSoapEnvelope::new(SoapSetNetzbetreiberpruefungAbgeschlossenRequest {
            body: set_netzbetreiberpruefung_abgeschlossen_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetNetzbetreiberpruefungAbgeschlossen")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetNetzbetreiberpruefungAbgeschlossenResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_datenkorrektur_erforderlich (&self, set_datenkorrektur_erforderlich_request: ports::SetDatenkorrekturErforderlichRequest) -> Result<ports::SetDatenkorrekturErforderlichResponse, Option<SoapFault>> {

        let __request = SetDatenkorrekturErforderlichRequestSoapEnvelope::new(SoapSetDatenkorrekturErforderlichRequest {
            body: set_datenkorrektur_erforderlich_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetDatenkorrekturErforderlich")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetDatenkorrekturErforderlichResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_netzbetreiber_nicht_zustaendig (&self, set_netzbetreiber_nicht_zustaendig_request: ports::SetNetzbetreiberNichtZustaendigRequest) -> Result<ports::SetNetzbetreiberNichtZustaendigResponse, Option<SoapFault>> {

        let __request = SetNetzbetreiberNichtZustaendigRequestSoapEnvelope::new(SoapSetNetzbetreiberNichtZustaendigRequest {
            body: set_netzbetreiber_nicht_zustaendig_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetNetzbetreiberNichtZustaendig")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetNetzbetreiberNichtZustaendigResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_stilllegung_abgelehnt (&self, set_stilllegung_abgelehnt_request: ports::SetStilllegungAbgelehntRequest) -> Result<ports::SetStilllegungAbgelehntResponse, Option<SoapFault>> {

        let __request = SetStilllegungAbgelehntRequestSoapEnvelope::new(SoapSetStilllegungAbgelehntRequest {
            body: set_stilllegung_abgelehnt_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetStilllegungAbgelehnt")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetStilllegungAbgelehntResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_antrag_auf_fristverlaengerung (&self, set_antrag_auf_fristverlaengerung_request: ports::SetAntragAufFristverlaengerungRequest) -> Result<ports::SetAntragAufFristverlaengerungResponse, Option<SoapFault>> {

        let __request = SetAntragAufFristverlaengerungRequestSoapEnvelope::new(SoapSetAntragAufFristverlaengerungRequest {
            body: set_antrag_auf_fristverlaengerung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetAntragAufFristverlaengerung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetAntragAufFristverlaengerungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn ruecknahme_fristverlaengerung (&self, ruecknahme_fristverlaengerung_request: ports::RuecknahmeFristverlaengerungRequest) -> Result<ports::RuecknahmeFristverlaengerungResponse, Option<SoapFault>> {

        let __request = RuecknahmeFristverlaengerungRequestSoapEnvelope::new(SoapRuecknahmeFristverlaengerungRequest {
            body: ruecknahme_fristverlaengerung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "RuecknahmeFristverlaengerung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: RuecknahmeFristverlaengerungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_klaerung_erforderlich (&self, set_klaerung_erforderlich_request: ports::SetKlaerungErforderlichRequest) -> Result<ports::SetKlaerungErforderlichResponse, Option<SoapFault>> {

        let __request = SetKlaerungErforderlichRequestSoapEnvelope::new(SoapSetKlaerungErforderlichRequest {
            body: set_klaerung_erforderlich_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKlaerungErforderlich")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKlaerungErforderlichResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_betriebsstatus (&self, set_korrektur_betriebsstatus_request: ports::SetKorrekturBetriebsstatusRequest) -> Result<ports::SetKorrekturBetriebsstatusResponse, Option<SoapFault>> {

        let __request = SetKorrekturBetriebsstatusRequestSoapEnvelope::new(SoapSetKorrekturBetriebsstatusRequest {
            body: set_korrektur_betriebsstatus_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturBetriebsstatus")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturBetriebsstatusResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_betriebsstatus (&self, get_korrektur_vorschlag_betriebsstatus_request: ports::GetKorrekturVorschlagBetriebsstatusRequest) -> Result<ports::GetKorrekturVorschlagBetriebsstatusResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagBetriebsstatusRequestSoapEnvelope::new(SoapGetKorrekturVorschlagBetriebsstatusRequest {
            body: get_korrektur_vorschlag_betriebsstatus_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagBetriebsstatus")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagBetriebsstatusResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_wiedervorlage_vorschlag_betriebsstatus (&self, get_wiedervorlage_vorschlag_betriebsstatus_request: ports::GetWiedervorlageVorschlagBetriebsstatusRequest) -> Result<ports::GetWiedervorlageVorschlagBetriebsstatusResponse, Option<SoapFault>> {

        let __request = GetWiedervorlageVorschlagBetriebsstatusRequestSoapEnvelope::new(SoapGetWiedervorlageVorschlagBetriebsstatusRequest {
            body: get_wiedervorlage_vorschlag_betriebsstatus_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetWiedervorlageVorschlagBetriebsstatus")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetWiedervorlageVorschlagBetriebsstatusResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_betriebsstatus_abgeschlossen (&self, set_korrektur_betriebsstatus_abgeschlossen_request: ports::SetKorrekturBetriebsstatusAbgeschlossenRequest) -> Result<ports::SetKorrekturBetriebsstatusAbgeschlossenResponse, Option<SoapFault>> {

        let __request = SetKorrekturBetriebsstatusAbgeschlossenRequestSoapEnvelope::new(SoapSetKorrekturBetriebsstatusAbgeschlossenRequest {
            body: set_korrektur_betriebsstatus_abgeschlossen_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturBetriebsstatusAbgeschlossen")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturBetriebsstatusAbgeschlossenResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_eeg_anlagenschluessel (&self, set_eeg_anlagenschluessel_request: ports::SetEegAnlagenschluesselRequest) -> Result<ports::SetEegAnlagenschluesselResponse, Option<SoapFault>> {

        let __request = SetEegAnlagenschluesselRequestSoapEnvelope::new(SoapSetEegAnlagenschluesselRequest {
            body: set_eeg_anlagenschluessel_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetEegAnlagenschluessel")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetEegAnlagenschluesselResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_vorschlag_einheit_wind (&self, set_korrektur_vorschlag_einheit_wind_request: ports::SetKorrekturVorschlagEinheitWindRequest) -> Result<ports::SetKorrekturVorschlagEinheitWindResponse, Option<SoapFault>> {

        let __request = SetKorrekturVorschlagEinheitWindRequestSoapEnvelope::new(SoapSetKorrekturVorschlagEinheitWindRequest {
            body: set_korrektur_vorschlag_einheit_wind_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturVorschlagEinheitWind")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturVorschlagEinheitWindResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_vorschlag_einheit_anlagenbetreiber (&self, set_korrektur_vorschlag_einheit_anlagenbetreiber_request: ports::SetKorrekturVorschlagEinheitAnlagenbetreiberRequest) -> Result<ports::SetKorrekturVorschlagEinheitAnlagenbetreiberResponse, Option<SoapFault>> {

        let __request = SetKorrekturVorschlagEinheitAnlagenbetreiberRequestSoapEnvelope::new(SoapSetKorrekturVorschlagEinheitAnlagenbetreiberRequest {
            body: set_korrektur_vorschlag_einheit_anlagenbetreiber_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturVorschlagEinheitAnlagenbetreiber")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturVorschlagEinheitAnlagenbetreiberResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_vorschlag_einheit_solar (&self, set_korrektur_vorschlag_einheit_solar_request: ports::SetKorrekturVorschlagEinheitSolarRequest) -> Result<ports::SetKorrekturVorschlagEinheitSolarResponse, Option<SoapFault>> {

        let __request = SetKorrekturVorschlagEinheitSolarRequestSoapEnvelope::new(SoapSetKorrekturVorschlagEinheitSolarRequest {
            body: set_korrektur_vorschlag_einheit_solar_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturVorschlagEinheitSolar")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturVorschlagEinheitSolarResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_vorschlag_einheit_biomasse (&self, set_korrektur_vorschlag_einheit_biomasse_request: ports::SetKorrekturVorschlagEinheitBiomasseRequest) -> Result<ports::SetKorrekturVorschlagEinheitBiomasseResponse, Option<SoapFault>> {

        let __request = SetKorrekturVorschlagEinheitBiomasseRequestSoapEnvelope::new(SoapSetKorrekturVorschlagEinheitBiomasseRequest {
            body: set_korrektur_vorschlag_einheit_biomasse_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturVorschlagEinheitBiomasse")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturVorschlagEinheitBiomasseResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_vorschlag_einheit_wasser (&self, set_korrektur_vorschlag_einheit_wasser_request: ports::SetKorrekturVorschlagEinheitWasserRequest) -> Result<ports::SetKorrekturVorschlagEinheitWasserResponse, Option<SoapFault>> {

        let __request = SetKorrekturVorschlagEinheitWasserRequestSoapEnvelope::new(SoapSetKorrekturVorschlagEinheitWasserRequest {
            body: set_korrektur_vorschlag_einheit_wasser_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturVorschlagEinheitWasser")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturVorschlagEinheitWasserResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_vorschlag_einheit_geothermie_grubengas_druckentspannung (&self, set_korrektur_vorschlag_einheit_geothermie_grubengas_druckentspannung_request: ports::SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest) -> Result<ports::SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse, Option<SoapFault>> {

        let __request = SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequestSoapEnvelope::new(SoapSetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest {
            body: set_korrektur_vorschlag_einheit_geothermie_grubengas_druckentspannung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_vorschlag_einheit_verbrennung (&self, set_korrektur_vorschlag_einheit_verbrennung_request: ports::SetKorrekturVorschlagEinheitVerbrennungRequest) -> Result<ports::SetKorrekturVorschlagEinheitVerbrennungResponse, Option<SoapFault>> {

        let __request = SetKorrekturVorschlagEinheitVerbrennungRequestSoapEnvelope::new(SoapSetKorrekturVorschlagEinheitVerbrennungRequest {
            body: set_korrektur_vorschlag_einheit_verbrennung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturVorschlagEinheitVerbrennung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturVorschlagEinheitVerbrennungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_vorschlag_einheit_gas_speicher (&self, set_korrektur_vorschlag_einheit_gas_speicher_request: ports::SetKorrekturVorschlagEinheitGasSpeicherRequest) -> Result<ports::SetKorrekturVorschlagEinheitGasSpeicherResponse, Option<SoapFault>> {

        let __request = SetKorrekturVorschlagEinheitGasSpeicherRequestSoapEnvelope::new(SoapSetKorrekturVorschlagEinheitGasSpeicherRequest {
            body: set_korrektur_vorschlag_einheit_gas_speicher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturVorschlagEinheitGasSpeicher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturVorschlagEinheitGasSpeicherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_vorschlag_einheit_strom_verbraucher (&self, set_korrektur_vorschlag_einheit_strom_verbraucher_request: ports::SetKorrekturVorschlagEinheitStromVerbraucherRequest) -> Result<ports::SetKorrekturVorschlagEinheitStromVerbraucherResponse, Option<SoapFault>> {

        let __request = SetKorrekturVorschlagEinheitStromVerbraucherRequestSoapEnvelope::new(SoapSetKorrekturVorschlagEinheitStromVerbraucherRequest {
            body: set_korrektur_vorschlag_einheit_strom_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturVorschlagEinheitStromVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturVorschlagEinheitStromVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_vorschlag_einheit_gas_erzeuger (&self, set_korrektur_vorschlag_einheit_gas_erzeuger_request: ports::SetKorrekturVorschlagEinheitGasErzeugerRequest) -> Result<ports::SetKorrekturVorschlagEinheitGasErzeugerResponse, Option<SoapFault>> {

        let __request = SetKorrekturVorschlagEinheitGasErzeugerRequestSoapEnvelope::new(SoapSetKorrekturVorschlagEinheitGasErzeugerRequest {
            body: set_korrektur_vorschlag_einheit_gas_erzeuger_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturVorschlagEinheitGasErzeuger")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturVorschlagEinheitGasErzeugerResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_vorschlag_einheit_gas_verbraucher (&self, set_korrektur_vorschlag_einheit_gas_verbraucher_request: ports::SetKorrekturVorschlagEinheitGasVerbraucherRequest) -> Result<ports::SetKorrekturVorschlagEinheitGasVerbraucherResponse, Option<SoapFault>> {

        let __request = SetKorrekturVorschlagEinheitGasVerbraucherRequestSoapEnvelope::new(SoapSetKorrekturVorschlagEinheitGasVerbraucherRequest {
            body: set_korrektur_vorschlag_einheit_gas_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturVorschlagEinheitGasVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturVorschlagEinheitGasVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_vorschlag_einheit_strom_speicher (&self, set_korrektur_vorschlag_einheit_strom_speicher_request: ports::SetKorrekturVorschlagEinheitStromSpeicherRequest) -> Result<ports::SetKorrekturVorschlagEinheitStromSpeicherResponse, Option<SoapFault>> {

        let __request = SetKorrekturVorschlagEinheitStromSpeicherRequestSoapEnvelope::new(SoapSetKorrekturVorschlagEinheitStromSpeicherRequest {
            body: set_korrektur_vorschlag_einheit_strom_speicher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturVorschlagEinheitStromSpeicher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturVorschlagEinheitStromSpeicherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_einheit_wind (&self, get_korrektur_vorschlag_einheit_wind_request: ports::GetKorrekturVorschlagEinheitWindRequest) -> Result<ports::GetKorrekturVorschlagEinheitWindResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagEinheitWindRequestSoapEnvelope::new(SoapGetKorrekturVorschlagEinheitWindRequest {
            body: get_korrektur_vorschlag_einheit_wind_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagEinheitWind")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagEinheitWindResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_einheit_anlagenbetreiber (&self, get_korrektur_vorschlag_einheit_anlagenbetreiber_request: ports::GetKorrekturVorschlagEinheitAnlagenbetreiberRequest) -> Result<ports::GetKorrekturVorschlagEinheitAnlagenbetreiberResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagEinheitAnlagenbetreiberRequestSoapEnvelope::new(SoapGetKorrekturVorschlagEinheitAnlagenbetreiberRequest {
            body: get_korrektur_vorschlag_einheit_anlagenbetreiber_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagEinheitAnlagenbetreiber")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagEinheitAnlagenbetreiberResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_einheit_solar (&self, get_korrektur_vorschlag_einheit_solar_request: ports::GetKorrekturVorschlagEinheitSolarRequest) -> Result<ports::GetKorrekturVorschlagEinheitSolarResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagEinheitSolarRequestSoapEnvelope::new(SoapGetKorrekturVorschlagEinheitSolarRequest {
            body: get_korrektur_vorschlag_einheit_solar_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagEinheitSolar")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagEinheitSolarResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_einheit_biomasse (&self, get_korrektur_vorschlag_einheit_biomasse_request: ports::GetKorrekturVorschlagEinheitBiomasseRequest) -> Result<ports::GetKorrekturVorschlagEinheitBiomasseResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagEinheitBiomasseRequestSoapEnvelope::new(SoapGetKorrekturVorschlagEinheitBiomasseRequest {
            body: get_korrektur_vorschlag_einheit_biomasse_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagEinheitBiomasse")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagEinheitBiomasseResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_einheit_wasser (&self, get_korrektur_vorschlag_einheit_wasser_request: ports::GetKorrekturVorschlagEinheitWasserRequest) -> Result<ports::GetKorrekturVorschlagEinheitWasserResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagEinheitWasserRequestSoapEnvelope::new(SoapGetKorrekturVorschlagEinheitWasserRequest {
            body: get_korrektur_vorschlag_einheit_wasser_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagEinheitWasser")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagEinheitWasserResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_einheit_geothermie_grubengas_druckentspannung (&self, get_korrektur_vorschlag_einheit_geothermie_grubengas_druckentspannung_request: ports::GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest) -> Result<ports::GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequestSoapEnvelope::new(SoapGetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest {
            body: get_korrektur_vorschlag_einheit_geothermie_grubengas_druckentspannung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_einheit_verbrennung (&self, get_korrektur_vorschlag_einheit_verbrennung_request: ports::GetKorrekturVorschlagEinheitVerbrennungRequest) -> Result<ports::GetKorrekturVorschlagEinheitVerbrennungResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagEinheitVerbrennungRequestSoapEnvelope::new(SoapGetKorrekturVorschlagEinheitVerbrennungRequest {
            body: get_korrektur_vorschlag_einheit_verbrennung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagEinheitVerbrennung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagEinheitVerbrennungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_einheit_strom_verbraucher (&self, get_korrektur_vorschlag_einheit_strom_verbraucher_request: ports::GetKorrekturVorschlagEinheitStromVerbraucherRequest) -> Result<ports::GetKorrekturVorschlagEinheitStromVerbraucherResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagEinheitStromVerbraucherRequestSoapEnvelope::new(SoapGetKorrekturVorschlagEinheitStromVerbraucherRequest {
            body: get_korrektur_vorschlag_einheit_strom_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagEinheitStromVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagEinheitStromVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_einheit_gas_erzeuger (&self, get_korrektur_vorschlag_einheit_gas_erzeuger_request: ports::GetKorrekturVorschlagEinheitGasErzeugerRequest) -> Result<ports::GetKorrekturVorschlagEinheitGasErzeugerResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagEinheitGasErzeugerRequestSoapEnvelope::new(SoapGetKorrekturVorschlagEinheitGasErzeugerRequest {
            body: get_korrektur_vorschlag_einheit_gas_erzeuger_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagEinheitGasErzeuger")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagEinheitGasErzeugerResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_einheit_gas_verbraucher (&self, get_korrektur_vorschlag_einheit_gas_verbraucher_request: ports::GetKorrekturVorschlagEinheitGasVerbraucherRequest) -> Result<ports::GetKorrekturVorschlagEinheitGasVerbraucherResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagEinheitGasVerbraucherRequestSoapEnvelope::new(SoapGetKorrekturVorschlagEinheitGasVerbraucherRequest {
            body: get_korrektur_vorschlag_einheit_gas_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagEinheitGasVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagEinheitGasVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_einheit_strom_speicher (&self, get_korrektur_vorschlag_einheit_strom_speicher_request: ports::GetKorrekturVorschlagEinheitStromSpeicherRequest) -> Result<ports::GetKorrekturVorschlagEinheitStromSpeicherResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagEinheitStromSpeicherRequestSoapEnvelope::new(SoapGetKorrekturVorschlagEinheitStromSpeicherRequest {
            body: get_korrektur_vorschlag_einheit_strom_speicher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagEinheitStromSpeicher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagEinheitStromSpeicherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_einheit_gas_speicher (&self, get_korrektur_vorschlag_einheit_gas_speicher_request: ports::GetKorrekturVorschlagEinheitGasSpeicherRequest) -> Result<ports::GetKorrekturVorschlagEinheitGasSpeicherResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagEinheitGasSpeicherRequestSoapEnvelope::new(SoapGetKorrekturVorschlagEinheitGasSpeicherRequest {
            body: get_korrektur_vorschlag_einheit_gas_speicher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagEinheitGasSpeicher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagEinheitGasSpeicherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn delete_korrekturvorschlag (&self, delete_korrekturvorschlag_request: ports::DeleteKorrekturvorschlagRequest) -> Result<ports::DeleteKorrekturvorschlagResponse, Option<SoapFault>> {

        let __request = DeleteKorrekturvorschlagRequestSoapEnvelope::new(SoapDeleteKorrekturvorschlagRequest {
            body: delete_korrekturvorschlag_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "DeleteKorrekturvorschlag")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: DeleteKorrekturvorschlagResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}}

            impl Netzbetreiberpruefung12 {
                async fn send_soap_request<T: YaSerialize>(&self, request: &T, action: &str) -> SoapResponse {
                    let body = to_string(request).expect("failed to generate xml");
                    debug!("SOAP Request: {}", body);
                    let mut req = self
                        .client
                        .post(&self.url)
                        .body(body)
                        .header("Content-Type", "text/xml")
                        .header("Soapaction", action);
                    if let Some(credentials) = &self.credentials {
                        req = req.basic_auth(
                            credentials.0.to_string(),
                            Option::Some(credentials.1.to_string()),
                        );
                    }
                    let res = req.send().await?;
                    let status = res.status();
                    debug!("SOAP Status: {}", status);
                    let txt = res.text().await.unwrap_or_default();
                    debug!("SOAP Response: {}", txt);
                    Ok((status, txt))
                }
            }
            impl Default for Netzbetreiberpruefung12 {
                fn default() -> Self {
                    Netzbetreiberpruefung12 {
                        client: reqwest::Client::new(),
                        url: "https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string(),
                        credentials: Option::None,
                     }
                }
            }
            impl Netzbetreiberpruefung12 {
                pub fn new(url: &str, credentials: Option<(String,String)>) -> Self {
                    Netzbetreiberpruefung12 {
                        client: reqwest::Client::new(),
                        url: url.to_string(),
                        credentials,
                    }
                }
        }
        pub struct Netzbetreiberpruefung12 {
                client: reqwest::Client,
                url: String,
                credentials: Option<(String,String)>
                }
                #[async_trait]
	impl ports::Netzbetreiberpruefung for Netzbetreiberpruefung12 {
	async fn get_liste_meine_netzbetreiberpruefungen (&self, get_liste_meine_netzbetreiberpruefungen_request: ports::GetListeMeineNetzbetreiberpruefungenRequest) -> Result<ports::GetListeMeineNetzbetreiberpruefungenResponse, Option<SoapFault>> {

        let __request = GetListeMeineNetzbetreiberpruefungenRequestSoapEnvelope::new(SoapGetListeMeineNetzbetreiberpruefungenRequest {
            body: get_liste_meine_netzbetreiberpruefungen_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeMeineNetzbetreiberpruefungen")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeMeineNetzbetreiberpruefungenResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn erneute_netzbetreiberpruefung_starten (&self, erneute_netzbetreiberpruefung_starten_request: ports::ErneuteNetzbetreiberpruefungStartenRequest) -> Result<ports::ErneuteNetzbetreiberpruefungStartenResponse, Option<SoapFault>> {

        let __request = ErneuteNetzbetreiberpruefungStartenRequestSoapEnvelope::new(SoapErneuteNetzbetreiberpruefungStartenRequest {
            body: erneute_netzbetreiberpruefung_starten_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "ErneuteNetzbetreiberpruefungStarten")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: ErneuteNetzbetreiberpruefungStartenResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn verschiebe_einheit_zu_anderer_lokation (&self, verschiebe_einheit_zu_anderer_lokation_request: ports::VerschiebeEinheitZuAndererLokationRequest) -> Result<ports::VerschiebeEinheitZuAndererLokationResponse, Option<SoapFault>> {

        let __request = VerschiebeEinheitZuAndererLokationRequestSoapEnvelope::new(SoapVerschiebeEinheitZuAndererLokationRequest {
            body: verschiebe_einheit_zu_anderer_lokation_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "VerschiebeEinheitZuAndererLokation")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: VerschiebeEinheitZuAndererLokationResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn verschiebe_einheit_zu_neuer_lokation (&self, verschiebe_einheit_zu_neuer_lokation_request: ports::VerschiebeEinheitZuNeuerLokationRequest) -> Result<ports::VerschiebeEinheitZuNeuerLokationResponse, Option<SoapFault>> {

        let __request = VerschiebeEinheitZuNeuerLokationRequestSoapEnvelope::new(SoapVerschiebeEinheitZuNeuerLokationRequest {
            body: verschiebe_einheit_zu_neuer_lokation_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "VerschiebeEinheitZuNeuerLokation")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: VerschiebeEinheitZuNeuerLokationResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_netzbetreiberpruefung_abgeschlossen (&self, set_netzbetreiberpruefung_abgeschlossen_request: ports::SetNetzbetreiberpruefungAbgeschlossenRequest) -> Result<ports::SetNetzbetreiberpruefungAbgeschlossenResponse, Option<SoapFault>> {

        let __request = SetNetzbetreiberpruefungAbgeschlossenRequestSoapEnvelope::new(SoapSetNetzbetreiberpruefungAbgeschlossenRequest {
            body: set_netzbetreiberpruefung_abgeschlossen_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetNetzbetreiberpruefungAbgeschlossen")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetNetzbetreiberpruefungAbgeschlossenResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_datenkorrektur_erforderlich (&self, set_datenkorrektur_erforderlich_request: ports::SetDatenkorrekturErforderlichRequest) -> Result<ports::SetDatenkorrekturErforderlichResponse, Option<SoapFault>> {

        let __request = SetDatenkorrekturErforderlichRequestSoapEnvelope::new(SoapSetDatenkorrekturErforderlichRequest {
            body: set_datenkorrektur_erforderlich_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetDatenkorrekturErforderlich")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetDatenkorrekturErforderlichResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_netzbetreiber_nicht_zustaendig (&self, set_netzbetreiber_nicht_zustaendig_request: ports::SetNetzbetreiberNichtZustaendigRequest) -> Result<ports::SetNetzbetreiberNichtZustaendigResponse, Option<SoapFault>> {

        let __request = SetNetzbetreiberNichtZustaendigRequestSoapEnvelope::new(SoapSetNetzbetreiberNichtZustaendigRequest {
            body: set_netzbetreiber_nicht_zustaendig_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetNetzbetreiberNichtZustaendig")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetNetzbetreiberNichtZustaendigResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_stilllegung_abgelehnt (&self, set_stilllegung_abgelehnt_request: ports::SetStilllegungAbgelehntRequest) -> Result<ports::SetStilllegungAbgelehntResponse, Option<SoapFault>> {

        let __request = SetStilllegungAbgelehntRequestSoapEnvelope::new(SoapSetStilllegungAbgelehntRequest {
            body: set_stilllegung_abgelehnt_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetStilllegungAbgelehnt")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetStilllegungAbgelehntResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_antrag_auf_fristverlaengerung (&self, set_antrag_auf_fristverlaengerung_request: ports::SetAntragAufFristverlaengerungRequest) -> Result<ports::SetAntragAufFristverlaengerungResponse, Option<SoapFault>> {

        let __request = SetAntragAufFristverlaengerungRequestSoapEnvelope::new(SoapSetAntragAufFristverlaengerungRequest {
            body: set_antrag_auf_fristverlaengerung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetAntragAufFristverlaengerung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetAntragAufFristverlaengerungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn ruecknahme_fristverlaengerung (&self, ruecknahme_fristverlaengerung_request: ports::RuecknahmeFristverlaengerungRequest) -> Result<ports::RuecknahmeFristverlaengerungResponse, Option<SoapFault>> {

        let __request = RuecknahmeFristverlaengerungRequestSoapEnvelope::new(SoapRuecknahmeFristverlaengerungRequest {
            body: ruecknahme_fristverlaengerung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "RuecknahmeFristverlaengerung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: RuecknahmeFristverlaengerungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_klaerung_erforderlich (&self, set_klaerung_erforderlich_request: ports::SetKlaerungErforderlichRequest) -> Result<ports::SetKlaerungErforderlichResponse, Option<SoapFault>> {

        let __request = SetKlaerungErforderlichRequestSoapEnvelope::new(SoapSetKlaerungErforderlichRequest {
            body: set_klaerung_erforderlich_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKlaerungErforderlich")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKlaerungErforderlichResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_betriebsstatus (&self, set_korrektur_betriebsstatus_request: ports::SetKorrekturBetriebsstatusRequest) -> Result<ports::SetKorrekturBetriebsstatusResponse, Option<SoapFault>> {

        let __request = SetKorrekturBetriebsstatusRequestSoapEnvelope::new(SoapSetKorrekturBetriebsstatusRequest {
            body: set_korrektur_betriebsstatus_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturBetriebsstatus")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturBetriebsstatusResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_betriebsstatus (&self, get_korrektur_vorschlag_betriebsstatus_request: ports::GetKorrekturVorschlagBetriebsstatusRequest) -> Result<ports::GetKorrekturVorschlagBetriebsstatusResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagBetriebsstatusRequestSoapEnvelope::new(SoapGetKorrekturVorschlagBetriebsstatusRequest {
            body: get_korrektur_vorschlag_betriebsstatus_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagBetriebsstatus")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagBetriebsstatusResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_wiedervorlage_vorschlag_betriebsstatus (&self, get_wiedervorlage_vorschlag_betriebsstatus_request: ports::GetWiedervorlageVorschlagBetriebsstatusRequest) -> Result<ports::GetWiedervorlageVorschlagBetriebsstatusResponse, Option<SoapFault>> {

        let __request = GetWiedervorlageVorschlagBetriebsstatusRequestSoapEnvelope::new(SoapGetWiedervorlageVorschlagBetriebsstatusRequest {
            body: get_wiedervorlage_vorschlag_betriebsstatus_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetWiedervorlageVorschlagBetriebsstatus")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetWiedervorlageVorschlagBetriebsstatusResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_betriebsstatus_abgeschlossen (&self, set_korrektur_betriebsstatus_abgeschlossen_request: ports::SetKorrekturBetriebsstatusAbgeschlossenRequest) -> Result<ports::SetKorrekturBetriebsstatusAbgeschlossenResponse, Option<SoapFault>> {

        let __request = SetKorrekturBetriebsstatusAbgeschlossenRequestSoapEnvelope::new(SoapSetKorrekturBetriebsstatusAbgeschlossenRequest {
            body: set_korrektur_betriebsstatus_abgeschlossen_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturBetriebsstatusAbgeschlossen")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturBetriebsstatusAbgeschlossenResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_eeg_anlagenschluessel (&self, set_eeg_anlagenschluessel_request: ports::SetEegAnlagenschluesselRequest) -> Result<ports::SetEegAnlagenschluesselResponse, Option<SoapFault>> {

        let __request = SetEegAnlagenschluesselRequestSoapEnvelope::new(SoapSetEegAnlagenschluesselRequest {
            body: set_eeg_anlagenschluessel_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetEegAnlagenschluessel")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetEegAnlagenschluesselResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_vorschlag_einheit_wind (&self, set_korrektur_vorschlag_einheit_wind_request: ports::SetKorrekturVorschlagEinheitWindRequest) -> Result<ports::SetKorrekturVorschlagEinheitWindResponse, Option<SoapFault>> {

        let __request = SetKorrekturVorschlagEinheitWindRequestSoapEnvelope::new(SoapSetKorrekturVorschlagEinheitWindRequest {
            body: set_korrektur_vorschlag_einheit_wind_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturVorschlagEinheitWind")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturVorschlagEinheitWindResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_vorschlag_einheit_anlagenbetreiber (&self, set_korrektur_vorschlag_einheit_anlagenbetreiber_request: ports::SetKorrekturVorschlagEinheitAnlagenbetreiberRequest) -> Result<ports::SetKorrekturVorschlagEinheitAnlagenbetreiberResponse, Option<SoapFault>> {

        let __request = SetKorrekturVorschlagEinheitAnlagenbetreiberRequestSoapEnvelope::new(SoapSetKorrekturVorschlagEinheitAnlagenbetreiberRequest {
            body: set_korrektur_vorschlag_einheit_anlagenbetreiber_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturVorschlagEinheitAnlagenbetreiber")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturVorschlagEinheitAnlagenbetreiberResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_vorschlag_einheit_solar (&self, set_korrektur_vorschlag_einheit_solar_request: ports::SetKorrekturVorschlagEinheitSolarRequest) -> Result<ports::SetKorrekturVorschlagEinheitSolarResponse, Option<SoapFault>> {

        let __request = SetKorrekturVorschlagEinheitSolarRequestSoapEnvelope::new(SoapSetKorrekturVorschlagEinheitSolarRequest {
            body: set_korrektur_vorschlag_einheit_solar_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturVorschlagEinheitSolar")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturVorschlagEinheitSolarResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_vorschlag_einheit_biomasse (&self, set_korrektur_vorschlag_einheit_biomasse_request: ports::SetKorrekturVorschlagEinheitBiomasseRequest) -> Result<ports::SetKorrekturVorschlagEinheitBiomasseResponse, Option<SoapFault>> {

        let __request = SetKorrekturVorschlagEinheitBiomasseRequestSoapEnvelope::new(SoapSetKorrekturVorschlagEinheitBiomasseRequest {
            body: set_korrektur_vorschlag_einheit_biomasse_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturVorschlagEinheitBiomasse")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturVorschlagEinheitBiomasseResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_vorschlag_einheit_wasser (&self, set_korrektur_vorschlag_einheit_wasser_request: ports::SetKorrekturVorschlagEinheitWasserRequest) -> Result<ports::SetKorrekturVorschlagEinheitWasserResponse, Option<SoapFault>> {

        let __request = SetKorrekturVorschlagEinheitWasserRequestSoapEnvelope::new(SoapSetKorrekturVorschlagEinheitWasserRequest {
            body: set_korrektur_vorschlag_einheit_wasser_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturVorschlagEinheitWasser")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturVorschlagEinheitWasserResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_vorschlag_einheit_geothermie_grubengas_druckentspannung (&self, set_korrektur_vorschlag_einheit_geothermie_grubengas_druckentspannung_request: ports::SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest) -> Result<ports::SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse, Option<SoapFault>> {

        let __request = SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequestSoapEnvelope::new(SoapSetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest {
            body: set_korrektur_vorschlag_einheit_geothermie_grubengas_druckentspannung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_vorschlag_einheit_verbrennung (&self, set_korrektur_vorschlag_einheit_verbrennung_request: ports::SetKorrekturVorschlagEinheitVerbrennungRequest) -> Result<ports::SetKorrekturVorschlagEinheitVerbrennungResponse, Option<SoapFault>> {

        let __request = SetKorrekturVorschlagEinheitVerbrennungRequestSoapEnvelope::new(SoapSetKorrekturVorschlagEinheitVerbrennungRequest {
            body: set_korrektur_vorschlag_einheit_verbrennung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturVorschlagEinheitVerbrennung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturVorschlagEinheitVerbrennungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_vorschlag_einheit_gas_speicher (&self, set_korrektur_vorschlag_einheit_gas_speicher_request: ports::SetKorrekturVorschlagEinheitGasSpeicherRequest) -> Result<ports::SetKorrekturVorschlagEinheitGasSpeicherResponse, Option<SoapFault>> {

        let __request = SetKorrekturVorschlagEinheitGasSpeicherRequestSoapEnvelope::new(SoapSetKorrekturVorschlagEinheitGasSpeicherRequest {
            body: set_korrektur_vorschlag_einheit_gas_speicher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturVorschlagEinheitGasSpeicher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturVorschlagEinheitGasSpeicherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_vorschlag_einheit_strom_verbraucher (&self, set_korrektur_vorschlag_einheit_strom_verbraucher_request: ports::SetKorrekturVorschlagEinheitStromVerbraucherRequest) -> Result<ports::SetKorrekturVorschlagEinheitStromVerbraucherResponse, Option<SoapFault>> {

        let __request = SetKorrekturVorschlagEinheitStromVerbraucherRequestSoapEnvelope::new(SoapSetKorrekturVorschlagEinheitStromVerbraucherRequest {
            body: set_korrektur_vorschlag_einheit_strom_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturVorschlagEinheitStromVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturVorschlagEinheitStromVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_vorschlag_einheit_gas_erzeuger (&self, set_korrektur_vorschlag_einheit_gas_erzeuger_request: ports::SetKorrekturVorschlagEinheitGasErzeugerRequest) -> Result<ports::SetKorrekturVorschlagEinheitGasErzeugerResponse, Option<SoapFault>> {

        let __request = SetKorrekturVorschlagEinheitGasErzeugerRequestSoapEnvelope::new(SoapSetKorrekturVorschlagEinheitGasErzeugerRequest {
            body: set_korrektur_vorschlag_einheit_gas_erzeuger_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturVorschlagEinheitGasErzeuger")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturVorschlagEinheitGasErzeugerResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_vorschlag_einheit_gas_verbraucher (&self, set_korrektur_vorschlag_einheit_gas_verbraucher_request: ports::SetKorrekturVorschlagEinheitGasVerbraucherRequest) -> Result<ports::SetKorrekturVorschlagEinheitGasVerbraucherResponse, Option<SoapFault>> {

        let __request = SetKorrekturVorschlagEinheitGasVerbraucherRequestSoapEnvelope::new(SoapSetKorrekturVorschlagEinheitGasVerbraucherRequest {
            body: set_korrektur_vorschlag_einheit_gas_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturVorschlagEinheitGasVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturVorschlagEinheitGasVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_korrektur_vorschlag_einheit_strom_speicher (&self, set_korrektur_vorschlag_einheit_strom_speicher_request: ports::SetKorrekturVorschlagEinheitStromSpeicherRequest) -> Result<ports::SetKorrekturVorschlagEinheitStromSpeicherResponse, Option<SoapFault>> {

        let __request = SetKorrekturVorschlagEinheitStromSpeicherRequestSoapEnvelope::new(SoapSetKorrekturVorschlagEinheitStromSpeicherRequest {
            body: set_korrektur_vorschlag_einheit_strom_speicher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetKorrekturVorschlagEinheitStromSpeicher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetKorrekturVorschlagEinheitStromSpeicherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_einheit_wind (&self, get_korrektur_vorschlag_einheit_wind_request: ports::GetKorrekturVorschlagEinheitWindRequest) -> Result<ports::GetKorrekturVorschlagEinheitWindResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagEinheitWindRequestSoapEnvelope::new(SoapGetKorrekturVorschlagEinheitWindRequest {
            body: get_korrektur_vorschlag_einheit_wind_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagEinheitWind")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagEinheitWindResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_einheit_anlagenbetreiber (&self, get_korrektur_vorschlag_einheit_anlagenbetreiber_request: ports::GetKorrekturVorschlagEinheitAnlagenbetreiberRequest) -> Result<ports::GetKorrekturVorschlagEinheitAnlagenbetreiberResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagEinheitAnlagenbetreiberRequestSoapEnvelope::new(SoapGetKorrekturVorschlagEinheitAnlagenbetreiberRequest {
            body: get_korrektur_vorschlag_einheit_anlagenbetreiber_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagEinheitAnlagenbetreiber")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagEinheitAnlagenbetreiberResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_einheit_solar (&self, get_korrektur_vorschlag_einheit_solar_request: ports::GetKorrekturVorschlagEinheitSolarRequest) -> Result<ports::GetKorrekturVorschlagEinheitSolarResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagEinheitSolarRequestSoapEnvelope::new(SoapGetKorrekturVorschlagEinheitSolarRequest {
            body: get_korrektur_vorschlag_einheit_solar_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagEinheitSolar")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagEinheitSolarResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_einheit_biomasse (&self, get_korrektur_vorschlag_einheit_biomasse_request: ports::GetKorrekturVorschlagEinheitBiomasseRequest) -> Result<ports::GetKorrekturVorschlagEinheitBiomasseResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagEinheitBiomasseRequestSoapEnvelope::new(SoapGetKorrekturVorschlagEinheitBiomasseRequest {
            body: get_korrektur_vorschlag_einheit_biomasse_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagEinheitBiomasse")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagEinheitBiomasseResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_einheit_wasser (&self, get_korrektur_vorschlag_einheit_wasser_request: ports::GetKorrekturVorschlagEinheitWasserRequest) -> Result<ports::GetKorrekturVorschlagEinheitWasserResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagEinheitWasserRequestSoapEnvelope::new(SoapGetKorrekturVorschlagEinheitWasserRequest {
            body: get_korrektur_vorschlag_einheit_wasser_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagEinheitWasser")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagEinheitWasserResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_einheit_geothermie_grubengas_druckentspannung (&self, get_korrektur_vorschlag_einheit_geothermie_grubengas_druckentspannung_request: ports::GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest) -> Result<ports::GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequestSoapEnvelope::new(SoapGetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest {
            body: get_korrektur_vorschlag_einheit_geothermie_grubengas_druckentspannung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_einheit_verbrennung (&self, get_korrektur_vorschlag_einheit_verbrennung_request: ports::GetKorrekturVorschlagEinheitVerbrennungRequest) -> Result<ports::GetKorrekturVorschlagEinheitVerbrennungResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagEinheitVerbrennungRequestSoapEnvelope::new(SoapGetKorrekturVorschlagEinheitVerbrennungRequest {
            body: get_korrektur_vorschlag_einheit_verbrennung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagEinheitVerbrennung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagEinheitVerbrennungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_einheit_strom_verbraucher (&self, get_korrektur_vorschlag_einheit_strom_verbraucher_request: ports::GetKorrekturVorschlagEinheitStromVerbraucherRequest) -> Result<ports::GetKorrekturVorschlagEinheitStromVerbraucherResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagEinheitStromVerbraucherRequestSoapEnvelope::new(SoapGetKorrekturVorschlagEinheitStromVerbraucherRequest {
            body: get_korrektur_vorschlag_einheit_strom_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagEinheitStromVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagEinheitStromVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_einheit_gas_erzeuger (&self, get_korrektur_vorschlag_einheit_gas_erzeuger_request: ports::GetKorrekturVorschlagEinheitGasErzeugerRequest) -> Result<ports::GetKorrekturVorschlagEinheitGasErzeugerResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagEinheitGasErzeugerRequestSoapEnvelope::new(SoapGetKorrekturVorschlagEinheitGasErzeugerRequest {
            body: get_korrektur_vorschlag_einheit_gas_erzeuger_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagEinheitGasErzeuger")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagEinheitGasErzeugerResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_einheit_gas_verbraucher (&self, get_korrektur_vorschlag_einheit_gas_verbraucher_request: ports::GetKorrekturVorschlagEinheitGasVerbraucherRequest) -> Result<ports::GetKorrekturVorschlagEinheitGasVerbraucherResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagEinheitGasVerbraucherRequestSoapEnvelope::new(SoapGetKorrekturVorschlagEinheitGasVerbraucherRequest {
            body: get_korrektur_vorschlag_einheit_gas_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagEinheitGasVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagEinheitGasVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_einheit_strom_speicher (&self, get_korrektur_vorschlag_einheit_strom_speicher_request: ports::GetKorrekturVorschlagEinheitStromSpeicherRequest) -> Result<ports::GetKorrekturVorschlagEinheitStromSpeicherResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagEinheitStromSpeicherRequestSoapEnvelope::new(SoapGetKorrekturVorschlagEinheitStromSpeicherRequest {
            body: get_korrektur_vorschlag_einheit_strom_speicher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagEinheitStromSpeicher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagEinheitStromSpeicherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag_einheit_gas_speicher (&self, get_korrektur_vorschlag_einheit_gas_speicher_request: ports::GetKorrekturVorschlagEinheitGasSpeicherRequest) -> Result<ports::GetKorrekturVorschlagEinheitGasSpeicherResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagEinheitGasSpeicherRequestSoapEnvelope::new(SoapGetKorrekturVorschlagEinheitGasSpeicherRequest {
            body: get_korrektur_vorschlag_einheit_gas_speicher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlagEinheitGasSpeicher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagEinheitGasSpeicherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn delete_korrekturvorschlag (&self, delete_korrekturvorschlag_request: ports::DeleteKorrekturvorschlagRequest) -> Result<ports::DeleteKorrekturvorschlagResponse, Option<SoapFault>> {

        let __request = DeleteKorrekturvorschlagRequestSoapEnvelope::new(SoapDeleteKorrekturvorschlagRequest {
            body: delete_korrekturvorschlag_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "DeleteKorrekturvorschlag")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: DeleteKorrekturvorschlagResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}}

            impl Anlage {
                async fn send_soap_request<T: YaSerialize>(&self, request: &T, action: &str) -> SoapResponse {
                    let body = to_string(request).expect("failed to generate xml");
                    debug!("SOAP Request: {}", body);
                    let mut req = self
                        .client
                        .post(&self.url)
                        .body(body)
                        .header("Content-Type", "text/xml")
                        .header("Soapaction", action);
                    if let Some(credentials) = &self.credentials {
                        req = req.basic_auth(
                            credentials.0.to_string(),
                            Option::Some(credentials.1.to_string()),
                        );
                    }
                    let res = req.send().await?;
                    let status = res.status();
                    debug!("SOAP Status: {}", status);
                    let txt = res.text().await.unwrap_or_default();
                    debug!("SOAP Response: {}", txt);
                    Ok((status, txt))
                }
            }
            #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeLetzteAktualisierungRequest {
                        #[yaserde(rename = "GetListeLetzteAktualisierung", default)]
                        pub body: ports::GetListeLetzteAktualisierungRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeLetzteAktualisierungRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeLetzteAktualisierungRequest,
        }
        
        impl GetListeLetzteAktualisierungRequestSoapEnvelope {
            pub fn new(body: SoapGetListeLetzteAktualisierungRequest) -> Self {
                GetListeLetzteAktualisierungRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeLetzteAktualisierungResponse {
                    #[yaserde(rename = "GetListeLetzteAktualisierungResponse", default)]
                    pub body: ports::GetListeLetzteAktualisierungResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeLetzteAktualisierungResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeLetzteAktualisierungResponse,
        }
        
        impl GetListeLetzteAktualisierungResponseSoapEnvelope {
            pub fn new(body: SoapGetListeLetzteAktualisierungResponse) -> Self {
                GetListeLetzteAktualisierungResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeAlleEinheitenRequest {
                        #[yaserde(rename = "GetListeAlleEinheiten", default)]
                        pub body: ports::GetListeAlleEinheitenRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeAlleEinheitenRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeAlleEinheitenRequest,
        }
        
        impl GetListeAlleEinheitenRequestSoapEnvelope {
            pub fn new(body: SoapGetListeAlleEinheitenRequest) -> Self {
                GetListeAlleEinheitenRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeAlleEinheitenResponse {
                    #[yaserde(rename = "GetListeAlleEinheitenResponse", default)]
                    pub body: ports::GetListeAlleEinheitenResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeAlleEinheitenResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeAlleEinheitenResponse,
        }
        
        impl GetListeAlleEinheitenResponseSoapEnvelope {
            pub fn new(body: SoapGetListeAlleEinheitenResponse) -> Self {
                GetListeAlleEinheitenResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeFreigegebeneEinheitenRequest {
                        #[yaserde(rename = "GetListeFreigegebeneEinheiten", default)]
                        pub body: ports::GetListeFreigegebeneEinheitenRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeFreigegebeneEinheitenRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeFreigegebeneEinheitenRequest,
        }
        
        impl GetListeFreigegebeneEinheitenRequestSoapEnvelope {
            pub fn new(body: SoapGetListeFreigegebeneEinheitenRequest) -> Self {
                GetListeFreigegebeneEinheitenRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeFreigegebeneEinheitenResponse {
                    #[yaserde(rename = "GetListeFreigegebeneEinheitenResponse", default)]
                    pub body: ports::GetListeFreigegebeneEinheitenResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeFreigegebeneEinheitenResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeFreigegebeneEinheitenResponse,
        }
        
        impl GetListeFreigegebeneEinheitenResponseSoapEnvelope {
            pub fn new(body: SoapGetListeFreigegebeneEinheitenResponse) -> Self {
                GetListeFreigegebeneEinheitenResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetMeineEinheitenRequest {
                        #[yaserde(rename = "GetMeineEinheiten", default)]
                        pub body: ports::GetMeineEinheitenRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetMeineEinheitenRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetMeineEinheitenRequest,
        }
        
        impl GetMeineEinheitenRequestSoapEnvelope {
            pub fn new(body: SoapGetMeineEinheitenRequest) -> Self {
                GetMeineEinheitenRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetMeineEinheitenResponse {
                    #[yaserde(rename = "GetMeineEinheitenResponse", default)]
                    pub body: ports::GetMeineEinheitenResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetMeineEinheitenResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetMeineEinheitenResponse,
        }
        
        impl GetMeineEinheitenResponseSoapEnvelope {
            pub fn new(body: SoapGetMeineEinheitenResponse) -> Self {
                GetMeineEinheitenResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeEinheitenInMeinemNetzRequest {
                        #[yaserde(rename = "GetListeEinheitenInMeinemNetz", default)]
                        pub body: ports::GetListeEinheitenInMeinemNetzRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeEinheitenInMeinemNetzRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeEinheitenInMeinemNetzRequest,
        }
        
        impl GetListeEinheitenInMeinemNetzRequestSoapEnvelope {
            pub fn new(body: SoapGetListeEinheitenInMeinemNetzRequest) -> Self {
                GetListeEinheitenInMeinemNetzRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeEinheitenInMeinemNetzResponse {
                    #[yaserde(rename = "GetListeEinheitenInMeinemNetzResponse", default)]
                    pub body: ports::GetListeEinheitenInMeinemNetzResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeEinheitenInMeinemNetzResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeEinheitenInMeinemNetzResponse,
        }
        
        impl GetListeEinheitenInMeinemNetzResponseSoapEnvelope {
            pub fn new(body: SoapGetListeEinheitenInMeinemNetzResponse) -> Self {
                GetListeEinheitenInMeinemNetzResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeGeloeschteUndDeaktivierteEinheitenRequest {
                        #[yaserde(rename = "GetListeGeloeschteUndDeaktivierteEinheiten", default)]
                        pub body: ports::GetListeGeloeschteUndDeaktivierteEinheitenRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeGeloeschteUndDeaktivierteEinheitenRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeGeloeschteUndDeaktivierteEinheitenRequest,
        }
        
        impl GetListeGeloeschteUndDeaktivierteEinheitenRequestSoapEnvelope {
            pub fn new(body: SoapGetListeGeloeschteUndDeaktivierteEinheitenRequest) -> Self {
                GetListeGeloeschteUndDeaktivierteEinheitenRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeGeloeschteUndDeaktivierteEinheitenResponse {
                    #[yaserde(rename = "GetListeGeloeschteUndDeaktivierteEinheitenResponse", default)]
                    pub body: ports::GetListeGeloeschteUndDeaktivierteEinheitenResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeGeloeschteUndDeaktivierteEinheitenResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeGeloeschteUndDeaktivierteEinheitenResponse,
        }
        
        impl GetListeGeloeschteUndDeaktivierteEinheitenResponseSoapEnvelope {
            pub fn new(body: SoapGetListeGeloeschteUndDeaktivierteEinheitenResponse) -> Self {
                GetListeGeloeschteUndDeaktivierteEinheitenResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeEinheitenAenderungNetzbetreiberzuordnungRequest {
                        #[yaserde(rename = "GetListeEinheitenAenderungNetzbetreiberzuordnung", default)]
                        pub body: ports::GetListeEinheitenAenderungNetzbetreiberzuordnungRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeEinheitenAenderungNetzbetreiberzuordnungRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeEinheitenAenderungNetzbetreiberzuordnungRequest,
        }
        
        impl GetListeEinheitenAenderungNetzbetreiberzuordnungRequestSoapEnvelope {
            pub fn new(body: SoapGetListeEinheitenAenderungNetzbetreiberzuordnungRequest) -> Self {
                GetListeEinheitenAenderungNetzbetreiberzuordnungRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeEinheitenAenderungNetzbetreiberzuordnungResponse {
                    #[yaserde(rename = "GetListeEinheitenAenderungNetzbetreiberzuordnungResponse", default)]
                    pub body: ports::GetListeEinheitenAenderungNetzbetreiberzuordnungResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeEinheitenAenderungNetzbetreiberzuordnungResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeEinheitenAenderungNetzbetreiberzuordnungResponse,
        }
        
        impl GetListeEinheitenAenderungNetzbetreiberzuordnungResponseSoapEnvelope {
            pub fn new(body: SoapGetListeEinheitenAenderungNetzbetreiberzuordnungResponse) -> Self {
                GetListeEinheitenAenderungNetzbetreiberzuordnungResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitWindRequest {
                        #[yaserde(rename = "GetEinheitWind", default)]
                        pub body: ports::GetEinheitWindRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitWindRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitWindRequest,
        }
        
        impl GetEinheitWindRequestSoapEnvelope {
            pub fn new(body: SoapGetEinheitWindRequest) -> Self {
                GetEinheitWindRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitWindResponse {
                    #[yaserde(rename = "GetEinheitWindResponse", default)]
                    pub body: ports::GetEinheitWindResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitWindResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitWindResponse,
        }
        
        impl GetEinheitWindResponseSoapEnvelope {
            pub fn new(body: SoapGetEinheitWindResponse) -> Self {
                GetEinheitWindResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitSolarRequest {
                        #[yaserde(rename = "GetEinheitSolar", default)]
                        pub body: ports::GetEinheitSolarRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitSolarRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitSolarRequest,
        }
        
        impl GetEinheitSolarRequestSoapEnvelope {
            pub fn new(body: SoapGetEinheitSolarRequest) -> Self {
                GetEinheitSolarRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitSolarResponse {
                    #[yaserde(rename = "GetEinheitSolarResponse", default)]
                    pub body: ports::GetEinheitSolarResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitSolarResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitSolarResponse,
        }
        
        impl GetEinheitSolarResponseSoapEnvelope {
            pub fn new(body: SoapGetEinheitSolarResponse) -> Self {
                GetEinheitSolarResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitWasserRequest {
                        #[yaserde(rename = "GetEinheitWasser", default)]
                        pub body: ports::GetEinheitWasserRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitWasserRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitWasserRequest,
        }
        
        impl GetEinheitWasserRequestSoapEnvelope {
            pub fn new(body: SoapGetEinheitWasserRequest) -> Self {
                GetEinheitWasserRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitWasserResponse {
                    #[yaserde(rename = "GetEinheitWasserResponse", default)]
                    pub body: ports::GetEinheitWasserResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitWasserResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitWasserResponse,
        }
        
        impl GetEinheitWasserResponseSoapEnvelope {
            pub fn new(body: SoapGetEinheitWasserResponse) -> Self {
                GetEinheitWasserResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitGeothermieGrubengasDruckentspannungRequest {
                        #[yaserde(rename = "GetEinheitGeothermieGrubengasDruckentspannung", default)]
                        pub body: ports::GetEinheitGeothermieGrubengasDruckentspannungRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitGeothermieGrubengasDruckentspannungRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitGeothermieGrubengasDruckentspannungRequest,
        }
        
        impl GetEinheitGeothermieGrubengasDruckentspannungRequestSoapEnvelope {
            pub fn new(body: SoapGetEinheitGeothermieGrubengasDruckentspannungRequest) -> Self {
                GetEinheitGeothermieGrubengasDruckentspannungRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitGeothermieGrubengasDruckentspannungResponse {
                    #[yaserde(rename = "GetEinheitGeothermieGrubengasDruckentspannungResponse", default)]
                    pub body: ports::GetEinheitGeothermieGrubengasDruckentspannungResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitGeothermieGrubengasDruckentspannungResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitGeothermieGrubengasDruckentspannungResponse,
        }
        
        impl GetEinheitGeothermieGrubengasDruckentspannungResponseSoapEnvelope {
            pub fn new(body: SoapGetEinheitGeothermieGrubengasDruckentspannungResponse) -> Self {
                GetEinheitGeothermieGrubengasDruckentspannungResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitVerbrennungRequest {
                        #[yaserde(rename = "GetEinheitVerbrennung", default)]
                        pub body: ports::GetEinheitVerbrennungRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitVerbrennungRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitVerbrennungRequest,
        }
        
        impl GetEinheitVerbrennungRequestSoapEnvelope {
            pub fn new(body: SoapGetEinheitVerbrennungRequest) -> Self {
                GetEinheitVerbrennungRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitVerbrennungResponse {
                    #[yaserde(rename = "GetEinheitVerbrennungResponse", default)]
                    pub body: ports::GetEinheitVerbrennungResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitVerbrennungResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitVerbrennungResponse,
        }
        
        impl GetEinheitVerbrennungResponseSoapEnvelope {
            pub fn new(body: SoapGetEinheitVerbrennungResponse) -> Self {
                GetEinheitVerbrennungResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitKernkraftRequest {
                        #[yaserde(rename = "GetEinheitKernkraft", default)]
                        pub body: ports::GetEinheitKernkraftRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitKernkraftRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitKernkraftRequest,
        }
        
        impl GetEinheitKernkraftRequestSoapEnvelope {
            pub fn new(body: SoapGetEinheitKernkraftRequest) -> Self {
                GetEinheitKernkraftRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitKernkraftResponse {
                    #[yaserde(rename = "GetEinheitKernkraftResponse", default)]
                    pub body: ports::GetEinheitKernkraftResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitKernkraftResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitKernkraftResponse,
        }
        
        impl GetEinheitKernkraftResponseSoapEnvelope {
            pub fn new(body: SoapGetEinheitKernkraftResponse) -> Self {
                GetEinheitKernkraftResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitStromSpeicherRequest {
                        #[yaserde(rename = "GetEinheitStromSpeicher", default)]
                        pub body: ports::GetEinheitStromSpeicherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitStromSpeicherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitStromSpeicherRequest,
        }
        
        impl GetEinheitStromSpeicherRequestSoapEnvelope {
            pub fn new(body: SoapGetEinheitStromSpeicherRequest) -> Self {
                GetEinheitStromSpeicherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitStromSpeicherResponse {
                    #[yaserde(rename = "GetEinheitStromSpeicherResponse", default)]
                    pub body: ports::GetEinheitStromSpeicherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitStromSpeicherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitStromSpeicherResponse,
        }
        
        impl GetEinheitStromSpeicherResponseSoapEnvelope {
            pub fn new(body: SoapGetEinheitStromSpeicherResponse) -> Self {
                GetEinheitStromSpeicherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitStromVerbraucherRequest {
                        #[yaserde(rename = "GetEinheitStromVerbraucher", default)]
                        pub body: ports::GetEinheitStromVerbraucherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitStromVerbraucherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitStromVerbraucherRequest,
        }
        
        impl GetEinheitStromVerbraucherRequestSoapEnvelope {
            pub fn new(body: SoapGetEinheitStromVerbraucherRequest) -> Self {
                GetEinheitStromVerbraucherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitStromVerbraucherResponse {
                    #[yaserde(rename = "GetEinheitStromVerbraucherResponse", default)]
                    pub body: ports::GetEinheitStromVerbraucherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitStromVerbraucherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitStromVerbraucherResponse,
        }
        
        impl GetEinheitStromVerbraucherResponseSoapEnvelope {
            pub fn new(body: SoapGetEinheitStromVerbraucherResponse) -> Self {
                GetEinheitStromVerbraucherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitGasErzeugerRequest {
                        #[yaserde(rename = "GetEinheitGasErzeuger", default)]
                        pub body: ports::GetEinheitGasErzeugerRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitGasErzeugerRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitGasErzeugerRequest,
        }
        
        impl GetEinheitGasErzeugerRequestSoapEnvelope {
            pub fn new(body: SoapGetEinheitGasErzeugerRequest) -> Self {
                GetEinheitGasErzeugerRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitGasErzeugerResponse {
                    #[yaserde(rename = "GetEinheitGasErzeugerResponse", default)]
                    pub body: ports::GetEinheitGasErzeugerResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitGasErzeugerResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitGasErzeugerResponse,
        }
        
        impl GetEinheitGasErzeugerResponseSoapEnvelope {
            pub fn new(body: SoapGetEinheitGasErzeugerResponse) -> Self {
                GetEinheitGasErzeugerResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitGasSpeicherRequest {
                        #[yaserde(rename = "GetEinheitGasSpeicher", default)]
                        pub body: ports::GetEinheitGasSpeicherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitGasSpeicherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitGasSpeicherRequest,
        }
        
        impl GetEinheitGasSpeicherRequestSoapEnvelope {
            pub fn new(body: SoapGetEinheitGasSpeicherRequest) -> Self {
                GetEinheitGasSpeicherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitGasSpeicherResponse {
                    #[yaserde(rename = "GetEinheitGasSpeicherResponse", default)]
                    pub body: ports::GetEinheitGasSpeicherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitGasSpeicherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitGasSpeicherResponse,
        }
        
        impl GetEinheitGasSpeicherResponseSoapEnvelope {
            pub fn new(body: SoapGetEinheitGasSpeicherResponse) -> Self {
                GetEinheitGasSpeicherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitGasVerbraucherRequest {
                        #[yaserde(rename = "GetEinheitGasVerbraucher", default)]
                        pub body: ports::GetEinheitGasVerbraucherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitGasVerbraucherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitGasVerbraucherRequest,
        }
        
        impl GetEinheitGasVerbraucherRequestSoapEnvelope {
            pub fn new(body: SoapGetEinheitGasVerbraucherRequest) -> Self {
                GetEinheitGasVerbraucherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitGasVerbraucherResponse {
                    #[yaserde(rename = "GetEinheitGasVerbraucherResponse", default)]
                    pub body: ports::GetEinheitGasVerbraucherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitGasVerbraucherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitGasVerbraucherResponse,
        }
        
        impl GetEinheitGasVerbraucherResponseSoapEnvelope {
            pub fn new(body: SoapGetEinheitGasVerbraucherResponse) -> Self {
                GetEinheitGasVerbraucherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitGenehmigungRequest {
                        #[yaserde(rename = "GetEinheitGenehmigung", default)]
                        pub body: ports::GetEinheitGenehmigungRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitGenehmigungRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitGenehmigungRequest,
        }
        
        impl GetEinheitGenehmigungRequestSoapEnvelope {
            pub fn new(body: SoapGetEinheitGenehmigungRequest) -> Self {
                GetEinheitGenehmigungRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitGenehmigungResponse {
                    #[yaserde(rename = "GetEinheitGenehmigungResponse", default)]
                    pub body: ports::GetEinheitGenehmigungResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitGenehmigungResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitGenehmigungResponse,
        }
        
        impl GetEinheitGenehmigungResponseSoapEnvelope {
            pub fn new(body: SoapGetEinheitGenehmigungResponse) -> Self {
                GetEinheitGenehmigungResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetGefilterteListeStromErzeugerRequest {
                        #[yaserde(rename = "GetGefilterteListeStromErzeuger", default)]
                        pub body: ports::GetGefilterteListeStromErzeugerRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetGefilterteListeStromErzeugerRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetGefilterteListeStromErzeugerRequest,
        }
        
        impl GetGefilterteListeStromErzeugerRequestSoapEnvelope {
            pub fn new(body: SoapGetGefilterteListeStromErzeugerRequest) -> Self {
                GetGefilterteListeStromErzeugerRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetGefilterteListeStromErzeugerResponse {
                    #[yaserde(rename = "GetGefilterteListeStromErzeugerResponse", default)]
                    pub body: ports::GetGefilterteListeStromErzeugerResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetGefilterteListeStromErzeugerResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetGefilterteListeStromErzeugerResponse,
        }
        
        impl GetGefilterteListeStromErzeugerResponseSoapEnvelope {
            pub fn new(body: SoapGetGefilterteListeStromErzeugerResponse) -> Self {
                GetGefilterteListeStromErzeugerResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetGefilterteListeStromVerbraucherRequest {
                        #[yaserde(rename = "GetGefilterteListeStromVerbraucher", default)]
                        pub body: ports::GetGefilterteListeStromVerbraucherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetGefilterteListeStromVerbraucherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetGefilterteListeStromVerbraucherRequest,
        }
        
        impl GetGefilterteListeStromVerbraucherRequestSoapEnvelope {
            pub fn new(body: SoapGetGefilterteListeStromVerbraucherRequest) -> Self {
                GetGefilterteListeStromVerbraucherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetGefilterteListeStromVerbraucherResponse {
                    #[yaserde(rename = "GetGefilterteListeStromVerbraucherResponse", default)]
                    pub body: ports::GetGefilterteListeStromVerbraucherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetGefilterteListeStromVerbraucherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetGefilterteListeStromVerbraucherResponse,
        }
        
        impl GetGefilterteListeStromVerbraucherResponseSoapEnvelope {
            pub fn new(body: SoapGetGefilterteListeStromVerbraucherResponse) -> Self {
                GetGefilterteListeStromVerbraucherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetGefilterteListeGasErzeugerRequest {
                        #[yaserde(rename = "GetGefilterteListeGasErzeuger", default)]
                        pub body: ports::GetGefilterteListeGasErzeugerRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetGefilterteListeGasErzeugerRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetGefilterteListeGasErzeugerRequest,
        }
        
        impl GetGefilterteListeGasErzeugerRequestSoapEnvelope {
            pub fn new(body: SoapGetGefilterteListeGasErzeugerRequest) -> Self {
                GetGefilterteListeGasErzeugerRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetGefilterteListeGasErzeugerResponse {
                    #[yaserde(rename = "GetGefilterteListeGasErzeugerResponse", default)]
                    pub body: ports::GetGefilterteListeGasErzeugerResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetGefilterteListeGasErzeugerResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetGefilterteListeGasErzeugerResponse,
        }
        
        impl GetGefilterteListeGasErzeugerResponseSoapEnvelope {
            pub fn new(body: SoapGetGefilterteListeGasErzeugerResponse) -> Self {
                GetGefilterteListeGasErzeugerResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetGefilterteListeGasVerbraucherRequest {
                        #[yaserde(rename = "GetGefilterteListeGasVerbraucher", default)]
                        pub body: ports::GetGefilterteListeGasVerbraucherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetGefilterteListeGasVerbraucherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetGefilterteListeGasVerbraucherRequest,
        }
        
        impl GetGefilterteListeGasVerbraucherRequestSoapEnvelope {
            pub fn new(body: SoapGetGefilterteListeGasVerbraucherRequest) -> Self {
                GetGefilterteListeGasVerbraucherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetGefilterteListeGasVerbraucherResponse {
                    #[yaserde(rename = "GetGefilterteListeGasVerbraucherResponse", default)]
                    pub body: ports::GetGefilterteListeGasVerbraucherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetGefilterteListeGasVerbraucherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetGefilterteListeGasVerbraucherResponse,
        }
        
        impl GetGefilterteListeGasVerbraucherResponseSoapEnvelope {
            pub fn new(body: SoapGetGefilterteListeGasVerbraucherResponse) -> Self {
                GetGefilterteListeGasVerbraucherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetGefilterteListeLokationenStromErzeugerRequest {
                        #[yaserde(rename = "GetGefilterteListeLokationenStromErzeuger", default)]
                        pub body: ports::GetGefilterteListeLokationenStromErzeugerRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetGefilterteListeLokationenStromErzeugerRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetGefilterteListeLokationenStromErzeugerRequest,
        }
        
        impl GetGefilterteListeLokationenStromErzeugerRequestSoapEnvelope {
            pub fn new(body: SoapGetGefilterteListeLokationenStromErzeugerRequest) -> Self {
                GetGefilterteListeLokationenStromErzeugerRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetGefilterteListeLokationenStromErzeugerResponse {
                    #[yaserde(rename = "GetGefilterteListeLokationenStromErzeugerResponse", default)]
                    pub body: ports::GetGefilterteListeLokationenStromErzeugerResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetGefilterteListeLokationenStromErzeugerResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetGefilterteListeLokationenStromErzeugerResponse,
        }
        
        impl GetGefilterteListeLokationenStromErzeugerResponseSoapEnvelope {
            pub fn new(body: SoapGetGefilterteListeLokationenStromErzeugerResponse) -> Self {
                GetGefilterteListeLokationenStromErzeugerResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetGefilterteListeLokationenStromVerbraucherRequest {
                        #[yaserde(rename = "GetGefilterteListeLokationenStromVerbraucher", default)]
                        pub body: ports::GetGefilterteListeLokationenStromVerbraucherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetGefilterteListeLokationenStromVerbraucherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetGefilterteListeLokationenStromVerbraucherRequest,
        }
        
        impl GetGefilterteListeLokationenStromVerbraucherRequestSoapEnvelope {
            pub fn new(body: SoapGetGefilterteListeLokationenStromVerbraucherRequest) -> Self {
                GetGefilterteListeLokationenStromVerbraucherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetGefilterteListeLokationenStromVerbraucherResponse {
                    #[yaserde(rename = "GetGefilterteListeLokationenStromVerbraucherResponse", default)]
                    pub body: ports::GetGefilterteListeLokationenStromVerbraucherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetGefilterteListeLokationenStromVerbraucherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetGefilterteListeLokationenStromVerbraucherResponse,
        }
        
        impl GetGefilterteListeLokationenStromVerbraucherResponseSoapEnvelope {
            pub fn new(body: SoapGetGefilterteListeLokationenStromVerbraucherResponse) -> Self {
                GetGefilterteListeLokationenStromVerbraucherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetGefilterteListeLokationenGasErzeugerRequest {
                        #[yaserde(rename = "GetGefilterteListeLokationenGasErzeuger", default)]
                        pub body: ports::GetGefilterteListeLokationenGasErzeugerRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetGefilterteListeLokationenGasErzeugerRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetGefilterteListeLokationenGasErzeugerRequest,
        }
        
        impl GetGefilterteListeLokationenGasErzeugerRequestSoapEnvelope {
            pub fn new(body: SoapGetGefilterteListeLokationenGasErzeugerRequest) -> Self {
                GetGefilterteListeLokationenGasErzeugerRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetGefilterteListeLokationenGasErzeugerResponse {
                    #[yaserde(rename = "GetGefilterteListeLokationenGasErzeugerResponse", default)]
                    pub body: ports::GetGefilterteListeLokationenGasErzeugerResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetGefilterteListeLokationenGasErzeugerResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetGefilterteListeLokationenGasErzeugerResponse,
        }
        
        impl GetGefilterteListeLokationenGasErzeugerResponseSoapEnvelope {
            pub fn new(body: SoapGetGefilterteListeLokationenGasErzeugerResponse) -> Self {
                GetGefilterteListeLokationenGasErzeugerResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetGefilterteListeLokationenGasVerbraucherRequest {
                        #[yaserde(rename = "GetGefilterteListeLokationenGasVerbraucher", default)]
                        pub body: ports::GetGefilterteListeLokationenGasVerbraucherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetGefilterteListeLokationenGasVerbraucherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetGefilterteListeLokationenGasVerbraucherRequest,
        }
        
        impl GetGefilterteListeLokationenGasVerbraucherRequestSoapEnvelope {
            pub fn new(body: SoapGetGefilterteListeLokationenGasVerbraucherRequest) -> Self {
                GetGefilterteListeLokationenGasVerbraucherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetGefilterteListeLokationenGasVerbraucherResponse {
                    #[yaserde(rename = "GetGefilterteListeLokationenGasVerbraucherResponse", default)]
                    pub body: ports::GetGefilterteListeLokationenGasVerbraucherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetGefilterteListeLokationenGasVerbraucherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetGefilterteListeLokationenGasVerbraucherResponse,
        }
        
        impl GetGefilterteListeLokationenGasVerbraucherResponseSoapEnvelope {
            pub fn new(body: SoapGetGefilterteListeLokationenGasVerbraucherResponse) -> Self {
                GetGefilterteListeLokationenGasVerbraucherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitBiomasseRequest {
                        #[yaserde(rename = "GetEinheitBiomasse", default)]
                        pub body: ports::GetEinheitBiomasseRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitBiomasseRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitBiomasseRequest,
        }
        
        impl GetEinheitBiomasseRequestSoapEnvelope {
            pub fn new(body: SoapGetEinheitBiomasseRequest) -> Self {
                GetEinheitBiomasseRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetEinheitBiomasseResponse {
                    #[yaserde(rename = "GetEinheitBiomasseResponse", default)]
                    pub body: ports::GetEinheitBiomasseResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetEinheitBiomasseResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetEinheitBiomasseResponse,
        }
        
        impl GetEinheitBiomasseResponseSoapEnvelope {
            pub fn new(body: SoapGetEinheitBiomasseResponse) -> Self {
                GetEinheitBiomasseResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetStromSpeicherRequest {
                        #[yaserde(rename = "GetStromSpeicher", default)]
                        pub body: ports::GetStromSpeicherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetStromSpeicherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetStromSpeicherRequest,
        }
        
        impl GetStromSpeicherRequestSoapEnvelope {
            pub fn new(body: SoapGetStromSpeicherRequest) -> Self {
                GetStromSpeicherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetStromSpeicherResponse {
                    #[yaserde(rename = "GetStromSpeicherResponse", default)]
                    pub body: ports::GetStromSpeicherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetStromSpeicherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetStromSpeicherResponse,
        }
        
        impl GetStromSpeicherResponseSoapEnvelope {
            pub fn new(body: SoapGetStromSpeicherResponse) -> Self {
                GetStromSpeicherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetGasSpeicherRequest {
                        #[yaserde(rename = "GetGasSpeicher", default)]
                        pub body: ports::GetGasSpeicherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetGasSpeicherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetGasSpeicherRequest,
        }
        
        impl GetGasSpeicherRequestSoapEnvelope {
            pub fn new(body: SoapGetGasSpeicherRequest) -> Self {
                GetGasSpeicherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetGasSpeicherResponse {
                    #[yaserde(rename = "GetGasSpeicherResponse", default)]
                    pub body: ports::GetGasSpeicherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetGasSpeicherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetGasSpeicherResponse,
        }
        
        impl GetGasSpeicherResponseSoapEnvelope {
            pub fn new(body: SoapGetGasSpeicherResponse) -> Self {
                GetGasSpeicherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetAnlageEegWindRequest {
                        #[yaserde(rename = "GetAnlageEegWind", default)]
                        pub body: ports::GetAnlageEegWindRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetAnlageEegWindRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetAnlageEegWindRequest,
        }
        
        impl GetAnlageEegWindRequestSoapEnvelope {
            pub fn new(body: SoapGetAnlageEegWindRequest) -> Self {
                GetAnlageEegWindRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetAnlageEegWindResponse {
                    #[yaserde(rename = "GetAnlageEegWindResponse", default)]
                    pub body: ports::GetAnlageEegWindResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetAnlageEegWindResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetAnlageEegWindResponse,
        }
        
        impl GetAnlageEegWindResponseSoapEnvelope {
            pub fn new(body: SoapGetAnlageEegWindResponse) -> Self {
                GetAnlageEegWindResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetAnlageEegSolarRequest {
                        #[yaserde(rename = "GetAnlageEegSolar", default)]
                        pub body: ports::GetAnlageEegSolarRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetAnlageEegSolarRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetAnlageEegSolarRequest,
        }
        
        impl GetAnlageEegSolarRequestSoapEnvelope {
            pub fn new(body: SoapGetAnlageEegSolarRequest) -> Self {
                GetAnlageEegSolarRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetAnlageEegSolarResponse {
                    #[yaserde(rename = "GetAnlageEegSolarResponse", default)]
                    pub body: ports::GetAnlageEegSolarResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetAnlageEegSolarResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetAnlageEegSolarResponse,
        }
        
        impl GetAnlageEegSolarResponseSoapEnvelope {
            pub fn new(body: SoapGetAnlageEegSolarResponse) -> Self {
                GetAnlageEegSolarResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetAnlageEegBiomasseRequest {
                        #[yaserde(rename = "GetAnlageEegBiomasse", default)]
                        pub body: ports::GetAnlageEegBiomasseRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetAnlageEegBiomasseRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetAnlageEegBiomasseRequest,
        }
        
        impl GetAnlageEegBiomasseRequestSoapEnvelope {
            pub fn new(body: SoapGetAnlageEegBiomasseRequest) -> Self {
                GetAnlageEegBiomasseRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetAnlageEegBiomasseResponse {
                    #[yaserde(rename = "GetAnlageEegBiomasseResponse", default)]
                    pub body: ports::GetAnlageEegBiomasseResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetAnlageEegBiomasseResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetAnlageEegBiomasseResponse,
        }
        
        impl GetAnlageEegBiomasseResponseSoapEnvelope {
            pub fn new(body: SoapGetAnlageEegBiomasseResponse) -> Self {
                GetAnlageEegBiomasseResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetAnlageEegWasserRequest {
                        #[yaserde(rename = "GetAnlageEegWasser", default)]
                        pub body: ports::GetAnlageEegWasserRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetAnlageEegWasserRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetAnlageEegWasserRequest,
        }
        
        impl GetAnlageEegWasserRequestSoapEnvelope {
            pub fn new(body: SoapGetAnlageEegWasserRequest) -> Self {
                GetAnlageEegWasserRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetAnlageEegWasserResponse {
                    #[yaserde(rename = "GetAnlageEegWasserResponse", default)]
                    pub body: ports::GetAnlageEegWasserResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetAnlageEegWasserResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetAnlageEegWasserResponse,
        }
        
        impl GetAnlageEegWasserResponseSoapEnvelope {
            pub fn new(body: SoapGetAnlageEegWasserResponse) -> Self {
                GetAnlageEegWasserResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetAnlageEegSpeicherRequest {
                        #[yaserde(rename = "GetAnlageEegSpeicher", default)]
                        pub body: ports::GetAnlageEegSpeicherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetAnlageEegSpeicherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetAnlageEegSpeicherRequest,
        }
        
        impl GetAnlageEegSpeicherRequestSoapEnvelope {
            pub fn new(body: SoapGetAnlageEegSpeicherRequest) -> Self {
                GetAnlageEegSpeicherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetAnlageEegSpeicherResponse {
                    #[yaserde(rename = "GetAnlageEegSpeicherResponse", default)]
                    pub body: ports::GetAnlageEegSpeicherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetAnlageEegSpeicherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetAnlageEegSpeicherResponse,
        }
        
        impl GetAnlageEegSpeicherResponseSoapEnvelope {
            pub fn new(body: SoapGetAnlageEegSpeicherResponse) -> Self {
                GetAnlageEegSpeicherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetAnlageEegGeothermieGrubengasDruckentspannungRequest {
                        #[yaserde(rename = "GetAnlageEegGeothermieGrubengasDruckentspannung", default)]
                        pub body: ports::GetAnlageEegGeothermieGrubengasDruckentspannungRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetAnlageEegGeothermieGrubengasDruckentspannungRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetAnlageEegGeothermieGrubengasDruckentspannungRequest,
        }
        
        impl GetAnlageEegGeothermieGrubengasDruckentspannungRequestSoapEnvelope {
            pub fn new(body: SoapGetAnlageEegGeothermieGrubengasDruckentspannungRequest) -> Self {
                GetAnlageEegGeothermieGrubengasDruckentspannungRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetAnlageEegGeothermieGrubengasDruckentspannungResponse {
                    #[yaserde(rename = "GetAnlageEegGeothermieGrubengasDruckentspannungResponse", default)]
                    pub body: ports::GetAnlageEegGeothermieGrubengasDruckentspannungResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetAnlageEegGeothermieGrubengasDruckentspannungResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetAnlageEegGeothermieGrubengasDruckentspannungResponse,
        }
        
        impl GetAnlageEegGeothermieGrubengasDruckentspannungResponseSoapEnvelope {
            pub fn new(body: SoapGetAnlageEegGeothermieGrubengasDruckentspannungResponse) -> Self {
                GetAnlageEegGeothermieGrubengasDruckentspannungResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetAnlageKwkRequest {
                        #[yaserde(rename = "GetAnlageKwk", default)]
                        pub body: ports::GetAnlageKwkRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetAnlageKwkRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetAnlageKwkRequest,
        }
        
        impl GetAnlageKwkRequestSoapEnvelope {
            pub fn new(body: SoapGetAnlageKwkRequest) -> Self {
                GetAnlageKwkRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetAnlageKwkResponse {
                    #[yaserde(rename = "GetAnlageKwkResponse", default)]
                    pub body: ports::GetAnlageKwkResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetAnlageKwkResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetAnlageKwkResponse,
        }
        
        impl GetAnlageKwkResponseSoapEnvelope {
            pub fn new(body: SoapGetAnlageKwkResponse) -> Self {
                GetAnlageKwkResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeAlleLokationenRequest {
                        #[yaserde(rename = "GetListeAlleLokationen", default)]
                        pub body: ports::GetListeAlleLokationenRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeAlleLokationenRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeAlleLokationenRequest,
        }
        
        impl GetListeAlleLokationenRequestSoapEnvelope {
            pub fn new(body: SoapGetListeAlleLokationenRequest) -> Self {
                GetListeAlleLokationenRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeAlleLokationenResponse {
                    #[yaserde(rename = "GetListeAlleLokationenResponse", default)]
                    pub body: ports::GetListeAlleLokationenResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeAlleLokationenResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeAlleLokationenResponse,
        }
        
        impl GetListeAlleLokationenResponseSoapEnvelope {
            pub fn new(body: SoapGetListeAlleLokationenResponse) -> Self {
                GetListeAlleLokationenResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeFreigegebeneLokationenRequest {
                        #[yaserde(rename = "GetListeFreigegebeneLokationen", default)]
                        pub body: ports::GetListeFreigegebeneLokationenRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeFreigegebeneLokationenRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeFreigegebeneLokationenRequest,
        }
        
        impl GetListeFreigegebeneLokationenRequestSoapEnvelope {
            pub fn new(body: SoapGetListeFreigegebeneLokationenRequest) -> Self {
                GetListeFreigegebeneLokationenRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeFreigegebeneLokationenResponse {
                    #[yaserde(rename = "GetListeFreigegebeneLokationenResponse", default)]
                    pub body: ports::GetListeFreigegebeneLokationenResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeFreigegebeneLokationenResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeFreigegebeneLokationenResponse,
        }
        
        impl GetListeFreigegebeneLokationenResponseSoapEnvelope {
            pub fn new(body: SoapGetListeFreigegebeneLokationenResponse) -> Self {
                GetListeFreigegebeneLokationenResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetLokationStromErzeugerRequest {
                        #[yaserde(rename = "GetLokationStromErzeuger", default)]
                        pub body: ports::GetLokationStromErzeugerRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetLokationStromErzeugerRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetLokationStromErzeugerRequest,
        }
        
        impl GetLokationStromErzeugerRequestSoapEnvelope {
            pub fn new(body: SoapGetLokationStromErzeugerRequest) -> Self {
                GetLokationStromErzeugerRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetLokationStromErzeugerResponse {
                    #[yaserde(rename = "GetLokationStromErzeugerResponse", default)]
                    pub body: ports::GetLokationStromErzeugerResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetLokationStromErzeugerResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetLokationStromErzeugerResponse,
        }
        
        impl GetLokationStromErzeugerResponseSoapEnvelope {
            pub fn new(body: SoapGetLokationStromErzeugerResponse) -> Self {
                GetLokationStromErzeugerResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetLokationStromVerbraucherRequest {
                        #[yaserde(rename = "GetLokationStromVerbraucher", default)]
                        pub body: ports::GetLokationStromVerbraucherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetLokationStromVerbraucherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetLokationStromVerbraucherRequest,
        }
        
        impl GetLokationStromVerbraucherRequestSoapEnvelope {
            pub fn new(body: SoapGetLokationStromVerbraucherRequest) -> Self {
                GetLokationStromVerbraucherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetLokationStromVerbraucherResponse {
                    #[yaserde(rename = "GetLokationStromVerbraucherResponse", default)]
                    pub body: ports::GetLokationStromVerbraucherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetLokationStromVerbraucherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetLokationStromVerbraucherResponse,
        }
        
        impl GetLokationStromVerbraucherResponseSoapEnvelope {
            pub fn new(body: SoapGetLokationStromVerbraucherResponse) -> Self {
                GetLokationStromVerbraucherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetLokationGasErzeugerRequest {
                        #[yaserde(rename = "GetLokationGasErzeuger", default)]
                        pub body: ports::GetLokationGasErzeugerRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetLokationGasErzeugerRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetLokationGasErzeugerRequest,
        }
        
        impl GetLokationGasErzeugerRequestSoapEnvelope {
            pub fn new(body: SoapGetLokationGasErzeugerRequest) -> Self {
                GetLokationGasErzeugerRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetLokationGasErzeugerResponse {
                    #[yaserde(rename = "GetLokationGasErzeugerResponse", default)]
                    pub body: ports::GetLokationGasErzeugerResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetLokationGasErzeugerResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetLokationGasErzeugerResponse,
        }
        
        impl GetLokationGasErzeugerResponseSoapEnvelope {
            pub fn new(body: SoapGetLokationGasErzeugerResponse) -> Self {
                GetLokationGasErzeugerResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetLokationGasVerbraucherRequest {
                        #[yaserde(rename = "GetLokationGasVerbraucher", default)]
                        pub body: ports::GetLokationGasVerbraucherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetLokationGasVerbraucherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetLokationGasVerbraucherRequest,
        }
        
        impl GetLokationGasVerbraucherRequestSoapEnvelope {
            pub fn new(body: SoapGetLokationGasVerbraucherRequest) -> Self {
                GetLokationGasVerbraucherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetLokationGasVerbraucherResponse {
                    #[yaserde(rename = "GetLokationGasVerbraucherResponse", default)]
                    pub body: ports::GetLokationGasVerbraucherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetLokationGasVerbraucherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetLokationGasVerbraucherResponse,
        }
        
        impl GetLokationGasVerbraucherResponseSoapEnvelope {
            pub fn new(body: SoapGetLokationGasVerbraucherResponse) -> Self {
                GetLokationGasVerbraucherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                impl Default for Anlage {
                fn default() -> Self {
                    Anlage {
                        client: reqwest::Client::new(),
                        url: "https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string(),
                        credentials: Option::None,
                     }
                }
            }
            impl Anlage {
                pub fn new(url: &str, credentials: Option<(String,String)>) -> Self {
                    Anlage {
                        client: reqwest::Client::new(),
                        url: url.to_string(),
                        credentials,
                    }
                }
        }
        pub struct Anlage {
                client: reqwest::Client,
                url: String,
                credentials: Option<(String,String)>
                }
                #[async_trait]
	impl ports::Anlage for Anlage {
	async fn get_liste_letzte_aktualisierung (&self, get_liste_letzte_aktualisierung_request: ports::GetListeLetzteAktualisierungRequest) -> Result<ports::GetListeLetzteAktualisierungResponse, Option<SoapFault>> {

        let __request = GetListeLetzteAktualisierungRequestSoapEnvelope::new(SoapGetListeLetzteAktualisierungRequest {
            body: get_liste_letzte_aktualisierung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeLetzteAktualisierung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeLetzteAktualisierungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_liste_alle_einheiten (&self, get_liste_alle_einheiten_request: ports::GetListeAlleEinheitenRequest) -> Result<ports::GetListeAlleEinheitenResponse, Option<SoapFault>> {

        let __request = GetListeAlleEinheitenRequestSoapEnvelope::new(SoapGetListeAlleEinheitenRequest {
            body: get_liste_alle_einheiten_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeAlleEinheiten")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeAlleEinheitenResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_liste_freigegebene_einheiten (&self, get_liste_freigegebene_einheiten_request: ports::GetListeFreigegebeneEinheitenRequest) -> Result<ports::GetListeFreigegebeneEinheitenResponse, Option<SoapFault>> {

        let __request = GetListeFreigegebeneEinheitenRequestSoapEnvelope::new(SoapGetListeFreigegebeneEinheitenRequest {
            body: get_liste_freigegebene_einheiten_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeFreigegebeneEinheiten")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeFreigegebeneEinheitenResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_meine_einheiten (&self, get_meine_einheiten_request: ports::GetMeineEinheitenRequest) -> Result<ports::GetMeineEinheitenResponse, Option<SoapFault>> {

        let __request = GetMeineEinheitenRequestSoapEnvelope::new(SoapGetMeineEinheitenRequest {
            body: get_meine_einheiten_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetMeineEinheiten")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetMeineEinheitenResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_liste_einheiten_in_meinem_netz (&self, get_liste_einheiten_in_meinem_netz_request: ports::GetListeEinheitenInMeinemNetzRequest) -> Result<ports::GetListeEinheitenInMeinemNetzResponse, Option<SoapFault>> {

        let __request = GetListeEinheitenInMeinemNetzRequestSoapEnvelope::new(SoapGetListeEinheitenInMeinemNetzRequest {
            body: get_liste_einheiten_in_meinem_netz_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeEinheitenInMeinemNetz")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeEinheitenInMeinemNetzResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_liste_geloeschte_und_deaktivierte_einheiten (&self, get_liste_geloeschte_und_deaktivierte_einheiten_request: ports::GetListeGeloeschteUndDeaktivierteEinheitenRequest) -> Result<ports::GetListeGeloeschteUndDeaktivierteEinheitenResponse, Option<SoapFault>> {

        let __request = GetListeGeloeschteUndDeaktivierteEinheitenRequestSoapEnvelope::new(SoapGetListeGeloeschteUndDeaktivierteEinheitenRequest {
            body: get_liste_geloeschte_und_deaktivierte_einheiten_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeGeloeschteUndDeaktivierteEinheiten")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeGeloeschteUndDeaktivierteEinheitenResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_liste_einheiten_aenderung_netzbetreiberzuordnung (&self, get_liste_einheiten_aenderung_netzbetreiberzuordnung_request: ports::GetListeEinheitenAenderungNetzbetreiberzuordnungRequest) -> Result<ports::GetListeEinheitenAenderungNetzbetreiberzuordnungResponse, Option<SoapFault>> {

        let __request = GetListeEinheitenAenderungNetzbetreiberzuordnungRequestSoapEnvelope::new(SoapGetListeEinheitenAenderungNetzbetreiberzuordnungRequest {
            body: get_liste_einheiten_aenderung_netzbetreiberzuordnung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeEinheitenAenderungNetzbetreiberzuordnung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeEinheitenAenderungNetzbetreiberzuordnungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_wind (&self, get_einheit_wind_request: ports::GetEinheitWindRequest) -> Result<ports::GetEinheitWindResponse, Option<SoapFault>> {

        let __request = GetEinheitWindRequestSoapEnvelope::new(SoapGetEinheitWindRequest {
            body: get_einheit_wind_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitWind")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitWindResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_solar (&self, get_einheit_solar_request: ports::GetEinheitSolarRequest) -> Result<ports::GetEinheitSolarResponse, Option<SoapFault>> {

        let __request = GetEinheitSolarRequestSoapEnvelope::new(SoapGetEinheitSolarRequest {
            body: get_einheit_solar_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitSolar")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitSolarResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_wasser (&self, get_einheit_wasser_request: ports::GetEinheitWasserRequest) -> Result<ports::GetEinheitWasserResponse, Option<SoapFault>> {

        let __request = GetEinheitWasserRequestSoapEnvelope::new(SoapGetEinheitWasserRequest {
            body: get_einheit_wasser_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitWasser")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitWasserResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_geothermie_grubengas_druckentspannung (&self, get_einheit_geothermie_grubengas_druckentspannung_request: ports::GetEinheitGeothermieGrubengasDruckentspannungRequest) -> Result<ports::GetEinheitGeothermieGrubengasDruckentspannungResponse, Option<SoapFault>> {

        let __request = GetEinheitGeothermieGrubengasDruckentspannungRequestSoapEnvelope::new(SoapGetEinheitGeothermieGrubengasDruckentspannungRequest {
            body: get_einheit_geothermie_grubengas_druckentspannung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitGeothermieGrubengasDruckentspannung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitGeothermieGrubengasDruckentspannungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_verbrennung (&self, get_einheit_verbrennung_request: ports::GetEinheitVerbrennungRequest) -> Result<ports::GetEinheitVerbrennungResponse, Option<SoapFault>> {

        let __request = GetEinheitVerbrennungRequestSoapEnvelope::new(SoapGetEinheitVerbrennungRequest {
            body: get_einheit_verbrennung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitVerbrennung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitVerbrennungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_kernkraft (&self, get_einheit_kernkraft_request: ports::GetEinheitKernkraftRequest) -> Result<ports::GetEinheitKernkraftResponse, Option<SoapFault>> {

        let __request = GetEinheitKernkraftRequestSoapEnvelope::new(SoapGetEinheitKernkraftRequest {
            body: get_einheit_kernkraft_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitKernkraft")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitKernkraftResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_strom_speicher (&self, get_einheit_strom_speicher_request: ports::GetEinheitStromSpeicherRequest) -> Result<ports::GetEinheitStromSpeicherResponse, Option<SoapFault>> {

        let __request = GetEinheitStromSpeicherRequestSoapEnvelope::new(SoapGetEinheitStromSpeicherRequest {
            body: get_einheit_strom_speicher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitStromSpeicher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitStromSpeicherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_strom_verbraucher (&self, get_einheit_strom_verbraucher_request: ports::GetEinheitStromVerbraucherRequest) -> Result<ports::GetEinheitStromVerbraucherResponse, Option<SoapFault>> {

        let __request = GetEinheitStromVerbraucherRequestSoapEnvelope::new(SoapGetEinheitStromVerbraucherRequest {
            body: get_einheit_strom_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitStromVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitStromVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_gas_erzeuger (&self, get_einheit_gas_erzeuger_request: ports::GetEinheitGasErzeugerRequest) -> Result<ports::GetEinheitGasErzeugerResponse, Option<SoapFault>> {

        let __request = GetEinheitGasErzeugerRequestSoapEnvelope::new(SoapGetEinheitGasErzeugerRequest {
            body: get_einheit_gas_erzeuger_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitGasErzeuger")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitGasErzeugerResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_gas_speicher (&self, get_einheit_gas_speicher_request: ports::GetEinheitGasSpeicherRequest) -> Result<ports::GetEinheitGasSpeicherResponse, Option<SoapFault>> {

        let __request = GetEinheitGasSpeicherRequestSoapEnvelope::new(SoapGetEinheitGasSpeicherRequest {
            body: get_einheit_gas_speicher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitGasSpeicher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitGasSpeicherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_gas_verbraucher (&self, get_einheit_gas_verbraucher_request: ports::GetEinheitGasVerbraucherRequest) -> Result<ports::GetEinheitGasVerbraucherResponse, Option<SoapFault>> {

        let __request = GetEinheitGasVerbraucherRequestSoapEnvelope::new(SoapGetEinheitGasVerbraucherRequest {
            body: get_einheit_gas_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitGasVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitGasVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_genehmigung (&self, get_einheit_genehmigung_request: ports::GetEinheitGenehmigungRequest) -> Result<ports::GetEinheitGenehmigungResponse, Option<SoapFault>> {

        let __request = GetEinheitGenehmigungRequestSoapEnvelope::new(SoapGetEinheitGenehmigungRequest {
            body: get_einheit_genehmigung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitGenehmigung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitGenehmigungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_gefilterte_liste_strom_erzeuger (&self, get_gefilterte_liste_strom_erzeuger_request: ports::GetGefilterteListeStromErzeugerRequest) -> Result<ports::GetGefilterteListeStromErzeugerResponse, Option<SoapFault>> {

        let __request = GetGefilterteListeStromErzeugerRequestSoapEnvelope::new(SoapGetGefilterteListeStromErzeugerRequest {
            body: get_gefilterte_liste_strom_erzeuger_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetGefilterteListeStromErzeuger")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetGefilterteListeStromErzeugerResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_gefilterte_liste_strom_verbraucher (&self, get_gefilterte_liste_strom_verbraucher_request: ports::GetGefilterteListeStromVerbraucherRequest) -> Result<ports::GetGefilterteListeStromVerbraucherResponse, Option<SoapFault>> {

        let __request = GetGefilterteListeStromVerbraucherRequestSoapEnvelope::new(SoapGetGefilterteListeStromVerbraucherRequest {
            body: get_gefilterte_liste_strom_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetGefilterteListeStromVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetGefilterteListeStromVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_gefilterte_liste_gas_erzeuger (&self, get_gefilterte_liste_gas_erzeuger_request: ports::GetGefilterteListeGasErzeugerRequest) -> Result<ports::GetGefilterteListeGasErzeugerResponse, Option<SoapFault>> {

        let __request = GetGefilterteListeGasErzeugerRequestSoapEnvelope::new(SoapGetGefilterteListeGasErzeugerRequest {
            body: get_gefilterte_liste_gas_erzeuger_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetGefilterteListeGasErzeuger")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetGefilterteListeGasErzeugerResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_gefilterte_liste_gas_verbraucher (&self, get_gefilterte_liste_gas_verbraucher_request: ports::GetGefilterteListeGasVerbraucherRequest) -> Result<ports::GetGefilterteListeGasVerbraucherResponse, Option<SoapFault>> {

        let __request = GetGefilterteListeGasVerbraucherRequestSoapEnvelope::new(SoapGetGefilterteListeGasVerbraucherRequest {
            body: get_gefilterte_liste_gas_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetGefilterteListeGasVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetGefilterteListeGasVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_gefilterte_liste_lokationen_strom_erzeuger (&self, get_gefilterte_liste_lokationen_strom_erzeuger_request: ports::GetGefilterteListeLokationenStromErzeugerRequest) -> Result<ports::GetGefilterteListeLokationenStromErzeugerResponse, Option<SoapFault>> {

        let __request = GetGefilterteListeLokationenStromErzeugerRequestSoapEnvelope::new(SoapGetGefilterteListeLokationenStromErzeugerRequest {
            body: get_gefilterte_liste_lokationen_strom_erzeuger_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetGefilterteListeLokationenStromErzeuger")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetGefilterteListeLokationenStromErzeugerResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_gefilterte_liste_lokationen_strom_verbraucher (&self, get_gefilterte_liste_lokationen_strom_verbraucher_request: ports::GetGefilterteListeLokationenStromVerbraucherRequest) -> Result<ports::GetGefilterteListeLokationenStromVerbraucherResponse, Option<SoapFault>> {

        let __request = GetGefilterteListeLokationenStromVerbraucherRequestSoapEnvelope::new(SoapGetGefilterteListeLokationenStromVerbraucherRequest {
            body: get_gefilterte_liste_lokationen_strom_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetGefilterteListeLokationenStromVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetGefilterteListeLokationenStromVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_gefilterte_liste_lokationen_gas_erzeuger (&self, get_gefilterte_liste_lokationen_gas_erzeuger_request: ports::GetGefilterteListeLokationenGasErzeugerRequest) -> Result<ports::GetGefilterteListeLokationenGasErzeugerResponse, Option<SoapFault>> {

        let __request = GetGefilterteListeLokationenGasErzeugerRequestSoapEnvelope::new(SoapGetGefilterteListeLokationenGasErzeugerRequest {
            body: get_gefilterte_liste_lokationen_gas_erzeuger_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetGefilterteListeLokationenGasErzeuger")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetGefilterteListeLokationenGasErzeugerResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_gefilterte_liste_lokationen_gas_verbraucher (&self, get_gefilterte_liste_lokationen_gas_verbraucher_request: ports::GetGefilterteListeLokationenGasVerbraucherRequest) -> Result<ports::GetGefilterteListeLokationenGasVerbraucherResponse, Option<SoapFault>> {

        let __request = GetGefilterteListeLokationenGasVerbraucherRequestSoapEnvelope::new(SoapGetGefilterteListeLokationenGasVerbraucherRequest {
            body: get_gefilterte_liste_lokationen_gas_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetGefilterteListeLokationenGasVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetGefilterteListeLokationenGasVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_biomasse (&self, get_einheit_biomasse_request: ports::GetEinheitBiomasseRequest) -> Result<ports::GetEinheitBiomasseResponse, Option<SoapFault>> {

        let __request = GetEinheitBiomasseRequestSoapEnvelope::new(SoapGetEinheitBiomasseRequest {
            body: get_einheit_biomasse_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitBiomasse")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitBiomasseResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_strom_speicher (&self, get_strom_speicher_request: ports::GetStromSpeicherRequest) -> Result<ports::GetStromSpeicherResponse, Option<SoapFault>> {

        let __request = GetStromSpeicherRequestSoapEnvelope::new(SoapGetStromSpeicherRequest {
            body: get_strom_speicher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetStromSpeicher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetStromSpeicherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_gas_speicher (&self, get_gas_speicher_request: ports::GetGasSpeicherRequest) -> Result<ports::GetGasSpeicherResponse, Option<SoapFault>> {

        let __request = GetGasSpeicherRequestSoapEnvelope::new(SoapGetGasSpeicherRequest {
            body: get_gas_speicher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetGasSpeicher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetGasSpeicherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_anlage_eeg_wind (&self, get_anlage_eeg_wind_request: ports::GetAnlageEegWindRequest) -> Result<ports::GetAnlageEegWindResponse, Option<SoapFault>> {

        let __request = GetAnlageEegWindRequestSoapEnvelope::new(SoapGetAnlageEegWindRequest {
            body: get_anlage_eeg_wind_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetAnlageEegWind")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetAnlageEegWindResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_anlage_eeg_solar (&self, get_anlage_eeg_solar_request: ports::GetAnlageEegSolarRequest) -> Result<ports::GetAnlageEegSolarResponse, Option<SoapFault>> {

        let __request = GetAnlageEegSolarRequestSoapEnvelope::new(SoapGetAnlageEegSolarRequest {
            body: get_anlage_eeg_solar_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetAnlageEegSolar")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetAnlageEegSolarResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_anlage_eeg_biomasse (&self, get_anlage_eeg_biomasse_request: ports::GetAnlageEegBiomasseRequest) -> Result<ports::GetAnlageEegBiomasseResponse, Option<SoapFault>> {

        let __request = GetAnlageEegBiomasseRequestSoapEnvelope::new(SoapGetAnlageEegBiomasseRequest {
            body: get_anlage_eeg_biomasse_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetAnlageEegBiomasse")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetAnlageEegBiomasseResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_anlage_eeg_wasser (&self, get_anlage_eeg_wasser_request: ports::GetAnlageEegWasserRequest) -> Result<ports::GetAnlageEegWasserResponse, Option<SoapFault>> {

        let __request = GetAnlageEegWasserRequestSoapEnvelope::new(SoapGetAnlageEegWasserRequest {
            body: get_anlage_eeg_wasser_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetAnlageEegWasser")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetAnlageEegWasserResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_anlage_eeg_speicher (&self, get_anlage_eeg_speicher_request: ports::GetAnlageEegSpeicherRequest) -> Result<ports::GetAnlageEegSpeicherResponse, Option<SoapFault>> {

        let __request = GetAnlageEegSpeicherRequestSoapEnvelope::new(SoapGetAnlageEegSpeicherRequest {
            body: get_anlage_eeg_speicher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetAnlageEegSpeicher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetAnlageEegSpeicherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_anlage_eeg_geothermie_grubengas_druckentspannung (&self, get_anlage_eeg_geothermie_grubengas_druckentspannung_request: ports::GetAnlageEegGeothermieGrubengasDruckentspannungRequest) -> Result<ports::GetAnlageEegGeothermieGrubengasDruckentspannungResponse, Option<SoapFault>> {

        let __request = GetAnlageEegGeothermieGrubengasDruckentspannungRequestSoapEnvelope::new(SoapGetAnlageEegGeothermieGrubengasDruckentspannungRequest {
            body: get_anlage_eeg_geothermie_grubengas_druckentspannung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetAnlageEegGeothermieGrubengasDruckentspannung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetAnlageEegGeothermieGrubengasDruckentspannungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_anlage_kwk (&self, get_anlage_kwk_request: ports::GetAnlageKwkRequest) -> Result<ports::GetAnlageKwkResponse, Option<SoapFault>> {

        let __request = GetAnlageKwkRequestSoapEnvelope::new(SoapGetAnlageKwkRequest {
            body: get_anlage_kwk_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetAnlageKwk")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetAnlageKwkResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_liste_alle_lokationen (&self, get_liste_alle_lokationen_request: ports::GetListeAlleLokationenRequest) -> Result<ports::GetListeAlleLokationenResponse, Option<SoapFault>> {

        let __request = GetListeAlleLokationenRequestSoapEnvelope::new(SoapGetListeAlleLokationenRequest {
            body: get_liste_alle_lokationen_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeAlleLokationen")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeAlleLokationenResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_liste_freigegebene_lokationen (&self, get_liste_freigegebene_lokationen_request: ports::GetListeFreigegebeneLokationenRequest) -> Result<ports::GetListeFreigegebeneLokationenResponse, Option<SoapFault>> {

        let __request = GetListeFreigegebeneLokationenRequestSoapEnvelope::new(SoapGetListeFreigegebeneLokationenRequest {
            body: get_liste_freigegebene_lokationen_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeFreigegebeneLokationen")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeFreigegebeneLokationenResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_lokation_strom_erzeuger (&self, get_lokation_strom_erzeuger_request: ports::GetLokationStromErzeugerRequest) -> Result<ports::GetLokationStromErzeugerResponse, Option<SoapFault>> {

        let __request = GetLokationStromErzeugerRequestSoapEnvelope::new(SoapGetLokationStromErzeugerRequest {
            body: get_lokation_strom_erzeuger_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetLokationStromErzeuger")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetLokationStromErzeugerResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_lokation_strom_verbraucher (&self, get_lokation_strom_verbraucher_request: ports::GetLokationStromVerbraucherRequest) -> Result<ports::GetLokationStromVerbraucherResponse, Option<SoapFault>> {

        let __request = GetLokationStromVerbraucherRequestSoapEnvelope::new(SoapGetLokationStromVerbraucherRequest {
            body: get_lokation_strom_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetLokationStromVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetLokationStromVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_lokation_gas_erzeuger (&self, get_lokation_gas_erzeuger_request: ports::GetLokationGasErzeugerRequest) -> Result<ports::GetLokationGasErzeugerResponse, Option<SoapFault>> {

        let __request = GetLokationGasErzeugerRequestSoapEnvelope::new(SoapGetLokationGasErzeugerRequest {
            body: get_lokation_gas_erzeuger_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetLokationGasErzeuger")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetLokationGasErzeugerResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_lokation_gas_verbraucher (&self, get_lokation_gas_verbraucher_request: ports::GetLokationGasVerbraucherRequest) -> Result<ports::GetLokationGasVerbraucherResponse, Option<SoapFault>> {

        let __request = GetLokationGasVerbraucherRequestSoapEnvelope::new(SoapGetLokationGasVerbraucherRequest {
            body: get_lokation_gas_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetLokationGasVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetLokationGasVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}}

            impl Anlage12 {
                async fn send_soap_request<T: YaSerialize>(&self, request: &T, action: &str) -> SoapResponse {
                    let body = to_string(request).expect("failed to generate xml");
                    debug!("SOAP Request: {}", body);
                    let mut req = self
                        .client
                        .post(&self.url)
                        .body(body)
                        .header("Content-Type", "text/xml")
                        .header("Soapaction", action);
                    if let Some(credentials) = &self.credentials {
                        req = req.basic_auth(
                            credentials.0.to_string(),
                            Option::Some(credentials.1.to_string()),
                        );
                    }
                    let res = req.send().await?;
                    let status = res.status();
                    debug!("SOAP Status: {}", status);
                    let txt = res.text().await.unwrap_or_default();
                    debug!("SOAP Response: {}", txt);
                    Ok((status, txt))
                }
            }
            impl Default for Anlage12 {
                fn default() -> Self {
                    Anlage12 {
                        client: reqwest::Client::new(),
                        url: "https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string(),
                        credentials: Option::None,
                     }
                }
            }
            impl Anlage12 {
                pub fn new(url: &str, credentials: Option<(String,String)>) -> Self {
                    Anlage12 {
                        client: reqwest::Client::new(),
                        url: url.to_string(),
                        credentials,
                    }
                }
        }
        pub struct Anlage12 {
                client: reqwest::Client,
                url: String,
                credentials: Option<(String,String)>
                }
                #[async_trait]
	impl ports::Anlage for Anlage12 {
	async fn get_liste_letzte_aktualisierung (&self, get_liste_letzte_aktualisierung_request: ports::GetListeLetzteAktualisierungRequest) -> Result<ports::GetListeLetzteAktualisierungResponse, Option<SoapFault>> {

        let __request = GetListeLetzteAktualisierungRequestSoapEnvelope::new(SoapGetListeLetzteAktualisierungRequest {
            body: get_liste_letzte_aktualisierung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeLetzteAktualisierung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeLetzteAktualisierungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_liste_alle_einheiten (&self, get_liste_alle_einheiten_request: ports::GetListeAlleEinheitenRequest) -> Result<ports::GetListeAlleEinheitenResponse, Option<SoapFault>> {

        let __request = GetListeAlleEinheitenRequestSoapEnvelope::new(SoapGetListeAlleEinheitenRequest {
            body: get_liste_alle_einheiten_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeAlleEinheiten")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeAlleEinheitenResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_liste_freigegebene_einheiten (&self, get_liste_freigegebene_einheiten_request: ports::GetListeFreigegebeneEinheitenRequest) -> Result<ports::GetListeFreigegebeneEinheitenResponse, Option<SoapFault>> {

        let __request = GetListeFreigegebeneEinheitenRequestSoapEnvelope::new(SoapGetListeFreigegebeneEinheitenRequest {
            body: get_liste_freigegebene_einheiten_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeFreigegebeneEinheiten")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeFreigegebeneEinheitenResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_meine_einheiten (&self, get_meine_einheiten_request: ports::GetMeineEinheitenRequest) -> Result<ports::GetMeineEinheitenResponse, Option<SoapFault>> {

        let __request = GetMeineEinheitenRequestSoapEnvelope::new(SoapGetMeineEinheitenRequest {
            body: get_meine_einheiten_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetMeineEinheiten")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetMeineEinheitenResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_liste_einheiten_in_meinem_netz (&self, get_liste_einheiten_in_meinem_netz_request: ports::GetListeEinheitenInMeinemNetzRequest) -> Result<ports::GetListeEinheitenInMeinemNetzResponse, Option<SoapFault>> {

        let __request = GetListeEinheitenInMeinemNetzRequestSoapEnvelope::new(SoapGetListeEinheitenInMeinemNetzRequest {
            body: get_liste_einheiten_in_meinem_netz_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeEinheitenInMeinemNetz")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeEinheitenInMeinemNetzResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_liste_geloeschte_und_deaktivierte_einheiten (&self, get_liste_geloeschte_und_deaktivierte_einheiten_request: ports::GetListeGeloeschteUndDeaktivierteEinheitenRequest) -> Result<ports::GetListeGeloeschteUndDeaktivierteEinheitenResponse, Option<SoapFault>> {

        let __request = GetListeGeloeschteUndDeaktivierteEinheitenRequestSoapEnvelope::new(SoapGetListeGeloeschteUndDeaktivierteEinheitenRequest {
            body: get_liste_geloeschte_und_deaktivierte_einheiten_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeGeloeschteUndDeaktivierteEinheiten")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeGeloeschteUndDeaktivierteEinheitenResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_liste_einheiten_aenderung_netzbetreiberzuordnung (&self, get_liste_einheiten_aenderung_netzbetreiberzuordnung_request: ports::GetListeEinheitenAenderungNetzbetreiberzuordnungRequest) -> Result<ports::GetListeEinheitenAenderungNetzbetreiberzuordnungResponse, Option<SoapFault>> {

        let __request = GetListeEinheitenAenderungNetzbetreiberzuordnungRequestSoapEnvelope::new(SoapGetListeEinheitenAenderungNetzbetreiberzuordnungRequest {
            body: get_liste_einheiten_aenderung_netzbetreiberzuordnung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeEinheitenAenderungNetzbetreiberzuordnung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeEinheitenAenderungNetzbetreiberzuordnungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_wind (&self, get_einheit_wind_request: ports::GetEinheitWindRequest) -> Result<ports::GetEinheitWindResponse, Option<SoapFault>> {

        let __request = GetEinheitWindRequestSoapEnvelope::new(SoapGetEinheitWindRequest {
            body: get_einheit_wind_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitWind")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitWindResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_solar (&self, get_einheit_solar_request: ports::GetEinheitSolarRequest) -> Result<ports::GetEinheitSolarResponse, Option<SoapFault>> {

        let __request = GetEinheitSolarRequestSoapEnvelope::new(SoapGetEinheitSolarRequest {
            body: get_einheit_solar_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitSolar")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitSolarResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_wasser (&self, get_einheit_wasser_request: ports::GetEinheitWasserRequest) -> Result<ports::GetEinheitWasserResponse, Option<SoapFault>> {

        let __request = GetEinheitWasserRequestSoapEnvelope::new(SoapGetEinheitWasserRequest {
            body: get_einheit_wasser_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitWasser")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitWasserResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_geothermie_grubengas_druckentspannung (&self, get_einheit_geothermie_grubengas_druckentspannung_request: ports::GetEinheitGeothermieGrubengasDruckentspannungRequest) -> Result<ports::GetEinheitGeothermieGrubengasDruckentspannungResponse, Option<SoapFault>> {

        let __request = GetEinheitGeothermieGrubengasDruckentspannungRequestSoapEnvelope::new(SoapGetEinheitGeothermieGrubengasDruckentspannungRequest {
            body: get_einheit_geothermie_grubengas_druckentspannung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitGeothermieGrubengasDruckentspannung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitGeothermieGrubengasDruckentspannungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_verbrennung (&self, get_einheit_verbrennung_request: ports::GetEinheitVerbrennungRequest) -> Result<ports::GetEinheitVerbrennungResponse, Option<SoapFault>> {

        let __request = GetEinheitVerbrennungRequestSoapEnvelope::new(SoapGetEinheitVerbrennungRequest {
            body: get_einheit_verbrennung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitVerbrennung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitVerbrennungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_kernkraft (&self, get_einheit_kernkraft_request: ports::GetEinheitKernkraftRequest) -> Result<ports::GetEinheitKernkraftResponse, Option<SoapFault>> {

        let __request = GetEinheitKernkraftRequestSoapEnvelope::new(SoapGetEinheitKernkraftRequest {
            body: get_einheit_kernkraft_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitKernkraft")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitKernkraftResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_strom_speicher (&self, get_einheit_strom_speicher_request: ports::GetEinheitStromSpeicherRequest) -> Result<ports::GetEinheitStromSpeicherResponse, Option<SoapFault>> {

        let __request = GetEinheitStromSpeicherRequestSoapEnvelope::new(SoapGetEinheitStromSpeicherRequest {
            body: get_einheit_strom_speicher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitStromSpeicher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitStromSpeicherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_strom_verbraucher (&self, get_einheit_strom_verbraucher_request: ports::GetEinheitStromVerbraucherRequest) -> Result<ports::GetEinheitStromVerbraucherResponse, Option<SoapFault>> {

        let __request = GetEinheitStromVerbraucherRequestSoapEnvelope::new(SoapGetEinheitStromVerbraucherRequest {
            body: get_einheit_strom_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitStromVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitStromVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_gas_erzeuger (&self, get_einheit_gas_erzeuger_request: ports::GetEinheitGasErzeugerRequest) -> Result<ports::GetEinheitGasErzeugerResponse, Option<SoapFault>> {

        let __request = GetEinheitGasErzeugerRequestSoapEnvelope::new(SoapGetEinheitGasErzeugerRequest {
            body: get_einheit_gas_erzeuger_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitGasErzeuger")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitGasErzeugerResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_gas_speicher (&self, get_einheit_gas_speicher_request: ports::GetEinheitGasSpeicherRequest) -> Result<ports::GetEinheitGasSpeicherResponse, Option<SoapFault>> {

        let __request = GetEinheitGasSpeicherRequestSoapEnvelope::new(SoapGetEinheitGasSpeicherRequest {
            body: get_einheit_gas_speicher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitGasSpeicher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitGasSpeicherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_gas_verbraucher (&self, get_einheit_gas_verbraucher_request: ports::GetEinheitGasVerbraucherRequest) -> Result<ports::GetEinheitGasVerbraucherResponse, Option<SoapFault>> {

        let __request = GetEinheitGasVerbraucherRequestSoapEnvelope::new(SoapGetEinheitGasVerbraucherRequest {
            body: get_einheit_gas_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitGasVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitGasVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_genehmigung (&self, get_einheit_genehmigung_request: ports::GetEinheitGenehmigungRequest) -> Result<ports::GetEinheitGenehmigungResponse, Option<SoapFault>> {

        let __request = GetEinheitGenehmigungRequestSoapEnvelope::new(SoapGetEinheitGenehmigungRequest {
            body: get_einheit_genehmigung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitGenehmigung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitGenehmigungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_gefilterte_liste_strom_erzeuger (&self, get_gefilterte_liste_strom_erzeuger_request: ports::GetGefilterteListeStromErzeugerRequest) -> Result<ports::GetGefilterteListeStromErzeugerResponse, Option<SoapFault>> {

        let __request = GetGefilterteListeStromErzeugerRequestSoapEnvelope::new(SoapGetGefilterteListeStromErzeugerRequest {
            body: get_gefilterte_liste_strom_erzeuger_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetGefilterteListeStromErzeuger")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetGefilterteListeStromErzeugerResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_gefilterte_liste_strom_verbraucher (&self, get_gefilterte_liste_strom_verbraucher_request: ports::GetGefilterteListeStromVerbraucherRequest) -> Result<ports::GetGefilterteListeStromVerbraucherResponse, Option<SoapFault>> {

        let __request = GetGefilterteListeStromVerbraucherRequestSoapEnvelope::new(SoapGetGefilterteListeStromVerbraucherRequest {
            body: get_gefilterte_liste_strom_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetGefilterteListeStromVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetGefilterteListeStromVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_gefilterte_liste_gas_erzeuger (&self, get_gefilterte_liste_gas_erzeuger_request: ports::GetGefilterteListeGasErzeugerRequest) -> Result<ports::GetGefilterteListeGasErzeugerResponse, Option<SoapFault>> {

        let __request = GetGefilterteListeGasErzeugerRequestSoapEnvelope::new(SoapGetGefilterteListeGasErzeugerRequest {
            body: get_gefilterte_liste_gas_erzeuger_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetGefilterteListeGasErzeuger")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetGefilterteListeGasErzeugerResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_gefilterte_liste_gas_verbraucher (&self, get_gefilterte_liste_gas_verbraucher_request: ports::GetGefilterteListeGasVerbraucherRequest) -> Result<ports::GetGefilterteListeGasVerbraucherResponse, Option<SoapFault>> {

        let __request = GetGefilterteListeGasVerbraucherRequestSoapEnvelope::new(SoapGetGefilterteListeGasVerbraucherRequest {
            body: get_gefilterte_liste_gas_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetGefilterteListeGasVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetGefilterteListeGasVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_gefilterte_liste_lokationen_strom_erzeuger (&self, get_gefilterte_liste_lokationen_strom_erzeuger_request: ports::GetGefilterteListeLokationenStromErzeugerRequest) -> Result<ports::GetGefilterteListeLokationenStromErzeugerResponse, Option<SoapFault>> {

        let __request = GetGefilterteListeLokationenStromErzeugerRequestSoapEnvelope::new(SoapGetGefilterteListeLokationenStromErzeugerRequest {
            body: get_gefilterte_liste_lokationen_strom_erzeuger_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetGefilterteListeLokationenStromErzeuger")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetGefilterteListeLokationenStromErzeugerResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_gefilterte_liste_lokationen_strom_verbraucher (&self, get_gefilterte_liste_lokationen_strom_verbraucher_request: ports::GetGefilterteListeLokationenStromVerbraucherRequest) -> Result<ports::GetGefilterteListeLokationenStromVerbraucherResponse, Option<SoapFault>> {

        let __request = GetGefilterteListeLokationenStromVerbraucherRequestSoapEnvelope::new(SoapGetGefilterteListeLokationenStromVerbraucherRequest {
            body: get_gefilterte_liste_lokationen_strom_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetGefilterteListeLokationenStromVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetGefilterteListeLokationenStromVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_gefilterte_liste_lokationen_gas_erzeuger (&self, get_gefilterte_liste_lokationen_gas_erzeuger_request: ports::GetGefilterteListeLokationenGasErzeugerRequest) -> Result<ports::GetGefilterteListeLokationenGasErzeugerResponse, Option<SoapFault>> {

        let __request = GetGefilterteListeLokationenGasErzeugerRequestSoapEnvelope::new(SoapGetGefilterteListeLokationenGasErzeugerRequest {
            body: get_gefilterte_liste_lokationen_gas_erzeuger_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetGefilterteListeLokationenGasErzeuger")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetGefilterteListeLokationenGasErzeugerResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_gefilterte_liste_lokationen_gas_verbraucher (&self, get_gefilterte_liste_lokationen_gas_verbraucher_request: ports::GetGefilterteListeLokationenGasVerbraucherRequest) -> Result<ports::GetGefilterteListeLokationenGasVerbraucherResponse, Option<SoapFault>> {

        let __request = GetGefilterteListeLokationenGasVerbraucherRequestSoapEnvelope::new(SoapGetGefilterteListeLokationenGasVerbraucherRequest {
            body: get_gefilterte_liste_lokationen_gas_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetGefilterteListeLokationenGasVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetGefilterteListeLokationenGasVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_einheit_biomasse (&self, get_einheit_biomasse_request: ports::GetEinheitBiomasseRequest) -> Result<ports::GetEinheitBiomasseResponse, Option<SoapFault>> {

        let __request = GetEinheitBiomasseRequestSoapEnvelope::new(SoapGetEinheitBiomasseRequest {
            body: get_einheit_biomasse_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetEinheitBiomasse")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetEinheitBiomasseResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_strom_speicher (&self, get_strom_speicher_request: ports::GetStromSpeicherRequest) -> Result<ports::GetStromSpeicherResponse, Option<SoapFault>> {

        let __request = GetStromSpeicherRequestSoapEnvelope::new(SoapGetStromSpeicherRequest {
            body: get_strom_speicher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetStromSpeicher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetStromSpeicherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_gas_speicher (&self, get_gas_speicher_request: ports::GetGasSpeicherRequest) -> Result<ports::GetGasSpeicherResponse, Option<SoapFault>> {

        let __request = GetGasSpeicherRequestSoapEnvelope::new(SoapGetGasSpeicherRequest {
            body: get_gas_speicher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetGasSpeicher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetGasSpeicherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_anlage_eeg_wind (&self, get_anlage_eeg_wind_request: ports::GetAnlageEegWindRequest) -> Result<ports::GetAnlageEegWindResponse, Option<SoapFault>> {

        let __request = GetAnlageEegWindRequestSoapEnvelope::new(SoapGetAnlageEegWindRequest {
            body: get_anlage_eeg_wind_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetAnlageEegWind")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetAnlageEegWindResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_anlage_eeg_solar (&self, get_anlage_eeg_solar_request: ports::GetAnlageEegSolarRequest) -> Result<ports::GetAnlageEegSolarResponse, Option<SoapFault>> {

        let __request = GetAnlageEegSolarRequestSoapEnvelope::new(SoapGetAnlageEegSolarRequest {
            body: get_anlage_eeg_solar_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetAnlageEegSolar")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetAnlageEegSolarResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_anlage_eeg_biomasse (&self, get_anlage_eeg_biomasse_request: ports::GetAnlageEegBiomasseRequest) -> Result<ports::GetAnlageEegBiomasseResponse, Option<SoapFault>> {

        let __request = GetAnlageEegBiomasseRequestSoapEnvelope::new(SoapGetAnlageEegBiomasseRequest {
            body: get_anlage_eeg_biomasse_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetAnlageEegBiomasse")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetAnlageEegBiomasseResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_anlage_eeg_wasser (&self, get_anlage_eeg_wasser_request: ports::GetAnlageEegWasserRequest) -> Result<ports::GetAnlageEegWasserResponse, Option<SoapFault>> {

        let __request = GetAnlageEegWasserRequestSoapEnvelope::new(SoapGetAnlageEegWasserRequest {
            body: get_anlage_eeg_wasser_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetAnlageEegWasser")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetAnlageEegWasserResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_anlage_eeg_speicher (&self, get_anlage_eeg_speicher_request: ports::GetAnlageEegSpeicherRequest) -> Result<ports::GetAnlageEegSpeicherResponse, Option<SoapFault>> {

        let __request = GetAnlageEegSpeicherRequestSoapEnvelope::new(SoapGetAnlageEegSpeicherRequest {
            body: get_anlage_eeg_speicher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetAnlageEegSpeicher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetAnlageEegSpeicherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_anlage_eeg_geothermie_grubengas_druckentspannung (&self, get_anlage_eeg_geothermie_grubengas_druckentspannung_request: ports::GetAnlageEegGeothermieGrubengasDruckentspannungRequest) -> Result<ports::GetAnlageEegGeothermieGrubengasDruckentspannungResponse, Option<SoapFault>> {

        let __request = GetAnlageEegGeothermieGrubengasDruckentspannungRequestSoapEnvelope::new(SoapGetAnlageEegGeothermieGrubengasDruckentspannungRequest {
            body: get_anlage_eeg_geothermie_grubengas_druckentspannung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetAnlageEegGeothermieGrubengasDruckentspannung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetAnlageEegGeothermieGrubengasDruckentspannungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_anlage_kwk (&self, get_anlage_kwk_request: ports::GetAnlageKwkRequest) -> Result<ports::GetAnlageKwkResponse, Option<SoapFault>> {

        let __request = GetAnlageKwkRequestSoapEnvelope::new(SoapGetAnlageKwkRequest {
            body: get_anlage_kwk_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetAnlageKwk")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetAnlageKwkResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_liste_alle_lokationen (&self, get_liste_alle_lokationen_request: ports::GetListeAlleLokationenRequest) -> Result<ports::GetListeAlleLokationenResponse, Option<SoapFault>> {

        let __request = GetListeAlleLokationenRequestSoapEnvelope::new(SoapGetListeAlleLokationenRequest {
            body: get_liste_alle_lokationen_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeAlleLokationen")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeAlleLokationenResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_liste_freigegebene_lokationen (&self, get_liste_freigegebene_lokationen_request: ports::GetListeFreigegebeneLokationenRequest) -> Result<ports::GetListeFreigegebeneLokationenResponse, Option<SoapFault>> {

        let __request = GetListeFreigegebeneLokationenRequestSoapEnvelope::new(SoapGetListeFreigegebeneLokationenRequest {
            body: get_liste_freigegebene_lokationen_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeFreigegebeneLokationen")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeFreigegebeneLokationenResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_lokation_strom_erzeuger (&self, get_lokation_strom_erzeuger_request: ports::GetLokationStromErzeugerRequest) -> Result<ports::GetLokationStromErzeugerResponse, Option<SoapFault>> {

        let __request = GetLokationStromErzeugerRequestSoapEnvelope::new(SoapGetLokationStromErzeugerRequest {
            body: get_lokation_strom_erzeuger_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetLokationStromErzeuger")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetLokationStromErzeugerResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_lokation_strom_verbraucher (&self, get_lokation_strom_verbraucher_request: ports::GetLokationStromVerbraucherRequest) -> Result<ports::GetLokationStromVerbraucherResponse, Option<SoapFault>> {

        let __request = GetLokationStromVerbraucherRequestSoapEnvelope::new(SoapGetLokationStromVerbraucherRequest {
            body: get_lokation_strom_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetLokationStromVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetLokationStromVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_lokation_gas_erzeuger (&self, get_lokation_gas_erzeuger_request: ports::GetLokationGasErzeugerRequest) -> Result<ports::GetLokationGasErzeugerResponse, Option<SoapFault>> {

        let __request = GetLokationGasErzeugerRequestSoapEnvelope::new(SoapGetLokationGasErzeugerRequest {
            body: get_lokation_gas_erzeuger_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetLokationGasErzeuger")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetLokationGasErzeugerResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_lokation_gas_verbraucher (&self, get_lokation_gas_verbraucher_request: ports::GetLokationGasVerbraucherRequest) -> Result<ports::GetLokationGasVerbraucherResponse, Option<SoapFault>> {

        let __request = GetLokationGasVerbraucherRequestSoapEnvelope::new(SoapGetLokationGasVerbraucherRequest {
            body: get_lokation_gas_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetLokationGasVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetLokationGasVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}}

            impl Netzanschlusspunkt {
                async fn send_soap_request<T: YaSerialize>(&self, request: &T, action: &str) -> SoapResponse {
                    let body = to_string(request).expect("failed to generate xml");
                    debug!("SOAP Request: {}", body);
                    let mut req = self
                        .client
                        .post(&self.url)
                        .body(body)
                        .header("Content-Type", "text/xml")
                        .header("Soapaction", action);
                    if let Some(credentials) = &self.credentials {
                        req = req.basic_auth(
                            credentials.0.to_string(),
                            Option::Some(credentials.1.to_string()),
                        );
                    }
                    let res = req.send().await?;
                    let status = res.status();
                    debug!("SOAP Status: {}", status);
                    let txt = res.text().await.unwrap_or_default();
                    debug!("SOAP Response: {}", txt);
                    Ok((status, txt))
                }
            }
            #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetNetzanschlusspunktStromErzeugerRequest {
                        #[yaserde(rename = "SetNetzanschlusspunktStromErzeuger", default)]
                        pub body: ports::SetNetzanschlusspunktStromErzeugerRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetNetzanschlusspunktStromErzeugerRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetNetzanschlusspunktStromErzeugerRequest,
        }
        
        impl SetNetzanschlusspunktStromErzeugerRequestSoapEnvelope {
            pub fn new(body: SoapSetNetzanschlusspunktStromErzeugerRequest) -> Self {
                SetNetzanschlusspunktStromErzeugerRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetNetzanschlusspunktStromErzeugerResponse {
                    #[yaserde(rename = "SetNetzanschlusspunktStromErzeugerResponse", default)]
                    pub body: ports::SetNetzanschlusspunktStromErzeugerResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetNetzanschlusspunktStromErzeugerResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetNetzanschlusspunktStromErzeugerResponse,
        }
        
        impl SetNetzanschlusspunktStromErzeugerResponseSoapEnvelope {
            pub fn new(body: SoapSetNetzanschlusspunktStromErzeugerResponse) -> Self {
                SetNetzanschlusspunktStromErzeugerResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetNetzanschlusspunktStromVerbraucherRequest {
                        #[yaserde(rename = "SetNetzanschlusspunktStromVerbraucher", default)]
                        pub body: ports::SetNetzanschlusspunktStromVerbraucherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetNetzanschlusspunktStromVerbraucherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetNetzanschlusspunktStromVerbraucherRequest,
        }
        
        impl SetNetzanschlusspunktStromVerbraucherRequestSoapEnvelope {
            pub fn new(body: SoapSetNetzanschlusspunktStromVerbraucherRequest) -> Self {
                SetNetzanschlusspunktStromVerbraucherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetNetzanschlusspunktStromVerbraucherResponse {
                    #[yaserde(rename = "SetNetzanschlusspunktStromVerbraucherResponse", default)]
                    pub body: ports::SetNetzanschlusspunktStromVerbraucherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetNetzanschlusspunktStromVerbraucherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetNetzanschlusspunktStromVerbraucherResponse,
        }
        
        impl SetNetzanschlusspunktStromVerbraucherResponseSoapEnvelope {
            pub fn new(body: SoapSetNetzanschlusspunktStromVerbraucherResponse) -> Self {
                SetNetzanschlusspunktStromVerbraucherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetNetzanschlusspunktGasErzeugerRequest {
                        #[yaserde(rename = "SetNetzanschlusspunktGasErzeuger", default)]
                        pub body: ports::SetNetzanschlusspunktGasErzeugerRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetNetzanschlusspunktGasErzeugerRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetNetzanschlusspunktGasErzeugerRequest,
        }
        
        impl SetNetzanschlusspunktGasErzeugerRequestSoapEnvelope {
            pub fn new(body: SoapSetNetzanschlusspunktGasErzeugerRequest) -> Self {
                SetNetzanschlusspunktGasErzeugerRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetNetzanschlusspunktGasErzeugerResponse {
                    #[yaserde(rename = "SetNetzanschlusspunktGasErzeugerResponse", default)]
                    pub body: ports::SetNetzanschlusspunktGasErzeugerResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetNetzanschlusspunktGasErzeugerResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetNetzanschlusspunktGasErzeugerResponse,
        }
        
        impl SetNetzanschlusspunktGasErzeugerResponseSoapEnvelope {
            pub fn new(body: SoapSetNetzanschlusspunktGasErzeugerResponse) -> Self {
                SetNetzanschlusspunktGasErzeugerResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetNetzanschlusspunktGasVerbraucherRequest {
                        #[yaserde(rename = "SetNetzanschlusspunktGasVerbraucher", default)]
                        pub body: ports::SetNetzanschlusspunktGasVerbraucherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetNetzanschlusspunktGasVerbraucherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetNetzanschlusspunktGasVerbraucherRequest,
        }
        
        impl SetNetzanschlusspunktGasVerbraucherRequestSoapEnvelope {
            pub fn new(body: SoapSetNetzanschlusspunktGasVerbraucherRequest) -> Self {
                SetNetzanschlusspunktGasVerbraucherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetNetzanschlusspunktGasVerbraucherResponse {
                    #[yaserde(rename = "SetNetzanschlusspunktGasVerbraucherResponse", default)]
                    pub body: ports::SetNetzanschlusspunktGasVerbraucherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetNetzanschlusspunktGasVerbraucherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetNetzanschlusspunktGasVerbraucherResponse,
        }
        
        impl SetNetzanschlusspunktGasVerbraucherResponseSoapEnvelope {
            pub fn new(body: SoapSetNetzanschlusspunktGasVerbraucherResponse) -> Self {
                SetNetzanschlusspunktGasVerbraucherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapDeleteNetzanschlusspunktRequest {
                        #[yaserde(rename = "DeleteNetzanschlusspunkt", default)]
                        pub body: ports::DeleteNetzanschlusspunktRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct DeleteNetzanschlusspunktRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapDeleteNetzanschlusspunktRequest,
        }
        
        impl DeleteNetzanschlusspunktRequestSoapEnvelope {
            pub fn new(body: SoapDeleteNetzanschlusspunktRequest) -> Self {
                DeleteNetzanschlusspunktRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapDeleteNetzanschlusspunktResponse {
                    #[yaserde(rename = "DeleteNetzanschlusspunktResponse", default)]
                    pub body: ports::DeleteNetzanschlusspunktResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct DeleteNetzanschlusspunktResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapDeleteNetzanschlusspunktResponse,
        }
        
        impl DeleteNetzanschlusspunktResponseSoapEnvelope {
            pub fn new(body: SoapDeleteNetzanschlusspunktResponse) -> Self {
                DeleteNetzanschlusspunktResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeMeineNetzanschlusspunkteRequest {
                        #[yaserde(rename = "GetListeMeineNetzanschlusspunkte", default)]
                        pub body: ports::GetListeMeineNetzanschlusspunkteRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeMeineNetzanschlusspunkteRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeMeineNetzanschlusspunkteRequest,
        }
        
        impl GetListeMeineNetzanschlusspunkteRequestSoapEnvelope {
            pub fn new(body: SoapGetListeMeineNetzanschlusspunkteRequest) -> Self {
                GetListeMeineNetzanschlusspunkteRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeMeineNetzanschlusspunkteResponse {
                    #[yaserde(rename = "GetListeMeineNetzanschlusspunkteResponse", default)]
                    pub body: ports::GetListeMeineNetzanschlusspunkteResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeMeineNetzanschlusspunkteResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeMeineNetzanschlusspunkteResponse,
        }
        
        impl GetListeMeineNetzanschlusspunkteResponseSoapEnvelope {
            pub fn new(body: SoapGetListeMeineNetzanschlusspunkteResponse) -> Self {
                GetListeMeineNetzanschlusspunkteResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeAlleNetzanschlusspunkteRequest {
                        #[yaserde(rename = "GetListeAlleNetzanschlusspunkte", default)]
                        pub body: ports::GetListeAlleNetzanschlusspunkteRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeAlleNetzanschlusspunkteRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeAlleNetzanschlusspunkteRequest,
        }
        
        impl GetListeAlleNetzanschlusspunkteRequestSoapEnvelope {
            pub fn new(body: SoapGetListeAlleNetzanschlusspunkteRequest) -> Self {
                GetListeAlleNetzanschlusspunkteRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetListeAlleNetzanschlusspunkteResponse {
                    #[yaserde(rename = "GetListeAlleNetzanschlusspunkteResponse", default)]
                    pub body: ports::GetListeAlleNetzanschlusspunkteResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetListeAlleNetzanschlusspunkteResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetListeAlleNetzanschlusspunkteResponse,
        }
        
        impl GetListeAlleNetzanschlusspunkteResponseSoapEnvelope {
            pub fn new(body: SoapGetListeAlleNetzanschlusspunkteResponse) -> Self {
                GetListeAlleNetzanschlusspunkteResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                impl Default for Netzanschlusspunkt {
                fn default() -> Self {
                    Netzanschlusspunkt {
                        client: reqwest::Client::new(),
                        url: "https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string(),
                        credentials: Option::None,
                     }
                }
            }
            impl Netzanschlusspunkt {
                pub fn new(url: &str, credentials: Option<(String,String)>) -> Self {
                    Netzanschlusspunkt {
                        client: reqwest::Client::new(),
                        url: url.to_string(),
                        credentials,
                    }
                }
        }
        pub struct Netzanschlusspunkt {
                client: reqwest::Client,
                url: String,
                credentials: Option<(String,String)>
                }
                #[async_trait]
	impl ports::Netzanschlusspunkt for Netzanschlusspunkt {
	async fn set_netzanschlusspunkt_strom_erzeuger (&self, set_netzanschlusspunkt_strom_erzeuger_request: ports::SetNetzanschlusspunktStromErzeugerRequest) -> Result<ports::SetNetzanschlusspunktStromErzeugerResponse, Option<SoapFault>> {

        let __request = SetNetzanschlusspunktStromErzeugerRequestSoapEnvelope::new(SoapSetNetzanschlusspunktStromErzeugerRequest {
            body: set_netzanschlusspunkt_strom_erzeuger_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetNetzanschlusspunktStromErzeuger")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetNetzanschlusspunktStromErzeugerResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_netzanschlusspunkt_strom_verbraucher (&self, set_netzanschlusspunkt_strom_verbraucher_request: ports::SetNetzanschlusspunktStromVerbraucherRequest) -> Result<ports::SetNetzanschlusspunktStromVerbraucherResponse, Option<SoapFault>> {

        let __request = SetNetzanschlusspunktStromVerbraucherRequestSoapEnvelope::new(SoapSetNetzanschlusspunktStromVerbraucherRequest {
            body: set_netzanschlusspunkt_strom_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetNetzanschlusspunktStromVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetNetzanschlusspunktStromVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_netzanschlusspunkt_gas_erzeuger (&self, set_netzanschlusspunkt_gas_erzeuger_request: ports::SetNetzanschlusspunktGasErzeugerRequest) -> Result<ports::SetNetzanschlusspunktGasErzeugerResponse, Option<SoapFault>> {

        let __request = SetNetzanschlusspunktGasErzeugerRequestSoapEnvelope::new(SoapSetNetzanschlusspunktGasErzeugerRequest {
            body: set_netzanschlusspunkt_gas_erzeuger_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetNetzanschlusspunktGasErzeuger")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetNetzanschlusspunktGasErzeugerResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_netzanschlusspunkt_gas_verbraucher (&self, set_netzanschlusspunkt_gas_verbraucher_request: ports::SetNetzanschlusspunktGasVerbraucherRequest) -> Result<ports::SetNetzanschlusspunktGasVerbraucherResponse, Option<SoapFault>> {

        let __request = SetNetzanschlusspunktGasVerbraucherRequestSoapEnvelope::new(SoapSetNetzanschlusspunktGasVerbraucherRequest {
            body: set_netzanschlusspunkt_gas_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetNetzanschlusspunktGasVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetNetzanschlusspunktGasVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn delete_netzanschlusspunkt (&self, delete_netzanschlusspunkt_request: ports::DeleteNetzanschlusspunktRequest) -> Result<ports::DeleteNetzanschlusspunktResponse, Option<SoapFault>> {

        let __request = DeleteNetzanschlusspunktRequestSoapEnvelope::new(SoapDeleteNetzanschlusspunktRequest {
            body: delete_netzanschlusspunkt_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "DeleteNetzanschlusspunkt")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: DeleteNetzanschlusspunktResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_liste_meine_netzanschlusspunkte (&self, get_liste_meine_netzanschlusspunkte_request: ports::GetListeMeineNetzanschlusspunkteRequest) -> Result<ports::GetListeMeineNetzanschlusspunkteResponse, Option<SoapFault>> {

        let __request = GetListeMeineNetzanschlusspunkteRequestSoapEnvelope::new(SoapGetListeMeineNetzanschlusspunkteRequest {
            body: get_liste_meine_netzanschlusspunkte_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeMeineNetzanschlusspunkte")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeMeineNetzanschlusspunkteResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_liste_alle_netzanschlusspunkte (&self, get_liste_alle_netzanschlusspunkte_request: ports::GetListeAlleNetzanschlusspunkteRequest) -> Result<ports::GetListeAlleNetzanschlusspunkteResponse, Option<SoapFault>> {

        let __request = GetListeAlleNetzanschlusspunkteRequestSoapEnvelope::new(SoapGetListeAlleNetzanschlusspunkteRequest {
            body: get_liste_alle_netzanschlusspunkte_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeAlleNetzanschlusspunkte")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeAlleNetzanschlusspunkteResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}}

            impl Netzanschlusspunkt12 {
                async fn send_soap_request<T: YaSerialize>(&self, request: &T, action: &str) -> SoapResponse {
                    let body = to_string(request).expect("failed to generate xml");
                    debug!("SOAP Request: {}", body);
                    let mut req = self
                        .client
                        .post(&self.url)
                        .body(body)
                        .header("Content-Type", "text/xml")
                        .header("Soapaction", action);
                    if let Some(credentials) = &self.credentials {
                        req = req.basic_auth(
                            credentials.0.to_string(),
                            Option::Some(credentials.1.to_string()),
                        );
                    }
                    let res = req.send().await?;
                    let status = res.status();
                    debug!("SOAP Status: {}", status);
                    let txt = res.text().await.unwrap_or_default();
                    debug!("SOAP Response: {}", txt);
                    Ok((status, txt))
                }
            }
            impl Default for Netzanschlusspunkt12 {
                fn default() -> Self {
                    Netzanschlusspunkt12 {
                        client: reqwest::Client::new(),
                        url: "https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string(),
                        credentials: Option::None,
                     }
                }
            }
            impl Netzanschlusspunkt12 {
                pub fn new(url: &str, credentials: Option<(String,String)>) -> Self {
                    Netzanschlusspunkt12 {
                        client: reqwest::Client::new(),
                        url: url.to_string(),
                        credentials,
                    }
                }
        }
        pub struct Netzanschlusspunkt12 {
                client: reqwest::Client,
                url: String,
                credentials: Option<(String,String)>
                }
                #[async_trait]
	impl ports::Netzanschlusspunkt for Netzanschlusspunkt12 {
	async fn set_netzanschlusspunkt_strom_erzeuger (&self, set_netzanschlusspunkt_strom_erzeuger_request: ports::SetNetzanschlusspunktStromErzeugerRequest) -> Result<ports::SetNetzanschlusspunktStromErzeugerResponse, Option<SoapFault>> {

        let __request = SetNetzanschlusspunktStromErzeugerRequestSoapEnvelope::new(SoapSetNetzanschlusspunktStromErzeugerRequest {
            body: set_netzanschlusspunkt_strom_erzeuger_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetNetzanschlusspunktStromErzeuger")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetNetzanschlusspunktStromErzeugerResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_netzanschlusspunkt_strom_verbraucher (&self, set_netzanschlusspunkt_strom_verbraucher_request: ports::SetNetzanschlusspunktStromVerbraucherRequest) -> Result<ports::SetNetzanschlusspunktStromVerbraucherResponse, Option<SoapFault>> {

        let __request = SetNetzanschlusspunktStromVerbraucherRequestSoapEnvelope::new(SoapSetNetzanschlusspunktStromVerbraucherRequest {
            body: set_netzanschlusspunkt_strom_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetNetzanschlusspunktStromVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetNetzanschlusspunktStromVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_netzanschlusspunkt_gas_erzeuger (&self, set_netzanschlusspunkt_gas_erzeuger_request: ports::SetNetzanschlusspunktGasErzeugerRequest) -> Result<ports::SetNetzanschlusspunktGasErzeugerResponse, Option<SoapFault>> {

        let __request = SetNetzanschlusspunktGasErzeugerRequestSoapEnvelope::new(SoapSetNetzanschlusspunktGasErzeugerRequest {
            body: set_netzanschlusspunkt_gas_erzeuger_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetNetzanschlusspunktGasErzeuger")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetNetzanschlusspunktGasErzeugerResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_netzanschlusspunkt_gas_verbraucher (&self, set_netzanschlusspunkt_gas_verbraucher_request: ports::SetNetzanschlusspunktGasVerbraucherRequest) -> Result<ports::SetNetzanschlusspunktGasVerbraucherResponse, Option<SoapFault>> {

        let __request = SetNetzanschlusspunktGasVerbraucherRequestSoapEnvelope::new(SoapSetNetzanschlusspunktGasVerbraucherRequest {
            body: set_netzanschlusspunkt_gas_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetNetzanschlusspunktGasVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetNetzanschlusspunktGasVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn delete_netzanschlusspunkt (&self, delete_netzanschlusspunkt_request: ports::DeleteNetzanschlusspunktRequest) -> Result<ports::DeleteNetzanschlusspunktResponse, Option<SoapFault>> {

        let __request = DeleteNetzanschlusspunktRequestSoapEnvelope::new(SoapDeleteNetzanschlusspunktRequest {
            body: delete_netzanschlusspunkt_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "DeleteNetzanschlusspunkt")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: DeleteNetzanschlusspunktResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_liste_meine_netzanschlusspunkte (&self, get_liste_meine_netzanschlusspunkte_request: ports::GetListeMeineNetzanschlusspunkteRequest) -> Result<ports::GetListeMeineNetzanschlusspunkteResponse, Option<SoapFault>> {

        let __request = GetListeMeineNetzanschlusspunkteRequestSoapEnvelope::new(SoapGetListeMeineNetzanschlusspunkteRequest {
            body: get_liste_meine_netzanschlusspunkte_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeMeineNetzanschlusspunkte")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeMeineNetzanschlusspunkteResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_liste_alle_netzanschlusspunkte (&self, get_liste_alle_netzanschlusspunkte_request: ports::GetListeAlleNetzanschlusspunkteRequest) -> Result<ports::GetListeAlleNetzanschlusspunkteResponse, Option<SoapFault>> {

        let __request = GetListeAlleNetzanschlusspunkteRequestSoapEnvelope::new(SoapGetListeAlleNetzanschlusspunkteRequest {
            body: get_liste_alle_netzanschlusspunkte_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetListeAlleNetzanschlusspunkte")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetListeAlleNetzanschlusspunkteResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}}

            impl Mastrqs {
                async fn send_soap_request<T: YaSerialize>(&self, request: &T, action: &str) -> SoapResponse {
                    let body = to_string(request).expect("failed to generate xml");
                    debug!("SOAP Request: {}", body);
                    let mut req = self
                        .client
                        .post(&self.url)
                        .body(body)
                        .header("Content-Type", "text/xml")
                        .header("Soapaction", action);
                    if let Some(credentials) = &self.credentials {
                        req = req.basic_auth(
                            credentials.0.to_string(),
                            Option::Some(credentials.1.to_string()),
                        );
                    }
                    let res = req.send().await?;
                    let status = res.status();
                    debug!("SOAP Status: {}", status);
                    let txt = res.text().await.unwrap_or_default();
                    debug!("SOAP Response: {}", txt);
                    Ok((status, txt))
                }
            }
            #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberRequest {
                        #[yaserde(rename = "SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiber", default)]
                        pub body: ports::SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberRequest,
        }
        
        impl SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberRequestSoapEnvelope {
            pub fn new(body: SoapSetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberRequest) -> Self {
                SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberResponse {
                    #[yaserde(rename = "SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberResponse", default)]
                    pub body: ports::SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberResponse,
        }
        
        impl SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberResponseSoapEnvelope {
            pub fn new(body: SoapSetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberResponse) -> Self {
                SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetMastrqsKorrekturVorschlagEinheitWindRequest {
                        #[yaserde(rename = "SetMastrqsKorrekturVorschlagEinheitWind", default)]
                        pub body: ports::SetMastrqsKorrekturVorschlagEinheitWindRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetMastrqsKorrekturVorschlagEinheitWindRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetMastrqsKorrekturVorschlagEinheitWindRequest,
        }
        
        impl SetMastrqsKorrekturVorschlagEinheitWindRequestSoapEnvelope {
            pub fn new(body: SoapSetMastrqsKorrekturVorschlagEinheitWindRequest) -> Self {
                SetMastrqsKorrekturVorschlagEinheitWindRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetMastrqsKorrekturVorschlagEinheitWindResponse {
                    #[yaserde(rename = "SetMastrqsKorrekturVorschlagEinheitWindResponse", default)]
                    pub body: ports::SetMastrqsKorrekturVorschlagEinheitWindResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetMastrqsKorrekturVorschlagEinheitWindResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetMastrqsKorrekturVorschlagEinheitWindResponse,
        }
        
        impl SetMastrqsKorrekturVorschlagEinheitWindResponseSoapEnvelope {
            pub fn new(body: SoapSetMastrqsKorrekturVorschlagEinheitWindResponse) -> Self {
                SetMastrqsKorrekturVorschlagEinheitWindResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetMastrqsKorrekturVorschlagEinheitSolarRequest {
                        #[yaserde(rename = "SetMastrqsKorrekturVorschlagEinheitSolar", default)]
                        pub body: ports::SetMastrqsKorrekturVorschlagEinheitSolarRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetMastrqsKorrekturVorschlagEinheitSolarRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetMastrqsKorrekturVorschlagEinheitSolarRequest,
        }
        
        impl SetMastrqsKorrekturVorschlagEinheitSolarRequestSoapEnvelope {
            pub fn new(body: SoapSetMastrqsKorrekturVorschlagEinheitSolarRequest) -> Self {
                SetMastrqsKorrekturVorschlagEinheitSolarRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetMastrqsKorrekturVorschlagEinheitSolarResponse {
                    #[yaserde(rename = "SetMastrqsKorrekturVorschlagEinheitSolarResponse", default)]
                    pub body: ports::SetMastrqsKorrekturVorschlagEinheitSolarResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetMastrqsKorrekturVorschlagEinheitSolarResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetMastrqsKorrekturVorschlagEinheitSolarResponse,
        }
        
        impl SetMastrqsKorrekturVorschlagEinheitSolarResponseSoapEnvelope {
            pub fn new(body: SoapSetMastrqsKorrekturVorschlagEinheitSolarResponse) -> Self {
                SetMastrqsKorrekturVorschlagEinheitSolarResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetMastrqsKorrekturVorschlagEinheitBiomasseRequest {
                        #[yaserde(rename = "SetMastrqsKorrekturVorschlagEinheitBiomasse", default)]
                        pub body: ports::SetMastrqsKorrekturVorschlagEinheitBiomasseRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetMastrqsKorrekturVorschlagEinheitBiomasseRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetMastrqsKorrekturVorschlagEinheitBiomasseRequest,
        }
        
        impl SetMastrqsKorrekturVorschlagEinheitBiomasseRequestSoapEnvelope {
            pub fn new(body: SoapSetMastrqsKorrekturVorschlagEinheitBiomasseRequest) -> Self {
                SetMastrqsKorrekturVorschlagEinheitBiomasseRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetMastrqsKorrekturVorschlagEinheitBiomasseResponse {
                    #[yaserde(rename = "SetMastrqsKorrekturVorschlagEinheitBiomasseResponse", default)]
                    pub body: ports::SetMastrqsKorrekturVorschlagEinheitBiomasseResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetMastrqsKorrekturVorschlagEinheitBiomasseResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetMastrqsKorrekturVorschlagEinheitBiomasseResponse,
        }
        
        impl SetMastrqsKorrekturVorschlagEinheitBiomasseResponseSoapEnvelope {
            pub fn new(body: SoapSetMastrqsKorrekturVorschlagEinheitBiomasseResponse) -> Self {
                SetMastrqsKorrekturVorschlagEinheitBiomasseResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetMastrqsKorrekturVorschlagEinheitWasserRequest {
                        #[yaserde(rename = "SetMastrqsKorrekturVorschlagEinheitWasser", default)]
                        pub body: ports::SetMastrqsKorrekturVorschlagEinheitWasserRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetMastrqsKorrekturVorschlagEinheitWasserRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetMastrqsKorrekturVorschlagEinheitWasserRequest,
        }
        
        impl SetMastrqsKorrekturVorschlagEinheitWasserRequestSoapEnvelope {
            pub fn new(body: SoapSetMastrqsKorrekturVorschlagEinheitWasserRequest) -> Self {
                SetMastrqsKorrekturVorschlagEinheitWasserRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetMastrqsKorrekturVorschlagEinheitWasserResponse {
                    #[yaserde(rename = "SetMastrqsKorrekturVorschlagEinheitWasserResponse", default)]
                    pub body: ports::SetMastrqsKorrekturVorschlagEinheitWasserResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetMastrqsKorrekturVorschlagEinheitWasserResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetMastrqsKorrekturVorschlagEinheitWasserResponse,
        }
        
        impl SetMastrqsKorrekturVorschlagEinheitWasserResponseSoapEnvelope {
            pub fn new(body: SoapSetMastrqsKorrekturVorschlagEinheitWasserResponse) -> Self {
                SetMastrqsKorrekturVorschlagEinheitWasserResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest {
                        #[yaserde(rename = "SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannung", default)]
                        pub body: ports::SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest,
        }
        
        impl SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequestSoapEnvelope {
            pub fn new(body: SoapSetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest) -> Self {
                SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse {
                    #[yaserde(rename = "SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse", default)]
                    pub body: ports::SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse,
        }
        
        impl SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponseSoapEnvelope {
            pub fn new(body: SoapSetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse) -> Self {
                SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetMastrqsKorrekturVorschlagEinheitVerbrennungRequest {
                        #[yaserde(rename = "SetMastrqsKorrekturVorschlagEinheitVerbrennung", default)]
                        pub body: ports::SetMastrqsKorrekturVorschlagEinheitVerbrennungRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetMastrqsKorrekturVorschlagEinheitVerbrennungRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetMastrqsKorrekturVorschlagEinheitVerbrennungRequest,
        }
        
        impl SetMastrqsKorrekturVorschlagEinheitVerbrennungRequestSoapEnvelope {
            pub fn new(body: SoapSetMastrqsKorrekturVorschlagEinheitVerbrennungRequest) -> Self {
                SetMastrqsKorrekturVorschlagEinheitVerbrennungRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetMastrqsKorrekturVorschlagEinheitVerbrennungResponse {
                    #[yaserde(rename = "SetMastrqsKorrekturVorschlagEinheitVerbrennungResponse", default)]
                    pub body: ports::SetMastrqsKorrekturVorschlagEinheitVerbrennungResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetMastrqsKorrekturVorschlagEinheitVerbrennungResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetMastrqsKorrekturVorschlagEinheitVerbrennungResponse,
        }
        
        impl SetMastrqsKorrekturVorschlagEinheitVerbrennungResponseSoapEnvelope {
            pub fn new(body: SoapSetMastrqsKorrekturVorschlagEinheitVerbrennungResponse) -> Self {
                SetMastrqsKorrekturVorschlagEinheitVerbrennungResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetMastrqsKorrekturVorschlagEinheitGasSpeicherRequest {
                        #[yaserde(rename = "SetMastrqsKorrekturVorschlagEinheitGasSpeicher", default)]
                        pub body: ports::SetMastrqsKorrekturVorschlagEinheitGasSpeicherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetMastrqsKorrekturVorschlagEinheitGasSpeicherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetMastrqsKorrekturVorschlagEinheitGasSpeicherRequest,
        }
        
        impl SetMastrqsKorrekturVorschlagEinheitGasSpeicherRequestSoapEnvelope {
            pub fn new(body: SoapSetMastrqsKorrekturVorschlagEinheitGasSpeicherRequest) -> Self {
                SetMastrqsKorrekturVorschlagEinheitGasSpeicherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetMastrqsKorrekturVorschlagEinheitGasSpeicherResponse {
                    #[yaserde(rename = "SetMastrqsKorrekturVorschlagEinheitGasSpeicherResponse", default)]
                    pub body: ports::SetMastrqsKorrekturVorschlagEinheitGasSpeicherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetMastrqsKorrekturVorschlagEinheitGasSpeicherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetMastrqsKorrekturVorschlagEinheitGasSpeicherResponse,
        }
        
        impl SetMastrqsKorrekturVorschlagEinheitGasSpeicherResponseSoapEnvelope {
            pub fn new(body: SoapSetMastrqsKorrekturVorschlagEinheitGasSpeicherResponse) -> Self {
                SetMastrqsKorrekturVorschlagEinheitGasSpeicherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetMastrqsKorrekturVorschlagEinheitStromVerbraucherRequest {
                        #[yaserde(rename = "SetMastrqsKorrekturVorschlagEinheitStromVerbraucher", default)]
                        pub body: ports::SetMastrqsKorrekturVorschlagEinheitStromVerbraucherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetMastrqsKorrekturVorschlagEinheitStromVerbraucherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetMastrqsKorrekturVorschlagEinheitStromVerbraucherRequest,
        }
        
        impl SetMastrqsKorrekturVorschlagEinheitStromVerbraucherRequestSoapEnvelope {
            pub fn new(body: SoapSetMastrqsKorrekturVorschlagEinheitStromVerbraucherRequest) -> Self {
                SetMastrqsKorrekturVorschlagEinheitStromVerbraucherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetMastrqsKorrekturVorschlagEinheitStromVerbraucherResponse {
                    #[yaserde(rename = "SetMastrqsKorrekturVorschlagEinheitStromVerbraucherResponse", default)]
                    pub body: ports::SetMastrqsKorrekturVorschlagEinheitStromVerbraucherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetMastrqsKorrekturVorschlagEinheitStromVerbraucherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetMastrqsKorrekturVorschlagEinheitStromVerbraucherResponse,
        }
        
        impl SetMastrqsKorrekturVorschlagEinheitStromVerbraucherResponseSoapEnvelope {
            pub fn new(body: SoapSetMastrqsKorrekturVorschlagEinheitStromVerbraucherResponse) -> Self {
                SetMastrqsKorrekturVorschlagEinheitStromVerbraucherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetMastrqsKorrekturVorschlagEinheitGasErzeugerRequest {
                        #[yaserde(rename = "SetMastrqsKorrekturVorschlagEinheitGasErzeuger", default)]
                        pub body: ports::SetMastrqsKorrekturVorschlagEinheitGasErzeugerRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetMastrqsKorrekturVorschlagEinheitGasErzeugerRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetMastrqsKorrekturVorschlagEinheitGasErzeugerRequest,
        }
        
        impl SetMastrqsKorrekturVorschlagEinheitGasErzeugerRequestSoapEnvelope {
            pub fn new(body: SoapSetMastrqsKorrekturVorschlagEinheitGasErzeugerRequest) -> Self {
                SetMastrqsKorrekturVorschlagEinheitGasErzeugerRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetMastrqsKorrekturVorschlagEinheitGasErzeugerResponse {
                    #[yaserde(rename = "SetMastrqsKorrekturVorschlagEinheitGasErzeugerResponse", default)]
                    pub body: ports::SetMastrqsKorrekturVorschlagEinheitGasErzeugerResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetMastrqsKorrekturVorschlagEinheitGasErzeugerResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetMastrqsKorrekturVorschlagEinheitGasErzeugerResponse,
        }
        
        impl SetMastrqsKorrekturVorschlagEinheitGasErzeugerResponseSoapEnvelope {
            pub fn new(body: SoapSetMastrqsKorrekturVorschlagEinheitGasErzeugerResponse) -> Self {
                SetMastrqsKorrekturVorschlagEinheitGasErzeugerResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetMastrqsKorrekturVorschlagEinheitGasVerbraucherRequest {
                        #[yaserde(rename = "SetMastrqsKorrekturVorschlagEinheitGasVerbraucher", default)]
                        pub body: ports::SetMastrqsKorrekturVorschlagEinheitGasVerbraucherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetMastrqsKorrekturVorschlagEinheitGasVerbraucherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetMastrqsKorrekturVorschlagEinheitGasVerbraucherRequest,
        }
        
        impl SetMastrqsKorrekturVorschlagEinheitGasVerbraucherRequestSoapEnvelope {
            pub fn new(body: SoapSetMastrqsKorrekturVorschlagEinheitGasVerbraucherRequest) -> Self {
                SetMastrqsKorrekturVorschlagEinheitGasVerbraucherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetMastrqsKorrekturVorschlagEinheitGasVerbraucherResponse {
                    #[yaserde(rename = "SetMastrqsKorrekturVorschlagEinheitGasVerbraucherResponse", default)]
                    pub body: ports::SetMastrqsKorrekturVorschlagEinheitGasVerbraucherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetMastrqsKorrekturVorschlagEinheitGasVerbraucherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetMastrqsKorrekturVorschlagEinheitGasVerbraucherResponse,
        }
        
        impl SetMastrqsKorrekturVorschlagEinheitGasVerbraucherResponseSoapEnvelope {
            pub fn new(body: SoapSetMastrqsKorrekturVorschlagEinheitGasVerbraucherResponse) -> Self {
                SetMastrqsKorrekturVorschlagEinheitGasVerbraucherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetMastrqsKorrekturVorschlagEinheitStromSpeicherRequest {
                        #[yaserde(rename = "SetMastrqsKorrekturVorschlagEinheitStromSpeicher", default)]
                        pub body: ports::SetMastrqsKorrekturVorschlagEinheitStromSpeicherRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetMastrqsKorrekturVorschlagEinheitStromSpeicherRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetMastrqsKorrekturVorschlagEinheitStromSpeicherRequest,
        }
        
        impl SetMastrqsKorrekturVorschlagEinheitStromSpeicherRequestSoapEnvelope {
            pub fn new(body: SoapSetMastrqsKorrekturVorschlagEinheitStromSpeicherRequest) -> Self {
                SetMastrqsKorrekturVorschlagEinheitStromSpeicherRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapSetMastrqsKorrekturVorschlagEinheitStromSpeicherResponse {
                    #[yaserde(rename = "SetMastrqsKorrekturVorschlagEinheitStromSpeicherResponse", default)]
                    pub body: ports::SetMastrqsKorrekturVorschlagEinheitStromSpeicherResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct SetMastrqsKorrekturVorschlagEinheitStromSpeicherResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapSetMastrqsKorrekturVorschlagEinheitStromSpeicherResponse,
        }
        
        impl SetMastrqsKorrekturVorschlagEinheitStromSpeicherResponseSoapEnvelope {
            pub fn new(body: SoapSetMastrqsKorrekturVorschlagEinheitStromSpeicherResponse) -> Self {
                SetMastrqsKorrekturVorschlagEinheitStromSpeicherResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapMastrqsTicketBearbeiterZuweisenRequest {
                        #[yaserde(rename = "MastrqsTicketBearbeiterZuweisen", default)]
                        pub body: ports::MastrqsTicketBearbeiterZuweisenRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct MastrqsTicketBearbeiterZuweisenRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapMastrqsTicketBearbeiterZuweisenRequest,
        }
        
        impl MastrqsTicketBearbeiterZuweisenRequestSoapEnvelope {
            pub fn new(body: SoapMastrqsTicketBearbeiterZuweisenRequest) -> Self {
                MastrqsTicketBearbeiterZuweisenRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapMastrqsTicketBearbeiterZuweisenResponse {
                    #[yaserde(rename = "MastrqsTicketBearbeiterZuweisenResponse", default)]
                    pub body: ports::MastrqsTicketBearbeiterZuweisenResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct MastrqsTicketBearbeiterZuweisenResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapMastrqsTicketBearbeiterZuweisenResponse,
        }
        
        impl MastrqsTicketBearbeiterZuweisenResponseSoapEnvelope {
            pub fn new(body: SoapMastrqsTicketBearbeiterZuweisenResponse) -> Self {
                MastrqsTicketBearbeiterZuweisenResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapMastrqsStichwoerterAendernRequest {
                        #[yaserde(rename = "MastrqsStichwoerterAendern", default)]
                        pub body: ports::MastrqsStichwoerterAendernRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct MastrqsStichwoerterAendernRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapMastrqsStichwoerterAendernRequest,
        }
        
        impl MastrqsStichwoerterAendernRequestSoapEnvelope {
            pub fn new(body: SoapMastrqsStichwoerterAendernRequest) -> Self {
                MastrqsStichwoerterAendernRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapMastrqsStichwoerterAendernResponse {
                    #[yaserde(rename = "MastrqsStichwoerterAendernResponse", default)]
                    pub body: ports::MastrqsStichwoerterAendernResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct MastrqsStichwoerterAendernResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapMastrqsStichwoerterAendernResponse,
        }
        
        impl MastrqsStichwoerterAendernResponseSoapEnvelope {
            pub fn new(body: SoapMastrqsStichwoerterAendernResponse) -> Self {
                MastrqsStichwoerterAendernResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapMastrqsKorrekturvorschlagStornierenRequest {
                        #[yaserde(rename = "MastrqsKorrekturvorschlagStornieren", default)]
                        pub body: ports::MastrqsKorrekturvorschlagStornierenRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct MastrqsKorrekturvorschlagStornierenRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapMastrqsKorrekturvorschlagStornierenRequest,
        }
        
        impl MastrqsKorrekturvorschlagStornierenRequestSoapEnvelope {
            pub fn new(body: SoapMastrqsKorrekturvorschlagStornierenRequest) -> Self {
                MastrqsKorrekturvorschlagStornierenRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapMastrqsKorrekturvorschlagStornierenResponse {
                    #[yaserde(rename = "MastrqsKorrekturvorschlagStornierenResponse", default)]
                    pub body: ports::MastrqsKorrekturvorschlagStornierenResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct MastrqsKorrekturvorschlagStornierenResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapMastrqsKorrekturvorschlagStornierenResponse,
        }
        
        impl MastrqsKorrekturvorschlagStornierenResponseSoapEnvelope {
            pub fn new(body: SoapMastrqsKorrekturvorschlagStornierenResponse) -> Self {
                MastrqsKorrekturvorschlagStornierenResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagRequest {
                        #[yaserde(rename = "GetKorrekturVorschlag", default)]
                        pub body: ports::GetKorrekturVorschlagRequest,
                        #[yaserde(attribute)]
                        pub xmlns: Option<String>,
                    }
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagRequestSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagRequest,
        }
        
        impl GetKorrekturVorschlagRequestSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagRequest) -> Self {
                GetKorrekturVorschlagRequestSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
                    pub struct SoapGetKorrekturVorschlagResponse {
                    #[yaserde(rename = "GetKorrekturVorschlagResponse", default)]
                    pub body: ports::GetKorrekturVorschlagResponse,
                         #[yaserde(rename = "Fault", default)]
                            pub fault: Option<SoapFault>,
                            
                }
                #[derive(Debug, Default, YaSerialize, YaDeserialize)]
        #[yaserde(
            rename = "Envelope",
            namespace = "soapenv: http://schemas.xmlsoap.org/soap/envelope/",
            prefix = "soapenv"
        )]
        pub struct GetKorrekturVorschlagResponseSoapEnvelope {
            #[yaserde(rename = "encodingStyle", prefix = "soapenv", attribute)]
            pub encoding_style: String,
            #[yaserde(rename = "tns", prefix = "xmlns", attribute)]
            pub tnsattr: Option<String>,
            #[yaserde(rename = "urn", prefix = "xmlns", attribute)]
            pub urnattr: Option<String>,
            #[yaserde(rename = "xsi", prefix = "xmlns", attribute)]
            pub xsiattr: Option<String>,
            #[yaserde(rename = "Header", prefix = "soapenv")]
            pub header: Option<Header>,
            #[yaserde(rename = "Body", prefix = "soapenv")]
            pub body: SoapGetKorrekturVorschlagResponse,
        }
        
        impl GetKorrekturVorschlagResponseSoapEnvelope {
            pub fn new(body: SoapGetKorrekturVorschlagResponse) -> Self {
                GetKorrekturVorschlagResponseSoapEnvelope {
                    encoding_style: SOAP_ENCODING.to_string(),
                    tnsattr: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
                    body,
                    urnattr: None,
                    xsiattr: None,
                    header: None,
                }
            }
        }        
        
                impl Default for Mastrqs {
                fn default() -> Self {
                    Mastrqs {
                        client: reqwest::Client::new(),
                        url: "https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string(),
                        credentials: Option::None,
                     }
                }
            }
            impl Mastrqs {
                pub fn new(url: &str, credentials: Option<(String,String)>) -> Self {
                    Mastrqs {
                        client: reqwest::Client::new(),
                        url: url.to_string(),
                        credentials,
                    }
                }
        }
        pub struct Mastrqs {
                client: reqwest::Client,
                url: String,
                credentials: Option<(String,String)>
                }
                #[async_trait]
	impl ports::Mastrqs for Mastrqs {
	async fn set_mastrqs_korrektur_vorschlag_einheit_anlagenbetreiber (&self, set_mastrqs_korrektur_vorschlag_einheit_anlagenbetreiber_request: ports::SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberRequest) -> Result<ports::SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberResponse, Option<SoapFault>> {

        let __request = SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberRequestSoapEnvelope::new(SoapSetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberRequest {
            body: set_mastrqs_korrektur_vorschlag_einheit_anlagenbetreiber_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiber")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_mastrqs_korrektur_vorschlag_einheit_wind (&self, set_mastrqs_korrektur_vorschlag_einheit_wind_request: ports::SetMastrqsKorrekturVorschlagEinheitWindRequest) -> Result<ports::SetMastrqsKorrekturVorschlagEinheitWindResponse, Option<SoapFault>> {

        let __request = SetMastrqsKorrekturVorschlagEinheitWindRequestSoapEnvelope::new(SoapSetMastrqsKorrekturVorschlagEinheitWindRequest {
            body: set_mastrqs_korrektur_vorschlag_einheit_wind_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetMastrqsKorrekturVorschlagEinheitWind")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetMastrqsKorrekturVorschlagEinheitWindResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_mastrqs_korrektur_vorschlag_einheit_solar (&self, set_mastrqs_korrektur_vorschlag_einheit_solar_request: ports::SetMastrqsKorrekturVorschlagEinheitSolarRequest) -> Result<ports::SetMastrqsKorrekturVorschlagEinheitSolarResponse, Option<SoapFault>> {

        let __request = SetMastrqsKorrekturVorschlagEinheitSolarRequestSoapEnvelope::new(SoapSetMastrqsKorrekturVorschlagEinheitSolarRequest {
            body: set_mastrqs_korrektur_vorschlag_einheit_solar_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetMastrqsKorrekturVorschlagEinheitSolar")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetMastrqsKorrekturVorschlagEinheitSolarResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_mastrqs_korrektur_vorschlag_einheit_biomasse (&self, set_mastrqs_korrektur_vorschlag_einheit_biomasse_request: ports::SetMastrqsKorrekturVorschlagEinheitBiomasseRequest) -> Result<ports::SetMastrqsKorrekturVorschlagEinheitBiomasseResponse, Option<SoapFault>> {

        let __request = SetMastrqsKorrekturVorschlagEinheitBiomasseRequestSoapEnvelope::new(SoapSetMastrqsKorrekturVorschlagEinheitBiomasseRequest {
            body: set_mastrqs_korrektur_vorschlag_einheit_biomasse_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetMastrqsKorrekturVorschlagEinheitBiomasse")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetMastrqsKorrekturVorschlagEinheitBiomasseResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_mastrqs_korrektur_vorschlag_einheit_wasser (&self, set_mastrqs_korrektur_vorschlag_einheit_wasser_request: ports::SetMastrqsKorrekturVorschlagEinheitWasserRequest) -> Result<ports::SetMastrqsKorrekturVorschlagEinheitWasserResponse, Option<SoapFault>> {

        let __request = SetMastrqsKorrekturVorschlagEinheitWasserRequestSoapEnvelope::new(SoapSetMastrqsKorrekturVorschlagEinheitWasserRequest {
            body: set_mastrqs_korrektur_vorschlag_einheit_wasser_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetMastrqsKorrekturVorschlagEinheitWasser")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetMastrqsKorrekturVorschlagEinheitWasserResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_mastrqs_korrektur_vorschlag_einheit_geothermie_grubengas_druckentspannung (&self, set_mastrqs_korrektur_vorschlag_einheit_geothermie_grubengas_druckentspannung_request: ports::SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest) -> Result<ports::SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse, Option<SoapFault>> {

        let __request = SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequestSoapEnvelope::new(SoapSetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest {
            body: set_mastrqs_korrektur_vorschlag_einheit_geothermie_grubengas_druckentspannung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_mastrqs_korrektur_vorschlag_einheit_verbrennung (&self, set_mastrqs_korrektur_vorschlag_einheit_verbrennung_request: ports::SetMastrqsKorrekturVorschlagEinheitVerbrennungRequest) -> Result<ports::SetMastrqsKorrekturVorschlagEinheitVerbrennungResponse, Option<SoapFault>> {

        let __request = SetMastrqsKorrekturVorschlagEinheitVerbrennungRequestSoapEnvelope::new(SoapSetMastrqsKorrekturVorschlagEinheitVerbrennungRequest {
            body: set_mastrqs_korrektur_vorschlag_einheit_verbrennung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetMastrqsKorrekturVorschlagEinheitVerbrennung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetMastrqsKorrekturVorschlagEinheitVerbrennungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_mastrqs_korrektur_vorschlag_einheit_gas_speicher (&self, set_mastrqs_korrektur_vorschlag_einheit_gas_speicher_request: ports::SetMastrqsKorrekturVorschlagEinheitGasSpeicherRequest) -> Result<ports::SetMastrqsKorrekturVorschlagEinheitGasSpeicherResponse, Option<SoapFault>> {

        let __request = SetMastrqsKorrekturVorschlagEinheitGasSpeicherRequestSoapEnvelope::new(SoapSetMastrqsKorrekturVorschlagEinheitGasSpeicherRequest {
            body: set_mastrqs_korrektur_vorschlag_einheit_gas_speicher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetMastrqsKorrekturVorschlagEinheitGasSpeicher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetMastrqsKorrekturVorschlagEinheitGasSpeicherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_mastrqs_korrektur_vorschlag_einheit_strom_verbraucher (&self, set_mastrqs_korrektur_vorschlag_einheit_strom_verbraucher_request: ports::SetMastrqsKorrekturVorschlagEinheitStromVerbraucherRequest) -> Result<ports::SetMastrqsKorrekturVorschlagEinheitStromVerbraucherResponse, Option<SoapFault>> {

        let __request = SetMastrqsKorrekturVorschlagEinheitStromVerbraucherRequestSoapEnvelope::new(SoapSetMastrqsKorrekturVorschlagEinheitStromVerbraucherRequest {
            body: set_mastrqs_korrektur_vorschlag_einheit_strom_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetMastrqsKorrekturVorschlagEinheitStromVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetMastrqsKorrekturVorschlagEinheitStromVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_mastrqs_korrektur_vorschlag_einheit_gas_erzeuger (&self, set_mastrqs_korrektur_vorschlag_einheit_gas_erzeuger_request: ports::SetMastrqsKorrekturVorschlagEinheitGasErzeugerRequest) -> Result<ports::SetMastrqsKorrekturVorschlagEinheitGasErzeugerResponse, Option<SoapFault>> {

        let __request = SetMastrqsKorrekturVorschlagEinheitGasErzeugerRequestSoapEnvelope::new(SoapSetMastrqsKorrekturVorschlagEinheitGasErzeugerRequest {
            body: set_mastrqs_korrektur_vorschlag_einheit_gas_erzeuger_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetMastrqsKorrekturVorschlagEinheitGasErzeuger")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetMastrqsKorrekturVorschlagEinheitGasErzeugerResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_mastrqs_korrektur_vorschlag_einheit_gas_verbraucher (&self, set_mastrqs_korrektur_vorschlag_einheit_gas_verbraucher_request: ports::SetMastrqsKorrekturVorschlagEinheitGasVerbraucherRequest) -> Result<ports::SetMastrqsKorrekturVorschlagEinheitGasVerbraucherResponse, Option<SoapFault>> {

        let __request = SetMastrqsKorrekturVorschlagEinheitGasVerbraucherRequestSoapEnvelope::new(SoapSetMastrqsKorrekturVorschlagEinheitGasVerbraucherRequest {
            body: set_mastrqs_korrektur_vorschlag_einheit_gas_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetMastrqsKorrekturVorschlagEinheitGasVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetMastrqsKorrekturVorschlagEinheitGasVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_mastrqs_korrektur_vorschlag_einheit_strom_speicher (&self, set_mastrqs_korrektur_vorschlag_einheit_strom_speicher_request: ports::SetMastrqsKorrekturVorschlagEinheitStromSpeicherRequest) -> Result<ports::SetMastrqsKorrekturVorschlagEinheitStromSpeicherResponse, Option<SoapFault>> {

        let __request = SetMastrqsKorrekturVorschlagEinheitStromSpeicherRequestSoapEnvelope::new(SoapSetMastrqsKorrekturVorschlagEinheitStromSpeicherRequest {
            body: set_mastrqs_korrektur_vorschlag_einheit_strom_speicher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetMastrqsKorrekturVorschlagEinheitStromSpeicher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetMastrqsKorrekturVorschlagEinheitStromSpeicherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn mastrqs_ticket_bearbeiter_zuweisen (&self, mastrqs_ticket_bearbeiter_zuweisen_request: ports::MastrqsTicketBearbeiterZuweisenRequest) -> Result<ports::MastrqsTicketBearbeiterZuweisenResponse, Option<SoapFault>> {

        let __request = MastrqsTicketBearbeiterZuweisenRequestSoapEnvelope::new(SoapMastrqsTicketBearbeiterZuweisenRequest {
            body: mastrqs_ticket_bearbeiter_zuweisen_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "MastrqsTicketBearbeiterZuweisen")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: MastrqsTicketBearbeiterZuweisenResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn mastrqs_stichwoerter_aendern (&self, mastrqs_stichwoerter_aendern_request: ports::MastrqsStichwoerterAendernRequest) -> Result<ports::MastrqsStichwoerterAendernResponse, Option<SoapFault>> {

        let __request = MastrqsStichwoerterAendernRequestSoapEnvelope::new(SoapMastrqsStichwoerterAendernRequest {
            body: mastrqs_stichwoerter_aendern_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "MastrqsStichwoerterAendern")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: MastrqsStichwoerterAendernResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn mastrqs_korrekturvorschlag_stornieren (&self, mastrqs_korrekturvorschlag_stornieren_request: ports::MastrqsKorrekturvorschlagStornierenRequest) -> Result<ports::MastrqsKorrekturvorschlagStornierenResponse, Option<SoapFault>> {

        let __request = MastrqsKorrekturvorschlagStornierenRequestSoapEnvelope::new(SoapMastrqsKorrekturvorschlagStornierenRequest {
            body: mastrqs_korrekturvorschlag_stornieren_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "MastrqsKorrekturvorschlagStornieren")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: MastrqsKorrekturvorschlagStornierenResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag (&self, get_korrektur_vorschlag_request: ports::GetKorrekturVorschlagRequest) -> Result<ports::GetKorrekturVorschlagResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagRequestSoapEnvelope::new(SoapGetKorrekturVorschlagRequest {
            body: get_korrektur_vorschlag_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlag")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}}

            impl Mastrqs12 {
                async fn send_soap_request<T: YaSerialize>(&self, request: &T, action: &str) -> SoapResponse {
                    let body = to_string(request).expect("failed to generate xml");
                    debug!("SOAP Request: {}", body);
                    let mut req = self
                        .client
                        .post(&self.url)
                        .body(body)
                        .header("Content-Type", "text/xml")
                        .header("Soapaction", action);
                    if let Some(credentials) = &self.credentials {
                        req = req.basic_auth(
                            credentials.0.to_string(),
                            Option::Some(credentials.1.to_string()),
                        );
                    }
                    let res = req.send().await?;
                    let status = res.status();
                    debug!("SOAP Status: {}", status);
                    let txt = res.text().await.unwrap_or_default();
                    debug!("SOAP Response: {}", txt);
                    Ok((status, txt))
                }
            }
            impl Default for Mastrqs12 {
                fn default() -> Self {
                    Mastrqs12 {
                        client: reqwest::Client::new(),
                        url: "https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string(),
                        credentials: Option::None,
                     }
                }
            }
            impl Mastrqs12 {
                pub fn new(url: &str, credentials: Option<(String,String)>) -> Self {
                    Mastrqs12 {
                        client: reqwest::Client::new(),
                        url: url.to_string(),
                        credentials,
                    }
                }
        }
        pub struct Mastrqs12 {
                client: reqwest::Client,
                url: String,
                credentials: Option<(String,String)>
                }
                #[async_trait]
	impl ports::Mastrqs for Mastrqs12 {
	async fn set_mastrqs_korrektur_vorschlag_einheit_anlagenbetreiber (&self, set_mastrqs_korrektur_vorschlag_einheit_anlagenbetreiber_request: ports::SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberRequest) -> Result<ports::SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberResponse, Option<SoapFault>> {

        let __request = SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberRequestSoapEnvelope::new(SoapSetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberRequest {
            body: set_mastrqs_korrektur_vorschlag_einheit_anlagenbetreiber_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiber")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetMastrqsKorrekturVorschlagEinheitAnlagenbetreiberResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_mastrqs_korrektur_vorschlag_einheit_wind (&self, set_mastrqs_korrektur_vorschlag_einheit_wind_request: ports::SetMastrqsKorrekturVorschlagEinheitWindRequest) -> Result<ports::SetMastrqsKorrekturVorschlagEinheitWindResponse, Option<SoapFault>> {

        let __request = SetMastrqsKorrekturVorschlagEinheitWindRequestSoapEnvelope::new(SoapSetMastrqsKorrekturVorschlagEinheitWindRequest {
            body: set_mastrqs_korrektur_vorschlag_einheit_wind_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetMastrqsKorrekturVorschlagEinheitWind")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetMastrqsKorrekturVorschlagEinheitWindResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_mastrqs_korrektur_vorschlag_einheit_solar (&self, set_mastrqs_korrektur_vorschlag_einheit_solar_request: ports::SetMastrqsKorrekturVorschlagEinheitSolarRequest) -> Result<ports::SetMastrqsKorrekturVorschlagEinheitSolarResponse, Option<SoapFault>> {

        let __request = SetMastrqsKorrekturVorschlagEinheitSolarRequestSoapEnvelope::new(SoapSetMastrqsKorrekturVorschlagEinheitSolarRequest {
            body: set_mastrqs_korrektur_vorschlag_einheit_solar_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetMastrqsKorrekturVorschlagEinheitSolar")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetMastrqsKorrekturVorschlagEinheitSolarResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_mastrqs_korrektur_vorschlag_einheit_biomasse (&self, set_mastrqs_korrektur_vorschlag_einheit_biomasse_request: ports::SetMastrqsKorrekturVorschlagEinheitBiomasseRequest) -> Result<ports::SetMastrqsKorrekturVorschlagEinheitBiomasseResponse, Option<SoapFault>> {

        let __request = SetMastrqsKorrekturVorschlagEinheitBiomasseRequestSoapEnvelope::new(SoapSetMastrqsKorrekturVorschlagEinheitBiomasseRequest {
            body: set_mastrqs_korrektur_vorschlag_einheit_biomasse_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetMastrqsKorrekturVorschlagEinheitBiomasse")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetMastrqsKorrekturVorschlagEinheitBiomasseResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_mastrqs_korrektur_vorschlag_einheit_wasser (&self, set_mastrqs_korrektur_vorschlag_einheit_wasser_request: ports::SetMastrqsKorrekturVorschlagEinheitWasserRequest) -> Result<ports::SetMastrqsKorrekturVorschlagEinheitWasserResponse, Option<SoapFault>> {

        let __request = SetMastrqsKorrekturVorschlagEinheitWasserRequestSoapEnvelope::new(SoapSetMastrqsKorrekturVorschlagEinheitWasserRequest {
            body: set_mastrqs_korrektur_vorschlag_einheit_wasser_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetMastrqsKorrekturVorschlagEinheitWasser")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetMastrqsKorrekturVorschlagEinheitWasserResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_mastrqs_korrektur_vorschlag_einheit_geothermie_grubengas_druckentspannung (&self, set_mastrqs_korrektur_vorschlag_einheit_geothermie_grubengas_druckentspannung_request: ports::SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest) -> Result<ports::SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponse, Option<SoapFault>> {

        let __request = SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequestSoapEnvelope::new(SoapSetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungRequest {
            body: set_mastrqs_korrektur_vorschlag_einheit_geothermie_grubengas_druckentspannung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetMastrqsKorrekturVorschlagEinheitGeothermieGrubengasDruckentspannungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_mastrqs_korrektur_vorschlag_einheit_verbrennung (&self, set_mastrqs_korrektur_vorschlag_einheit_verbrennung_request: ports::SetMastrqsKorrekturVorschlagEinheitVerbrennungRequest) -> Result<ports::SetMastrqsKorrekturVorschlagEinheitVerbrennungResponse, Option<SoapFault>> {

        let __request = SetMastrqsKorrekturVorschlagEinheitVerbrennungRequestSoapEnvelope::new(SoapSetMastrqsKorrekturVorschlagEinheitVerbrennungRequest {
            body: set_mastrqs_korrektur_vorschlag_einheit_verbrennung_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetMastrqsKorrekturVorschlagEinheitVerbrennung")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetMastrqsKorrekturVorschlagEinheitVerbrennungResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_mastrqs_korrektur_vorschlag_einheit_gas_speicher (&self, set_mastrqs_korrektur_vorschlag_einheit_gas_speicher_request: ports::SetMastrqsKorrekturVorschlagEinheitGasSpeicherRequest) -> Result<ports::SetMastrqsKorrekturVorschlagEinheitGasSpeicherResponse, Option<SoapFault>> {

        let __request = SetMastrqsKorrekturVorschlagEinheitGasSpeicherRequestSoapEnvelope::new(SoapSetMastrqsKorrekturVorschlagEinheitGasSpeicherRequest {
            body: set_mastrqs_korrektur_vorschlag_einheit_gas_speicher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetMastrqsKorrekturVorschlagEinheitGasSpeicher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetMastrqsKorrekturVorschlagEinheitGasSpeicherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_mastrqs_korrektur_vorschlag_einheit_strom_verbraucher (&self, set_mastrqs_korrektur_vorschlag_einheit_strom_verbraucher_request: ports::SetMastrqsKorrekturVorschlagEinheitStromVerbraucherRequest) -> Result<ports::SetMastrqsKorrekturVorschlagEinheitStromVerbraucherResponse, Option<SoapFault>> {

        let __request = SetMastrqsKorrekturVorschlagEinheitStromVerbraucherRequestSoapEnvelope::new(SoapSetMastrqsKorrekturVorschlagEinheitStromVerbraucherRequest {
            body: set_mastrqs_korrektur_vorschlag_einheit_strom_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetMastrqsKorrekturVorschlagEinheitStromVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetMastrqsKorrekturVorschlagEinheitStromVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_mastrqs_korrektur_vorschlag_einheit_gas_erzeuger (&self, set_mastrqs_korrektur_vorschlag_einheit_gas_erzeuger_request: ports::SetMastrqsKorrekturVorschlagEinheitGasErzeugerRequest) -> Result<ports::SetMastrqsKorrekturVorschlagEinheitGasErzeugerResponse, Option<SoapFault>> {

        let __request = SetMastrqsKorrekturVorschlagEinheitGasErzeugerRequestSoapEnvelope::new(SoapSetMastrqsKorrekturVorschlagEinheitGasErzeugerRequest {
            body: set_mastrqs_korrektur_vorschlag_einheit_gas_erzeuger_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetMastrqsKorrekturVorschlagEinheitGasErzeuger")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetMastrqsKorrekturVorschlagEinheitGasErzeugerResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_mastrqs_korrektur_vorschlag_einheit_gas_verbraucher (&self, set_mastrqs_korrektur_vorschlag_einheit_gas_verbraucher_request: ports::SetMastrqsKorrekturVorschlagEinheitGasVerbraucherRequest) -> Result<ports::SetMastrqsKorrekturVorschlagEinheitGasVerbraucherResponse, Option<SoapFault>> {

        let __request = SetMastrqsKorrekturVorschlagEinheitGasVerbraucherRequestSoapEnvelope::new(SoapSetMastrqsKorrekturVorschlagEinheitGasVerbraucherRequest {
            body: set_mastrqs_korrektur_vorschlag_einheit_gas_verbraucher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetMastrqsKorrekturVorschlagEinheitGasVerbraucher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetMastrqsKorrekturVorschlagEinheitGasVerbraucherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn set_mastrqs_korrektur_vorschlag_einheit_strom_speicher (&self, set_mastrqs_korrektur_vorschlag_einheit_strom_speicher_request: ports::SetMastrqsKorrekturVorschlagEinheitStromSpeicherRequest) -> Result<ports::SetMastrqsKorrekturVorschlagEinheitStromSpeicherResponse, Option<SoapFault>> {

        let __request = SetMastrqsKorrekturVorschlagEinheitStromSpeicherRequestSoapEnvelope::new(SoapSetMastrqsKorrekturVorschlagEinheitStromSpeicherRequest {
            body: set_mastrqs_korrektur_vorschlag_einheit_strom_speicher_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "SetMastrqsKorrekturVorschlagEinheitStromSpeicher")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: SetMastrqsKorrekturVorschlagEinheitStromSpeicherResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn mastrqs_ticket_bearbeiter_zuweisen (&self, mastrqs_ticket_bearbeiter_zuweisen_request: ports::MastrqsTicketBearbeiterZuweisenRequest) -> Result<ports::MastrqsTicketBearbeiterZuweisenResponse, Option<SoapFault>> {

        let __request = MastrqsTicketBearbeiterZuweisenRequestSoapEnvelope::new(SoapMastrqsTicketBearbeiterZuweisenRequest {
            body: mastrqs_ticket_bearbeiter_zuweisen_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "MastrqsTicketBearbeiterZuweisen")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: MastrqsTicketBearbeiterZuweisenResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn mastrqs_stichwoerter_aendern (&self, mastrqs_stichwoerter_aendern_request: ports::MastrqsStichwoerterAendernRequest) -> Result<ports::MastrqsStichwoerterAendernResponse, Option<SoapFault>> {

        let __request = MastrqsStichwoerterAendernRequestSoapEnvelope::new(SoapMastrqsStichwoerterAendernRequest {
            body: mastrqs_stichwoerter_aendern_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "MastrqsStichwoerterAendern")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: MastrqsStichwoerterAendernResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn mastrqs_korrekturvorschlag_stornieren (&self, mastrqs_korrekturvorschlag_stornieren_request: ports::MastrqsKorrekturvorschlagStornierenRequest) -> Result<ports::MastrqsKorrekturvorschlagStornierenResponse, Option<SoapFault>> {

        let __request = MastrqsKorrekturvorschlagStornierenRequestSoapEnvelope::new(SoapMastrqsKorrekturvorschlagStornierenRequest {
            body: mastrqs_korrekturvorschlag_stornieren_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "MastrqsKorrekturvorschlagStornieren")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: MastrqsKorrekturvorschlagStornierenResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}	async fn get_korrektur_vorschlag (&self, get_korrektur_vorschlag_request: ports::GetKorrekturVorschlagRequest) -> Result<ports::GetKorrekturVorschlagResponse, Option<SoapFault>> {

        let __request = GetKorrekturVorschlagRequestSoapEnvelope::new(SoapGetKorrekturVorschlagRequest {
            body: get_korrektur_vorschlag_request,
            xmlns: Option::Some("https://www.marktstammdatenregister.de/Services/Public/1_2/Modelle/Mastrqs".to_string()),
        });            
        
        let (status, response) = self.send_soap_request(&__request, "GetKorrekturVorschlag")
                    .await
                    .map_err(|err| {
                        warn!("Failed to send SOAP request: {:?}", err);
                        None
                    })?;

        let r: GetKorrekturVorschlagResponseSoapEnvelope = from_str(&response).map_err(|err| {
                        warn!("Failed to unmarshal SOAP response: {:?}", err);
                        None
                    })?;
        if status.is_success() {
            Ok(r.body.body)
        } else {
            Err(r.body.fault)
        }}}
}

pub mod services {
use yaserde::{YaSerialize, YaDeserialize};
            use yaserde::de::from_str;
            use async_trait::async_trait;
            use yaserde::ser::to_string;
            use super::*;
            /** Die Marktstammdaten-Webdienst-Webdienste sind
      eine Sammlung von HTTP-Schnittstellen zum programmtechnischen
      Datenaustausch zwischen dem Marktstammdatenregister und Klienten.
      Je nach Benutzergruppe kann der Zugriff eingeschränkt oder
      vollständig sein. Neben dem Datenabruf ermöglichen die Webdienste
      eine Unterstützung verschiedener Prozesse des
      Marktstammdatenregisters.
    
 */
pub struct Marktstammdatenregister {}
               impl Marktstammdatenregister {
                
            pub fn new_client(credentials: Option<(String, String)>) -> bindings::Allgemein {
                bindings::Allgemein::new("https://www.marktstammdatenregister.de/MaStRApi/Api.svc/Soap11/Common", credentials)
            }
        }
}

